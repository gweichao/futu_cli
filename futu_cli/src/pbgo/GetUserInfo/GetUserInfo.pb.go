// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: GetUserInfo.proto

package GetUserInfo

import (
	fmt "fmt"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	_ "pbgo/Common"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type UpdateType int32

const (
	UpdateType_UpdateType_None   UpdateType = 0
	UpdateType_UpdateType_Advice UpdateType = 1
	UpdateType_UpdateType_Force  UpdateType = 2
)

var UpdateType_name = map[int32]string{
	0: "UpdateType_None",
	1: "UpdateType_Advice",
	2: "UpdateType_Force",
}

var UpdateType_value = map[string]int32{
	"UpdateType_None":   0,
	"UpdateType_Advice": 1,
	"UpdateType_Force":  2,
}

func (x UpdateType) Enum() *UpdateType {
	p := new(UpdateType)
	*p = x
	return p
}

func (x UpdateType) String() string {
	return proto.EnumName(UpdateType_name, int32(x))
}

func (x *UpdateType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(UpdateType_value, data, "UpdateType")
	if err != nil {
		return err
	}
	*x = UpdateType(value)
	return nil
}

func (UpdateType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cb345f7e707afc7e, []int{0}
}

type UserInfoField int32

const (
	UserInfoField_UserInfoField_Basic      UserInfoField = 1
	UserInfoField_UserInfoField_API        UserInfoField = 2
	UserInfoField_UserInfoField_QotRight   UserInfoField = 4
	UserInfoField_UserInfoField_Disclaimer UserInfoField = 8
	UserInfoField_UserInfoField_Update     UserInfoField = 16
	UserInfoField_UserInfoField_WebKey     UserInfoField = 2048
)

var UserInfoField_name = map[int32]string{
	1:    "UserInfoField_Basic",
	2:    "UserInfoField_API",
	4:    "UserInfoField_QotRight",
	8:    "UserInfoField_Disclaimer",
	16:   "UserInfoField_Update",
	2048: "UserInfoField_WebKey",
}

var UserInfoField_value = map[string]int32{
	"UserInfoField_Basic":      1,
	"UserInfoField_API":        2,
	"UserInfoField_QotRight":   4,
	"UserInfoField_Disclaimer": 8,
	"UserInfoField_Update":     16,
	"UserInfoField_WebKey":     2048,
}

func (x UserInfoField) Enum() *UserInfoField {
	p := new(UserInfoField)
	*p = x
	return p
}

func (x UserInfoField) String() string {
	return proto.EnumName(UserInfoField_name, int32(x))
}

func (x *UserInfoField) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(UserInfoField_value, data, "UserInfoField")
	if err != nil {
		return err
	}
	*x = UserInfoField(value)
	return nil
}

func (UserInfoField) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cb345f7e707afc7e, []int{1}
}

type C2S struct {
	Flag int32 `protobuf:"varint,2,opt,name=flag" json:"flag"`
}

func (m *C2S) Reset()         { *m = C2S{} }
func (m *C2S) String() string { return proto.CompactTextString(m) }
func (*C2S) ProtoMessage()    {}
func (*C2S) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb345f7e707afc7e, []int{0}
}
func (m *C2S) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S.Merge(m, src)
}
func (m *C2S) XXX_Size() int {
	return m.Size()
}
func (m *C2S) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S.DiscardUnknown(m)
}

var xxx_messageInfo_C2S proto.InternalMessageInfo

func (m *C2S) GetFlag() int32 {
	if m != nil {
		return m.Flag
	}
	return 0
}

type S2C struct {
	NickName              string `protobuf:"bytes,1,opt,name=nickName" json:"nickName"`
	AvatarUrl             string `protobuf:"bytes,2,opt,name=avatarUrl" json:"avatarUrl"`
	ApiLevel              string `protobuf:"bytes,3,opt,name=apiLevel" json:"apiLevel"`
	HkQotRight            int32  `protobuf:"varint,4,opt,name=hkQotRight" json:"hkQotRight"`
	UsQotRight            int32  `protobuf:"varint,5,opt,name=usQotRight" json:"usQotRight"`
	CnQotRight            int32  `protobuf:"varint,6,opt,name=cnQotRight" json:"cnQotRight"`
	IsNeedAgreeDisclaimer bool   `protobuf:"varint,7,opt,name=isNeedAgreeDisclaimer" json:"isNeedAgreeDisclaimer"`
	UserID                int64  `protobuf:"varint,8,opt,name=userID" json:"userID"`
	UpdateType            int32  `protobuf:"varint,9,opt,name=updateType" json:"updateType"`
	WebKey                string `protobuf:"bytes,10,opt,name=webKey" json:"webKey"`
	HkOptionQotRight      int32  `protobuf:"varint,11,opt,name=hkOptionQotRight" json:"hkOptionQotRight"`
	HasUSOptionQotRight   bool   `protobuf:"varint,12,opt,name=hasUSOptionQotRight" json:"hasUSOptionQotRight"`
	HkFutureQotRight      int32  `protobuf:"varint,13,opt,name=hkFutureQotRight" json:"hkFutureQotRight"`
}

func (m *S2C) Reset()         { *m = S2C{} }
func (m *S2C) String() string { return proto.CompactTextString(m) }
func (*S2C) ProtoMessage()    {}
func (*S2C) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb345f7e707afc7e, []int{1}
}
func (m *S2C) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C.Merge(m, src)
}
func (m *S2C) XXX_Size() int {
	return m.Size()
}
func (m *S2C) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C.DiscardUnknown(m)
}

var xxx_messageInfo_S2C proto.InternalMessageInfo

func (m *S2C) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *S2C) GetAvatarUrl() string {
	if m != nil {
		return m.AvatarUrl
	}
	return ""
}

func (m *S2C) GetApiLevel() string {
	if m != nil {
		return m.ApiLevel
	}
	return ""
}

func (m *S2C) GetHkQotRight() int32 {
	if m != nil {
		return m.HkQotRight
	}
	return 0
}

func (m *S2C) GetUsQotRight() int32 {
	if m != nil {
		return m.UsQotRight
	}
	return 0
}

func (m *S2C) GetCnQotRight() int32 {
	if m != nil {
		return m.CnQotRight
	}
	return 0
}

func (m *S2C) GetIsNeedAgreeDisclaimer() bool {
	if m != nil {
		return m.IsNeedAgreeDisclaimer
	}
	return false
}

func (m *S2C) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *S2C) GetUpdateType() int32 {
	if m != nil {
		return m.UpdateType
	}
	return 0
}

func (m *S2C) GetWebKey() string {
	if m != nil {
		return m.WebKey
	}
	return ""
}

func (m *S2C) GetHkOptionQotRight() int32 {
	if m != nil {
		return m.HkOptionQotRight
	}
	return 0
}

func (m *S2C) GetHasUSOptionQotRight() bool {
	if m != nil {
		return m.HasUSOptionQotRight
	}
	return false
}

func (m *S2C) GetHkFutureQotRight() int32 {
	if m != nil {
		return m.HkFutureQotRight
	}
	return 0
}

type Request struct {
	C2S *C2S `protobuf:"bytes,1,req,name=c2s" json:"c2s,omitempty"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb345f7e707afc7e, []int{2}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return m.Size()
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetC2S() *C2S {
	if m != nil {
		return m.C2S
	}
	return nil
}

type Response struct {
	RetType *int32 `protobuf:"varint,1,req,name=retType,def=-400" json:"retType,omitempty"`
	RetMsg  string `protobuf:"bytes,2,opt,name=retMsg" json:"retMsg"`
	ErrCode int32  `protobuf:"varint,3,opt,name=errCode" json:"errCode"`
	S2C     *S2C   `protobuf:"bytes,4,opt,name=s2c" json:"s2c,omitempty"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb345f7e707afc7e, []int{3}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return m.Size()
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

const Default_Response_RetType int32 = -400

func (m *Response) GetRetType() int32 {
	if m != nil && m.RetType != nil {
		return *m.RetType
	}
	return Default_Response_RetType
}

func (m *Response) GetRetMsg() string {
	if m != nil {
		return m.RetMsg
	}
	return ""
}

func (m *Response) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *Response) GetS2C() *S2C {
	if m != nil {
		return m.S2C
	}
	return nil
}

func init() {
	proto.RegisterEnum("GetUserInfo.UpdateType", UpdateType_name, UpdateType_value)
	proto.RegisterEnum("GetUserInfo.UserInfoField", UserInfoField_name, UserInfoField_value)
	proto.RegisterType((*C2S)(nil), "GetUserInfo.C2S")
	proto.RegisterType((*S2C)(nil), "GetUserInfo.S2C")
	proto.RegisterType((*Request)(nil), "GetUserInfo.Request")
	proto.RegisterType((*Response)(nil), "GetUserInfo.Response")
}

func init() { proto.RegisterFile("GetUserInfo.proto", fileDescriptor_cb345f7e707afc7e) }

var fileDescriptor_cb345f7e707afc7e = []byte{
	// 583 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xc1, 0x4e, 0xdb, 0x4e,
	0x10, 0xc6, 0xb3, 0x49, 0x80, 0x30, 0x80, 0xfe, 0xcb, 0x06, 0xfe, 0xdd, 0x22, 0x64, 0xa2, 0xa8,
	0x87, 0x08, 0x89, 0x14, 0x59, 0x55, 0x0f, 0x5c, 0x2a, 0x30, 0xa2, 0x42, 0x6d, 0xd3, 0xd6, 0x69,
	0x54, 0xa9, 0x17, 0x64, 0x9c, 0x21, 0xb1, 0x48, 0xbc, 0xee, 0xee, 0x9a, 0x8a, 0x5b, 0x1f, 0xa0,
	0x87, 0x5e, 0xfb, 0x12, 0x7d, 0x0e, 0x8e, 0x1c, 0x7b, 0xaa, 0x2a, 0x78, 0x91, 0xca, 0xc6, 0x8e,
	0xd7, 0x94, 0xa3, 0x7f, 0xdf, 0x37, 0x33, 0xdf, 0x8e, 0x07, 0x56, 0x5f, 0xa2, 0x1e, 0x28, 0x94,
	0xc7, 0xe1, 0x99, 0xe8, 0x46, 0x52, 0x68, 0xc1, 0x96, 0x0c, 0xb4, 0xb1, 0xec, 0x88, 0xe9, 0x54,
	0x84, 0x77, 0x52, 0x7b, 0x0b, 0x6a, 0x8e, 0xdd, 0x67, 0x1c, 0xea, 0x67, 0x13, 0x6f, 0xc4, 0xab,
	0x2d, 0xd2, 0x99, 0x3b, 0xa8, 0x5f, 0xfd, 0xde, 0xaa, 0xb8, 0x29, 0x69, 0xff, 0xa8, 0x43, 0xad,
	0x6f, 0x3b, 0xac, 0x05, 0x8d, 0x30, 0xf0, 0xcf, 0x7b, 0xde, 0x14, 0x39, 0x69, 0x91, 0xce, 0x62,
	0xe6, 0x9a, 0x51, 0xd6, 0x86, 0x45, 0xef, 0xc2, 0xd3, 0x9e, 0x1c, 0xc8, 0x49, 0xda, 0x28, 0xb7,
	0x14, 0x38, 0xe9, 0xe2, 0x45, 0xc1, 0x6b, 0xbc, 0xc0, 0x09, 0xaf, 0x99, 0x5d, 0x72, 0xca, 0x9e,
	0x00, 0x8c, 0xcf, 0xdf, 0x0b, 0xed, 0x06, 0xa3, 0xb1, 0xe6, 0x75, 0x23, 0x8f, 0xc1, 0x13, 0x57,
	0xac, 0x66, 0xae, 0x39, 0xd3, 0x55, 0xf0, 0xc4, 0xe5, 0x87, 0x33, 0xd7, 0xbc, 0xe9, 0x2a, 0x38,
	0xdb, 0x83, 0xf5, 0x40, 0xf5, 0x10, 0x87, 0xfb, 0x23, 0x89, 0x78, 0x18, 0x28, 0x7f, 0xe2, 0x05,
	0x53, 0x94, 0x7c, 0xa1, 0x45, 0x3a, 0x8d, 0xac, 0xe0, 0x61, 0x0b, 0xdb, 0x84, 0xf9, 0x38, 0x59,
	0xec, 0x21, 0x6f, 0xb4, 0x48, 0xa7, 0x96, 0x99, 0x33, 0x96, 0xa6, 0x8c, 0x86, 0x9e, 0xc6, 0x0f,
	0x97, 0x11, 0xf2, 0xc5, 0x52, 0xca, 0x19, 0x4f, 0x7a, 0x7c, 0xc1, 0xd3, 0x57, 0x78, 0xc9, 0xc1,
	0xd8, 0x48, 0xc6, 0xd8, 0x2e, 0xd0, 0xf1, 0xf9, 0xdb, 0x48, 0x07, 0xa2, 0x78, 0xc9, 0x92, 0xd1,
	0xe9, 0x1f, 0x95, 0x3d, 0x87, 0xe6, 0xd8, 0x53, 0x83, 0xfe, 0xbd, 0xa2, 0x65, 0xe3, 0x35, 0x0f,
	0x19, 0xee, 0x26, 0x1d, 0xc5, 0x3a, 0x96, 0x38, 0x2b, 0x5a, 0x29, 0x4f, 0x2a, 0xab, 0xed, 0x1d,
	0x58, 0x70, 0xf1, 0x73, 0x8c, 0x4a, 0xb3, 0x36, 0xd4, 0x7c, 0x5b, 0x71, 0xd2, 0xaa, 0x76, 0x96,
	0x6c, 0xda, 0x35, 0x6f, 0xd0, 0xb1, 0xfb, 0x6e, 0x22, 0xb6, 0xbf, 0x11, 0x68, 0xb8, 0xa8, 0x22,
	0x11, 0x2a, 0x64, 0x16, 0x2c, 0x48, 0xd4, 0xe9, 0x62, 0x92, 0xa2, 0xb9, 0xbd, 0xfa, 0xce, 0xb3,
	0xdd, 0x5d, 0x37, 0x87, 0xc9, 0x56, 0x24, 0xea, 0x37, 0x6a, 0x54, 0x3a, 0xa5, 0x8c, 0x25, 0xd5,
	0x28, 0xa5, 0x23, 0x86, 0x98, 0x9e, 0x51, 0x1e, 0x31, 0x87, 0x49, 0x1c, 0x65, 0xfb, 0xe9, 0xf9,
	0xdc, 0x8f, 0xd3, 0xb7, 0x1d, 0x37, 0x11, 0xb7, 0x7b, 0x00, 0x83, 0xe2, 0x2f, 0x34, 0xe1, 0xbf,
	0xe2, 0xeb, 0xa4, 0x27, 0x42, 0xa4, 0x15, 0xb6, 0x0e, 0xab, 0x06, 0xdc, 0x1f, 0x5e, 0x04, 0x3e,
	0x52, 0xc2, 0xd6, 0x80, 0x1a, 0xf8, 0x48, 0x48, 0x1f, 0x69, 0x75, 0xfb, 0x27, 0x81, 0x95, 0x7c,
	0xca, 0x51, 0x80, 0x93, 0x21, 0x7b, 0x04, 0xcd, 0x12, 0x38, 0x39, 0xf0, 0x54, 0xe0, 0x53, 0x92,
	0xf6, 0x2d, 0x09, 0xfb, 0xef, 0x8e, 0x69, 0x95, 0x6d, 0xc0, 0xff, 0x65, 0x9c, 0x6f, 0x9a, 0xd6,
	0xd9, 0x26, 0xf0, 0xb2, 0x56, 0x5c, 0x21, 0x6d, 0x30, 0x0e, 0x6b, 0x65, 0xf5, 0x2e, 0x1f, 0xa5,
	0xec, 0xf1, 0x7d, 0xe5, 0x63, 0x7a, 0x57, 0xf4, 0x2b, 0x3d, 0x78, 0x71, 0x75, 0x63, 0x91, 0xeb,
	0x1b, 0x8b, 0xfc, 0xb9, 0xb1, 0xc8, 0xf7, 0x5b, 0xab, 0x72, 0x7d, 0x6b, 0x55, 0x7e, 0xdd, 0x5a,
	0x15, 0x68, 0xfa, 0x62, 0xda, 0x3d, 0x8b, 0x75, 0xdc, 0x15, 0x11, 0x86, 0x5e, 0x14, 0x74, 0xa3,
	0xd3, 0x4f, 0x34, 0x3a, 0x1d, 0x89, 0xa7, 0xc6, 0x2a, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x62,
	0xd3, 0x8c, 0x69, 0x6b, 0x04, 0x00, 0x00,
}

func (m *C2S) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGetUserInfo(dAtA, i, uint64(m.Flag))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}

func (m *S2C) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGetUserInfo(dAtA, i, uint64(m.HkFutureQotRight))
	i--
	dAtA[i] = 0x68
	i--
	if m.HasUSOptionQotRight {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x60
	i = encodeVarintGetUserInfo(dAtA, i, uint64(m.HkOptionQotRight))
	i--
	dAtA[i] = 0x58
	i -= len(m.WebKey)
	copy(dAtA[i:], m.WebKey)
	i = encodeVarintGetUserInfo(dAtA, i, uint64(len(m.WebKey)))
	i--
	dAtA[i] = 0x52
	i = encodeVarintGetUserInfo(dAtA, i, uint64(m.UpdateType))
	i--
	dAtA[i] = 0x48
	i = encodeVarintGetUserInfo(dAtA, i, uint64(m.UserID))
	i--
	dAtA[i] = 0x40
	i--
	if m.IsNeedAgreeDisclaimer {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x38
	i = encodeVarintGetUserInfo(dAtA, i, uint64(m.CnQotRight))
	i--
	dAtA[i] = 0x30
	i = encodeVarintGetUserInfo(dAtA, i, uint64(m.UsQotRight))
	i--
	dAtA[i] = 0x28
	i = encodeVarintGetUserInfo(dAtA, i, uint64(m.HkQotRight))
	i--
	dAtA[i] = 0x20
	i -= len(m.ApiLevel)
	copy(dAtA[i:], m.ApiLevel)
	i = encodeVarintGetUserInfo(dAtA, i, uint64(len(m.ApiLevel)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.AvatarUrl)
	copy(dAtA[i:], m.AvatarUrl)
	i = encodeVarintGetUserInfo(dAtA, i, uint64(len(m.AvatarUrl)))
	i--
	dAtA[i] = 0x12
	i -= len(m.NickName)
	copy(dAtA[i:], m.NickName)
	i = encodeVarintGetUserInfo(dAtA, i, uint64(len(m.NickName)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.C2S == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("c2s")
	} else {
		{
			size, err := m.C2S.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGetUserInfo(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.S2C != nil {
		{
			size, err := m.S2C.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGetUserInfo(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	i = encodeVarintGetUserInfo(dAtA, i, uint64(m.ErrCode))
	i--
	dAtA[i] = 0x18
	i -= len(m.RetMsg)
	copy(dAtA[i:], m.RetMsg)
	i = encodeVarintGetUserInfo(dAtA, i, uint64(len(m.RetMsg)))
	i--
	dAtA[i] = 0x12
	if m.RetType == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("retType")
	} else {
		i = encodeVarintGetUserInfo(dAtA, i, uint64(*m.RetType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGetUserInfo(dAtA []byte, offset int, v uint64) int {
	offset -= sovGetUserInfo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *C2S) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGetUserInfo(uint64(m.Flag))
	return n
}

func (m *S2C) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NickName)
	n += 1 + l + sovGetUserInfo(uint64(l))
	l = len(m.AvatarUrl)
	n += 1 + l + sovGetUserInfo(uint64(l))
	l = len(m.ApiLevel)
	n += 1 + l + sovGetUserInfo(uint64(l))
	n += 1 + sovGetUserInfo(uint64(m.HkQotRight))
	n += 1 + sovGetUserInfo(uint64(m.UsQotRight))
	n += 1 + sovGetUserInfo(uint64(m.CnQotRight))
	n += 2
	n += 1 + sovGetUserInfo(uint64(m.UserID))
	n += 1 + sovGetUserInfo(uint64(m.UpdateType))
	l = len(m.WebKey)
	n += 1 + l + sovGetUserInfo(uint64(l))
	n += 1 + sovGetUserInfo(uint64(m.HkOptionQotRight))
	n += 2
	n += 1 + sovGetUserInfo(uint64(m.HkFutureQotRight))
	return n
}

func (m *Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.C2S != nil {
		l = m.C2S.Size()
		n += 1 + l + sovGetUserInfo(uint64(l))
	}
	return n
}

func (m *Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetType != nil {
		n += 1 + sovGetUserInfo(uint64(*m.RetType))
	}
	l = len(m.RetMsg)
	n += 1 + l + sovGetUserInfo(uint64(l))
	n += 1 + sovGetUserInfo(uint64(m.ErrCode))
	if m.S2C != nil {
		l = m.S2C.Size()
		n += 1 + l + sovGetUserInfo(uint64(l))
	}
	return n
}

func sovGetUserInfo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGetUserInfo(x uint64) (n int) {
	return sovGetUserInfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *C2S) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGetUserInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			m.Flag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetUserInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flag |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGetUserInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGetUserInfo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGetUserInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGetUserInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetUserInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGetUserInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGetUserInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetUserInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGetUserInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGetUserInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvatarUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiLevel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetUserInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGetUserInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGetUserInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiLevel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HkQotRight", wireType)
			}
			m.HkQotRight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetUserInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HkQotRight |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsQotRight", wireType)
			}
			m.UsQotRight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetUserInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsQotRight |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CnQotRight", wireType)
			}
			m.CnQotRight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetUserInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CnQotRight |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsNeedAgreeDisclaimer", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetUserInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsNeedAgreeDisclaimer = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetUserInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateType", wireType)
			}
			m.UpdateType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetUserInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetUserInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGetUserInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGetUserInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WebKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HkOptionQotRight", wireType)
			}
			m.HkOptionQotRight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetUserInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HkOptionQotRight |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasUSOptionQotRight", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetUserInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasUSOptionQotRight = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HkFutureQotRight", wireType)
			}
			m.HkFutureQotRight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetUserInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HkFutureQotRight |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGetUserInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGetUserInfo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGetUserInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Request) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGetUserInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field C2S", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetUserInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGetUserInfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGetUserInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.C2S == nil {
				m.C2S = &C2S{}
			}
			if err := m.C2S.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipGetUserInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGetUserInfo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGetUserInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("c2s")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGetUserInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetUserInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetType = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetUserInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGetUserInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGetUserInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RetMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			m.ErrCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetUserInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S2C", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetUserInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGetUserInfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGetUserInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.S2C == nil {
				m.S2C = &S2C{}
			}
			if err := m.S2C.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGetUserInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGetUserInfo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGetUserInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("retType")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGetUserInfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGetUserInfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGetUserInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGetUserInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGetUserInfo
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthGetUserInfo
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGetUserInfo
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGetUserInfo(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthGetUserInfo
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGetUserInfo = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGetUserInfo   = fmt.Errorf("proto: integer overflow")
)
