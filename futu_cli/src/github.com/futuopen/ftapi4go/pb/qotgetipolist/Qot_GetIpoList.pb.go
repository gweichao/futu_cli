// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: Qot_GetIpoList.proto

package qotgetipolist

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/futuopen/ftapi4go/pb/common"
	qotcommon "github.com/futuopen/ftapi4go/pb/qotcommon"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Ipo基本数据
type BasicIpoData struct {
	Security      *qotcommon.Security `protobuf:"bytes,1,req,name=security" json:"security,omitempty"`
	Name          string              `protobuf:"bytes,2,req,name=name" json:"name"`
	ListTime      string              `protobuf:"bytes,3,opt,name=listTime" json:"listTime"`
	ListTimestamp float64             `protobuf:"fixed64,4,opt,name=listTimestamp" json:"listTimestamp"`
}

func (m *BasicIpoData) Reset()         { *m = BasicIpoData{} }
func (m *BasicIpoData) String() string { return proto.CompactTextString(m) }
func (*BasicIpoData) ProtoMessage()    {}
func (*BasicIpoData) Descriptor() ([]byte, []int) {
	return fileDescriptor_99c0dbcd3ea17a1b, []int{0}
}
func (m *BasicIpoData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BasicIpoData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BasicIpoData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BasicIpoData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BasicIpoData.Merge(m, src)
}
func (m *BasicIpoData) XXX_Size() int {
	return m.Size()
}
func (m *BasicIpoData) XXX_DiscardUnknown() {
	xxx_messageInfo_BasicIpoData.DiscardUnknown(m)
}

var xxx_messageInfo_BasicIpoData proto.InternalMessageInfo

func (m *BasicIpoData) GetSecurity() *qotcommon.Security {
	if m != nil {
		return m.Security
	}
	return nil
}

func (m *BasicIpoData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BasicIpoData) GetListTime() string {
	if m != nil {
		return m.ListTime
	}
	return ""
}

func (m *BasicIpoData) GetListTimestamp() float64 {
	if m != nil {
		return m.ListTimestamp
	}
	return 0
}

// A股Ipo列表额外数据
type CNIpoExData struct {
	ApplyCode              string            `protobuf:"bytes,1,req,name=applyCode" json:"applyCode"`
	IssueSize              int64             `protobuf:"varint,2,req,name=issueSize" json:"issueSize"`
	OnlineIssueSize        int64             `protobuf:"varint,3,req,name=onlineIssueSize" json:"onlineIssueSize"`
	ApplyUpperLimit        int64             `protobuf:"varint,4,req,name=applyUpperLimit" json:"applyUpperLimit"`
	ApplyLimitMarketValue  int64             `protobuf:"varint,5,req,name=applyLimitMarketValue" json:"applyLimitMarketValue"`
	IsEstimateIpoPrice     bool              `protobuf:"varint,6,req,name=isEstimateIpoPrice" json:"isEstimateIpoPrice"`
	IpoPrice               float64           `protobuf:"fixed64,7,req,name=ipoPrice" json:"ipoPrice"`
	IndustryPeRate         float64           `protobuf:"fixed64,8,req,name=industryPeRate" json:"industryPeRate"`
	IsEstimateWinningRatio bool              `protobuf:"varint,9,req,name=isEstimateWinningRatio" json:"isEstimateWinningRatio"`
	WinningRatio           float64           `protobuf:"fixed64,10,req,name=winningRatio" json:"winningRatio"`
	IssuePeRate            float64           `protobuf:"fixed64,11,req,name=issuePeRate" json:"issuePeRate"`
	ApplyTime              string            `protobuf:"bytes,12,opt,name=applyTime" json:"applyTime"`
	ApplyTimestamp         float64           `protobuf:"fixed64,13,opt,name=applyTimestamp" json:"applyTimestamp"`
	WinningTime            string            `protobuf:"bytes,14,opt,name=winningTime" json:"winningTime"`
	WinningTimestamp       float64           `protobuf:"fixed64,15,opt,name=winningTimestamp" json:"winningTimestamp"`
	IsHasWon               bool              `protobuf:"varint,16,req,name=isHasWon" json:"isHasWon"`
	WinningNumData         []*WinningNumData `protobuf:"bytes,17,rep,name=winningNumData" json:"winningNumData,omitempty"`
}

func (m *CNIpoExData) Reset()         { *m = CNIpoExData{} }
func (m *CNIpoExData) String() string { return proto.CompactTextString(m) }
func (*CNIpoExData) ProtoMessage()    {}
func (*CNIpoExData) Descriptor() ([]byte, []int) {
	return fileDescriptor_99c0dbcd3ea17a1b, []int{1}
}
func (m *CNIpoExData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CNIpoExData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CNIpoExData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CNIpoExData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CNIpoExData.Merge(m, src)
}
func (m *CNIpoExData) XXX_Size() int {
	return m.Size()
}
func (m *CNIpoExData) XXX_DiscardUnknown() {
	xxx_messageInfo_CNIpoExData.DiscardUnknown(m)
}

var xxx_messageInfo_CNIpoExData proto.InternalMessageInfo

func (m *CNIpoExData) GetApplyCode() string {
	if m != nil {
		return m.ApplyCode
	}
	return ""
}

func (m *CNIpoExData) GetIssueSize() int64 {
	if m != nil {
		return m.IssueSize
	}
	return 0
}

func (m *CNIpoExData) GetOnlineIssueSize() int64 {
	if m != nil {
		return m.OnlineIssueSize
	}
	return 0
}

func (m *CNIpoExData) GetApplyUpperLimit() int64 {
	if m != nil {
		return m.ApplyUpperLimit
	}
	return 0
}

func (m *CNIpoExData) GetApplyLimitMarketValue() int64 {
	if m != nil {
		return m.ApplyLimitMarketValue
	}
	return 0
}

func (m *CNIpoExData) GetIsEstimateIpoPrice() bool {
	if m != nil {
		return m.IsEstimateIpoPrice
	}
	return false
}

func (m *CNIpoExData) GetIpoPrice() float64 {
	if m != nil {
		return m.IpoPrice
	}
	return 0
}

func (m *CNIpoExData) GetIndustryPeRate() float64 {
	if m != nil {
		return m.IndustryPeRate
	}
	return 0
}

func (m *CNIpoExData) GetIsEstimateWinningRatio() bool {
	if m != nil {
		return m.IsEstimateWinningRatio
	}
	return false
}

func (m *CNIpoExData) GetWinningRatio() float64 {
	if m != nil {
		return m.WinningRatio
	}
	return 0
}

func (m *CNIpoExData) GetIssuePeRate() float64 {
	if m != nil {
		return m.IssuePeRate
	}
	return 0
}

func (m *CNIpoExData) GetApplyTime() string {
	if m != nil {
		return m.ApplyTime
	}
	return ""
}

func (m *CNIpoExData) GetApplyTimestamp() float64 {
	if m != nil {
		return m.ApplyTimestamp
	}
	return 0
}

func (m *CNIpoExData) GetWinningTime() string {
	if m != nil {
		return m.WinningTime
	}
	return ""
}

func (m *CNIpoExData) GetWinningTimestamp() float64 {
	if m != nil {
		return m.WinningTimestamp
	}
	return 0
}

func (m *CNIpoExData) GetIsHasWon() bool {
	if m != nil {
		return m.IsHasWon
	}
	return false
}

func (m *CNIpoExData) GetWinningNumData() []*WinningNumData {
	if m != nil {
		return m.WinningNumData
	}
	return nil
}

// 中签号数据
type WinningNumData struct {
	WinningName string `protobuf:"bytes,1,req,name=winningName" json:"winningName"`
	WinningInfo string `protobuf:"bytes,2,req,name=winningInfo" json:"winningInfo"`
}

func (m *WinningNumData) Reset()         { *m = WinningNumData{} }
func (m *WinningNumData) String() string { return proto.CompactTextString(m) }
func (*WinningNumData) ProtoMessage()    {}
func (*WinningNumData) Descriptor() ([]byte, []int) {
	return fileDescriptor_99c0dbcd3ea17a1b, []int{2}
}
func (m *WinningNumData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WinningNumData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WinningNumData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WinningNumData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WinningNumData.Merge(m, src)
}
func (m *WinningNumData) XXX_Size() int {
	return m.Size()
}
func (m *WinningNumData) XXX_DiscardUnknown() {
	xxx_messageInfo_WinningNumData.DiscardUnknown(m)
}

var xxx_messageInfo_WinningNumData proto.InternalMessageInfo

func (m *WinningNumData) GetWinningName() string {
	if m != nil {
		return m.WinningName
	}
	return ""
}

func (m *WinningNumData) GetWinningInfo() string {
	if m != nil {
		return m.WinningInfo
	}
	return ""
}

// 港股Ipo列表额外数据
type HKIpoExData struct {
	IpoPriceMin       float64 `protobuf:"fixed64,1,req,name=ipoPriceMin" json:"ipoPriceMin"`
	IpoPriceMax       float64 `protobuf:"fixed64,2,req,name=ipoPriceMax" json:"ipoPriceMax"`
	ListPrice         float64 `protobuf:"fixed64,3,req,name=listPrice" json:"listPrice"`
	LotSize           int32   `protobuf:"varint,4,req,name=lotSize" json:"lotSize"`
	EntrancePrice     float64 `protobuf:"fixed64,5,req,name=entrancePrice" json:"entrancePrice"`
	IsSubscribeStatus bool    `protobuf:"varint,6,req,name=isSubscribeStatus" json:"isSubscribeStatus"`
	ApplyEndTime      string  `protobuf:"bytes,7,opt,name=applyEndTime" json:"applyEndTime"`
	ApplyEndTimestamp float64 `protobuf:"fixed64,8,opt,name=applyEndTimestamp" json:"applyEndTimestamp"`
}

func (m *HKIpoExData) Reset()         { *m = HKIpoExData{} }
func (m *HKIpoExData) String() string { return proto.CompactTextString(m) }
func (*HKIpoExData) ProtoMessage()    {}
func (*HKIpoExData) Descriptor() ([]byte, []int) {
	return fileDescriptor_99c0dbcd3ea17a1b, []int{3}
}
func (m *HKIpoExData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HKIpoExData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HKIpoExData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HKIpoExData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HKIpoExData.Merge(m, src)
}
func (m *HKIpoExData) XXX_Size() int {
	return m.Size()
}
func (m *HKIpoExData) XXX_DiscardUnknown() {
	xxx_messageInfo_HKIpoExData.DiscardUnknown(m)
}

var xxx_messageInfo_HKIpoExData proto.InternalMessageInfo

func (m *HKIpoExData) GetIpoPriceMin() float64 {
	if m != nil {
		return m.IpoPriceMin
	}
	return 0
}

func (m *HKIpoExData) GetIpoPriceMax() float64 {
	if m != nil {
		return m.IpoPriceMax
	}
	return 0
}

func (m *HKIpoExData) GetListPrice() float64 {
	if m != nil {
		return m.ListPrice
	}
	return 0
}

func (m *HKIpoExData) GetLotSize() int32 {
	if m != nil {
		return m.LotSize
	}
	return 0
}

func (m *HKIpoExData) GetEntrancePrice() float64 {
	if m != nil {
		return m.EntrancePrice
	}
	return 0
}

func (m *HKIpoExData) GetIsSubscribeStatus() bool {
	if m != nil {
		return m.IsSubscribeStatus
	}
	return false
}

func (m *HKIpoExData) GetApplyEndTime() string {
	if m != nil {
		return m.ApplyEndTime
	}
	return ""
}

func (m *HKIpoExData) GetApplyEndTimestamp() float64 {
	if m != nil {
		return m.ApplyEndTimestamp
	}
	return 0
}

// 美股Ipo列表额外数据
type USIpoExData struct {
	IpoPriceMin float64 `protobuf:"fixed64,1,req,name=ipoPriceMin" json:"ipoPriceMin"`
	IpoPriceMax float64 `protobuf:"fixed64,2,req,name=ipoPriceMax" json:"ipoPriceMax"`
	IssueSize   int64   `protobuf:"varint,3,req,name=issueSize" json:"issueSize"`
}

func (m *USIpoExData) Reset()         { *m = USIpoExData{} }
func (m *USIpoExData) String() string { return proto.CompactTextString(m) }
func (*USIpoExData) ProtoMessage()    {}
func (*USIpoExData) Descriptor() ([]byte, []int) {
	return fileDescriptor_99c0dbcd3ea17a1b, []int{4}
}
func (m *USIpoExData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *USIpoExData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_USIpoExData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *USIpoExData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_USIpoExData.Merge(m, src)
}
func (m *USIpoExData) XXX_Size() int {
	return m.Size()
}
func (m *USIpoExData) XXX_DiscardUnknown() {
	xxx_messageInfo_USIpoExData.DiscardUnknown(m)
}

var xxx_messageInfo_USIpoExData proto.InternalMessageInfo

func (m *USIpoExData) GetIpoPriceMin() float64 {
	if m != nil {
		return m.IpoPriceMin
	}
	return 0
}

func (m *USIpoExData) GetIpoPriceMax() float64 {
	if m != nil {
		return m.IpoPriceMax
	}
	return 0
}

func (m *USIpoExData) GetIssueSize() int64 {
	if m != nil {
		return m.IssueSize
	}
	return 0
}

// 新股Ipo数据
type IpoData struct {
	Basic    *BasicIpoData `protobuf:"bytes,1,req,name=basic" json:"basic,omitempty"`
	CnExData *CNIpoExData  `protobuf:"bytes,2,opt,name=cnExData" json:"cnExData,omitempty"`
	HkExData *HKIpoExData  `protobuf:"bytes,3,opt,name=hkExData" json:"hkExData,omitempty"`
	UsExData *USIpoExData  `protobuf:"bytes,4,opt,name=usExData" json:"usExData,omitempty"`
}

func (m *IpoData) Reset()         { *m = IpoData{} }
func (m *IpoData) String() string { return proto.CompactTextString(m) }
func (*IpoData) ProtoMessage()    {}
func (*IpoData) Descriptor() ([]byte, []int) {
	return fileDescriptor_99c0dbcd3ea17a1b, []int{5}
}
func (m *IpoData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IpoData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IpoData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IpoData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IpoData.Merge(m, src)
}
func (m *IpoData) XXX_Size() int {
	return m.Size()
}
func (m *IpoData) XXX_DiscardUnknown() {
	xxx_messageInfo_IpoData.DiscardUnknown(m)
}

var xxx_messageInfo_IpoData proto.InternalMessageInfo

func (m *IpoData) GetBasic() *BasicIpoData {
	if m != nil {
		return m.Basic
	}
	return nil
}

func (m *IpoData) GetCnExData() *CNIpoExData {
	if m != nil {
		return m.CnExData
	}
	return nil
}

func (m *IpoData) GetHkExData() *HKIpoExData {
	if m != nil {
		return m.HkExData
	}
	return nil
}

func (m *IpoData) GetUsExData() *USIpoExData {
	if m != nil {
		return m.UsExData
	}
	return nil
}

type C2S struct {
	Market int32 `protobuf:"varint,1,req,name=market" json:"market"`
}

func (m *C2S) Reset()         { *m = C2S{} }
func (m *C2S) String() string { return proto.CompactTextString(m) }
func (*C2S) ProtoMessage()    {}
func (*C2S) Descriptor() ([]byte, []int) {
	return fileDescriptor_99c0dbcd3ea17a1b, []int{6}
}
func (m *C2S) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S.Merge(m, src)
}
func (m *C2S) XXX_Size() int {
	return m.Size()
}
func (m *C2S) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S.DiscardUnknown(m)
}

var xxx_messageInfo_C2S proto.InternalMessageInfo

func (m *C2S) GetMarket() int32 {
	if m != nil {
		return m.Market
	}
	return 0
}

type S2C struct {
	IpoList []*IpoData `protobuf:"bytes,1,rep,name=ipoList" json:"ipoList,omitempty"`
}

func (m *S2C) Reset()         { *m = S2C{} }
func (m *S2C) String() string { return proto.CompactTextString(m) }
func (*S2C) ProtoMessage()    {}
func (*S2C) Descriptor() ([]byte, []int) {
	return fileDescriptor_99c0dbcd3ea17a1b, []int{7}
}
func (m *S2C) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C.Merge(m, src)
}
func (m *S2C) XXX_Size() int {
	return m.Size()
}
func (m *S2C) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C.DiscardUnknown(m)
}

var xxx_messageInfo_S2C proto.InternalMessageInfo

func (m *S2C) GetIpoList() []*IpoData {
	if m != nil {
		return m.IpoList
	}
	return nil
}

type Request struct {
	C2S *C2S `protobuf:"bytes,1,req,name=c2s" json:"c2s,omitempty"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_99c0dbcd3ea17a1b, []int{8}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return m.Size()
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetC2S() *C2S {
	if m != nil {
		return m.C2S
	}
	return nil
}

type Response struct {
	RetType *int32 `protobuf:"varint,1,req,name=retType,def=-400" json:"retType,omitempty"`
	RetMsg  string `protobuf:"bytes,2,opt,name=retMsg" json:"retMsg"`
	ErrCode int32  `protobuf:"varint,3,opt,name=errCode" json:"errCode"`
	S2C     *S2C   `protobuf:"bytes,4,opt,name=s2c" json:"s2c,omitempty"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_99c0dbcd3ea17a1b, []int{9}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return m.Size()
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

const Default_Response_RetType int32 = -400

func (m *Response) GetRetType() int32 {
	if m != nil && m.RetType != nil {
		return *m.RetType
	}
	return Default_Response_RetType
}

func (m *Response) GetRetMsg() string {
	if m != nil {
		return m.RetMsg
	}
	return ""
}

func (m *Response) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *Response) GetS2C() *S2C {
	if m != nil {
		return m.S2C
	}
	return nil
}

func init() {
	proto.RegisterType((*BasicIpoData)(nil), "Qot_GetIpoList.BasicIpoData")
	proto.RegisterType((*CNIpoExData)(nil), "Qot_GetIpoList.CNIpoExData")
	proto.RegisterType((*WinningNumData)(nil), "Qot_GetIpoList.WinningNumData")
	proto.RegisterType((*HKIpoExData)(nil), "Qot_GetIpoList.HKIpoExData")
	proto.RegisterType((*USIpoExData)(nil), "Qot_GetIpoList.USIpoExData")
	proto.RegisterType((*IpoData)(nil), "Qot_GetIpoList.IpoData")
	proto.RegisterType((*C2S)(nil), "Qot_GetIpoList.C2S")
	proto.RegisterType((*S2C)(nil), "Qot_GetIpoList.S2C")
	proto.RegisterType((*Request)(nil), "Qot_GetIpoList.Request")
	proto.RegisterType((*Response)(nil), "Qot_GetIpoList.Response")
}

func init() { proto.RegisterFile("Qot_GetIpoList.proto", fileDescriptor_99c0dbcd3ea17a1b) }

var fileDescriptor_99c0dbcd3ea17a1b = []byte{
	// 910 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xcf, 0x7a, 0xed, 0xd8, 0x79, 0x4e, 0xdd, 0x74, 0x5a, 0x60, 0x55, 0x2a, 0xb3, 0x5a, 0x04,
	0xb2, 0x10, 0x75, 0xcc, 0x2a, 0x12, 0xa8, 0xe2, 0x14, 0x13, 0xa8, 0x45, 0x13, 0x95, 0xdd, 0x96,
	0x48, 0x08, 0x09, 0xc6, 0x9b, 0x89, 0x3b, 0xaa, 0x77, 0x67, 0xba, 0x33, 0x2b, 0x12, 0x6e, 0x7c,
	0x02, 0xf8, 0x02, 0xdc, 0xf9, 0x28, 0x3d, 0xe6, 0xc8, 0x09, 0x50, 0x72, 0xe1, 0x63, 0xa0, 0x99,
	0xfd, 0xe3, 0xd9, 0xb5, 0x39, 0xf6, 0xb6, 0xf3, 0xfb, 0xfd, 0xde, 0x9b, 0xb7, 0x6f, 0x7e, 0x6f,
	0x06, 0xee, 0x7d, 0xc3, 0xe4, 0x0f, 0x5f, 0x11, 0x39, 0xe3, 0xec, 0x09, 0x15, 0x72, 0xcc, 0x53,
	0x26, 0x19, 0x1a, 0xd4, 0xd1, 0xfb, 0xbb, 0x53, 0x16, 0xc7, 0x2c, 0xc9, 0xd9, 0xfb, 0x7b, 0x8a,
	0x35, 0x11, 0xef, 0x0f, 0x0b, 0x76, 0x0f, 0xb1, 0xa0, 0xd1, 0x8c, 0xb3, 0x2f, 0xb0, 0xc4, 0x68,
	0x02, 0x3d, 0x41, 0xa2, 0x2c, 0xa5, 0xf2, 0xd2, 0xb1, 0xdc, 0xd6, 0xa8, 0xef, 0xdf, 0x1b, 0x1b,
	0x51, 0x61, 0xc1, 0x05, 0x95, 0x0a, 0x39, 0xd0, 0x4e, 0x70, 0x4c, 0x9c, 0x96, 0xdb, 0x1a, 0xed,
	0x1c, 0xb6, 0x5f, 0xff, 0xf5, 0xde, 0x56, 0xa0, 0x11, 0xe4, 0x42, 0x6f, 0x49, 0x85, 0x7c, 0x46,
	0x63, 0xe2, 0xd8, 0xae, 0x55, 0xb1, 0x15, 0x8a, 0x3e, 0x82, 0x5b, 0xe5, 0xb7, 0x90, 0x38, 0xe6,
	0x4e, 0xdb, 0xb5, 0x46, 0x56, 0x21, 0xab, 0x53, 0xde, 0xef, 0xdb, 0xd0, 0x9f, 0x9e, 0xcc, 0x38,
	0x3b, 0xba, 0xd0, 0x95, 0x7a, 0xb0, 0x83, 0x39, 0x5f, 0x5e, 0x4e, 0xd9, 0x19, 0xd1, 0xa5, 0x96,
	0xe9, 0x57, 0xb0, 0xd2, 0x50, 0x21, 0x32, 0x12, 0xd2, 0x9f, 0xf3, 0x02, 0xed, 0x52, 0x53, 0xc1,
	0x68, 0x0c, 0xb7, 0x59, 0xb2, 0xa4, 0x09, 0x99, 0x55, 0x4a, 0xdb, 0x50, 0x36, 0x49, 0xa5, 0xd7,
	0x1b, 0x3c, 0xe7, 0x9c, 0xa4, 0x4f, 0x68, 0x4c, 0xa5, 0xd3, 0x36, 0xf5, 0x0d, 0x12, 0x3d, 0x82,
	0xb7, 0x34, 0xa4, 0x57, 0xc7, 0x38, 0x7d, 0x49, 0xe4, 0xb7, 0x78, 0x99, 0x11, 0xa7, 0x63, 0x44,
	0x6d, 0x96, 0xa0, 0x03, 0x40, 0x54, 0x1c, 0x09, 0x49, 0x63, 0x2c, 0xc9, 0x8c, 0xb3, 0xa7, 0x29,
	0x8d, 0x88, 0xb3, 0xed, 0xb6, 0x46, 0xbd, 0x22, 0x70, 0x03, 0xaf, 0xfa, 0x4e, 0x4b, 0x6d, 0xd7,
	0x6d, 0x55, 0x0d, 0xad, 0x50, 0xf4, 0x31, 0x0c, 0x68, 0x72, 0x96, 0x09, 0x99, 0x5e, 0x3e, 0x25,
	0x01, 0x96, 0xc4, 0xe9, 0x19, 0xba, 0x06, 0x87, 0x3e, 0x87, 0xb7, 0x57, 0xbb, 0x9c, 0xd2, 0x24,
	0xa1, 0xc9, 0x22, 0xc0, 0x92, 0x32, 0x67, 0xc7, 0xa8, 0xe4, 0x7f, 0x34, 0x68, 0x04, 0xbb, 0x3f,
	0x99, 0x31, 0x60, 0xec, 0x54, 0x63, 0xd0, 0x87, 0xd0, 0xd7, 0xc7, 0x52, 0x94, 0xd4, 0x37, 0x84,
	0x26, 0x51, 0x9d, 0xbc, 0x36, 0xd6, 0xae, 0x61, 0xac, 0x15, 0xac, 0xfe, 0xb0, 0x5a, 0xe4, 0xd6,
	0xba, 0x65, 0x58, 0xab, 0xc1, 0xa9, 0x9d, 0x8b, 0x4a, 0x74, 0xce, 0x81, 0x91, 0xd3, 0x24, 0xd0,
	0x04, 0xf6, 0x8c, 0x65, 0x9e, 0xf7, 0xb6, 0x91, 0x77, 0x8d, 0xd5, 0x67, 0x21, 0x1e, 0x63, 0x71,
	0xca, 0x12, 0x67, 0xcf, 0xe8, 0x56, 0x85, 0xa2, 0x2f, 0x61, 0x50, 0x44, 0x9d, 0x64, 0xb1, 0x72,
	0xb6, 0x73, 0xc7, 0xb5, 0x47, 0x7d, 0x7f, 0x38, 0x6e, 0x4c, 0xf8, 0x69, 0x4d, 0x15, 0x34, 0xa2,
	0xbc, 0x1f, 0x61, 0x50, 0x57, 0x18, 0x7f, 0x75, 0xa2, 0x06, 0xd4, 0x9c, 0x11, 0x93, 0x30, 0x74,
	0xb3, 0xe4, 0x9c, 0xd5, 0x06, 0xd9, 0x24, 0xbc, 0xbf, 0x5b, 0xd0, 0x7f, 0xfc, 0xf5, 0x6a, 0x02,
	0xd5, 0x79, 0x15, 0x8e, 0x3a, 0xa6, 0x89, 0xce, 0xbf, 0x3a, 0xaf, 0x15, 0x51, 0xd3, 0xe1, 0x0b,
	0x9d, 0x7f, 0x5d, 0x87, 0x2f, 0xd4, 0xb9, 0xaa, 0x91, 0xcf, 0x8d, 0x6b, 0x1b, 0xaa, 0x15, 0x8c,
	0x86, 0xd0, 0x5d, 0x32, 0xa9, 0xa7, 0x54, 0x4d, 0x5d, 0xa7, 0x50, 0x94, 0xa0, 0xba, 0x51, 0x48,
	0x22, 0x53, 0x9c, 0x44, 0x24, 0xcf, 0xd3, 0x31, 0xf2, 0xd4, 0x29, 0xe4, 0xc3, 0x1d, 0x2a, 0xc2,
	0x6c, 0x2e, 0xa2, 0x94, 0xce, 0x49, 0x28, 0xb1, 0xcc, 0x44, 0x6d, 0xb8, 0xd6, 0x69, 0xe5, 0x66,
	0xed, 0x9d, 0xa3, 0xe4, 0x4c, 0x5b, 0xa5, 0x6b, 0x58, 0xa5, 0xc6, 0xa8, 0xec, 0xe6, 0x3a, 0x37,
	0x4b, 0xcf, 0x30, 0xcb, 0x3a, 0xed, 0xfd, 0x62, 0x41, 0xff, 0x79, 0xf8, 0x46, 0x3b, 0x4c, 0x37,
	0xde, 0x72, 0x2b, 0xd8, 0xfb, 0xd7, 0x82, 0x6e, 0xf9, 0x1a, 0xf8, 0xd0, 0x99, 0xab, 0xd7, 0xa1,
	0x78, 0x0a, 0x1e, 0x34, 0x2d, 0x69, 0x3e, 0x1d, 0x41, 0x2e, 0x45, 0x9f, 0x42, 0x2f, 0x4a, 0xf2,
	0xfa, 0x9d, 0x96, 0x6b, 0x8d, 0xfa, 0xfe, 0xbb, 0xcd, 0x30, 0xe3, 0x1a, 0x0f, 0x2a, 0xb1, 0x0a,
	0x7c, 0xf1, 0xb2, 0x08, 0xb4, 0x37, 0x07, 0x1a, 0xee, 0x0b, 0x2a, 0xb1, 0x0a, 0xcc, 0x44, 0x11,
	0xd8, 0xde, 0x1c, 0x68, 0x34, 0x35, 0xa8, 0xc4, 0xde, 0xfb, 0x60, 0x4f, 0xfd, 0x10, 0x3d, 0x80,
	0xed, 0x58, 0x5f, 0xba, 0xfa, 0x37, 0x4b, 0x4b, 0x15, 0x98, 0xf7, 0x19, 0xd8, 0xa1, 0x3f, 0x45,
	0x9f, 0x40, 0x97, 0xe6, 0xc9, 0x1c, 0x4b, 0xcf, 0xe7, 0x3b, 0xcd, 0x3d, 0xca, 0x3e, 0x94, 0x3a,
	0x6f, 0x02, 0xdd, 0x80, 0xbc, 0xca, 0x88, 0x90, 0xe8, 0x03, 0xb0, 0x23, 0x5f, 0x14, 0x6d, 0xbc,
	0xbb, 0xd6, 0x0f, 0x3f, 0x0c, 0x14, 0xef, 0xfd, 0x6a, 0x41, 0x2f, 0x20, 0x82, 0xb3, 0x44, 0x68,
	0xab, 0xa7, 0x44, 0x3e, 0xbb, 0xe4, 0xf9, 0xe8, 0x76, 0x1e, 0xb5, 0x1f, 0x1e, 0x4c, 0x26, 0x41,
	0x09, 0xaa, 0xb2, 0x53, 0x22, 0x8f, 0xc5, 0x42, 0xb7, 0xb9, 0x34, 0x61, 0x81, 0xa9, 0x68, 0x92,
	0xa6, 0xfa, 0x71, 0x54, 0xcd, 0xac, 0x06, 0xa5, 0x00, 0x55, 0x45, 0xc2, 0x8f, 0x8a, 0x7e, 0xad,
	0x55, 0x14, 0xfa, 0xd3, 0x40, 0xf1, 0x87, 0xdf, 0xbf, 0xbe, 0x1e, 0x5a, 0x57, 0xd7, 0x43, 0xeb,
	0x9f, 0xeb, 0xa1, 0xf5, 0xdb, 0xcd, 0x70, 0xeb, 0xea, 0x66, 0xb8, 0xf5, 0xe7, 0xcd, 0x70, 0x0b,
	0xee, 0x46, 0x2c, 0x1e, 0x9f, 0x67, 0x32, 0x1b, 0x33, 0x4e, 0x12, 0xcc, 0xe9, 0x98, 0xcf, 0xbf,
	0x7b, 0xb8, 0xa0, 0xf2, 0x45, 0x36, 0x1f, 0x47, 0x2c, 0xde, 0x57, 0x9c, 0xa2, 0xf6, 0xcf, 0x25,
	0xe6, 0xf4, 0x60, 0xc1, 0xf6, 0xf9, 0x7c, 0xff, 0x15, 0x93, 0x0b, 0x22, 0x29, 0x67, 0x6a, 0xa4,
	0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xff, 0xb4, 0xd1, 0x86, 0xc5, 0x08, 0x00, 0x00,
}

func (m *BasicIpoData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BasicIpoData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BasicIpoData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ListTimestamp))))
	i--
	dAtA[i] = 0x21
	i -= len(m.ListTime)
	copy(dAtA[i:], m.ListTime)
	i = encodeVarintQot_GetIpoList(dAtA, i, uint64(len(m.ListTime)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintQot_GetIpoList(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0x12
	if m.Security == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("security")
	} else {
		{
			size, err := m.Security.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQot_GetIpoList(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CNIpoExData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CNIpoExData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CNIpoExData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WinningNumData) > 0 {
		for iNdEx := len(m.WinningNumData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WinningNumData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQot_GetIpoList(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
	}
	i--
	if m.IsHasWon {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x80
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.WinningTimestamp))))
	i--
	dAtA[i] = 0x79
	i -= len(m.WinningTime)
	copy(dAtA[i:], m.WinningTime)
	i = encodeVarintQot_GetIpoList(dAtA, i, uint64(len(m.WinningTime)))
	i--
	dAtA[i] = 0x72
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ApplyTimestamp))))
	i--
	dAtA[i] = 0x69
	i -= len(m.ApplyTime)
	copy(dAtA[i:], m.ApplyTime)
	i = encodeVarintQot_GetIpoList(dAtA, i, uint64(len(m.ApplyTime)))
	i--
	dAtA[i] = 0x62
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.IssuePeRate))))
	i--
	dAtA[i] = 0x59
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.WinningRatio))))
	i--
	dAtA[i] = 0x51
	i--
	if m.IsEstimateWinningRatio {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x48
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.IndustryPeRate))))
	i--
	dAtA[i] = 0x41
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.IpoPrice))))
	i--
	dAtA[i] = 0x39
	i--
	if m.IsEstimateIpoPrice {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x30
	i = encodeVarintQot_GetIpoList(dAtA, i, uint64(m.ApplyLimitMarketValue))
	i--
	dAtA[i] = 0x28
	i = encodeVarintQot_GetIpoList(dAtA, i, uint64(m.ApplyUpperLimit))
	i--
	dAtA[i] = 0x20
	i = encodeVarintQot_GetIpoList(dAtA, i, uint64(m.OnlineIssueSize))
	i--
	dAtA[i] = 0x18
	i = encodeVarintQot_GetIpoList(dAtA, i, uint64(m.IssueSize))
	i--
	dAtA[i] = 0x10
	i -= len(m.ApplyCode)
	copy(dAtA[i:], m.ApplyCode)
	i = encodeVarintQot_GetIpoList(dAtA, i, uint64(len(m.ApplyCode)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *WinningNumData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WinningNumData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WinningNumData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.WinningInfo)
	copy(dAtA[i:], m.WinningInfo)
	i = encodeVarintQot_GetIpoList(dAtA, i, uint64(len(m.WinningInfo)))
	i--
	dAtA[i] = 0x12
	i -= len(m.WinningName)
	copy(dAtA[i:], m.WinningName)
	i = encodeVarintQot_GetIpoList(dAtA, i, uint64(len(m.WinningName)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *HKIpoExData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HKIpoExData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HKIpoExData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ApplyEndTimestamp))))
	i--
	dAtA[i] = 0x41
	i -= len(m.ApplyEndTime)
	copy(dAtA[i:], m.ApplyEndTime)
	i = encodeVarintQot_GetIpoList(dAtA, i, uint64(len(m.ApplyEndTime)))
	i--
	dAtA[i] = 0x3a
	i--
	if m.IsSubscribeStatus {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x30
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.EntrancePrice))))
	i--
	dAtA[i] = 0x29
	i = encodeVarintQot_GetIpoList(dAtA, i, uint64(m.LotSize))
	i--
	dAtA[i] = 0x20
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ListPrice))))
	i--
	dAtA[i] = 0x19
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.IpoPriceMax))))
	i--
	dAtA[i] = 0x11
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.IpoPriceMin))))
	i--
	dAtA[i] = 0x9
	return len(dAtA) - i, nil
}

func (m *USIpoExData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *USIpoExData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *USIpoExData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintQot_GetIpoList(dAtA, i, uint64(m.IssueSize))
	i--
	dAtA[i] = 0x18
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.IpoPriceMax))))
	i--
	dAtA[i] = 0x11
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.IpoPriceMin))))
	i--
	dAtA[i] = 0x9
	return len(dAtA) - i, nil
}

func (m *IpoData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpoData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IpoData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UsExData != nil {
		{
			size, err := m.UsExData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQot_GetIpoList(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.HkExData != nil {
		{
			size, err := m.HkExData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQot_GetIpoList(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.CnExData != nil {
		{
			size, err := m.CnExData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQot_GetIpoList(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Basic == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("basic")
	} else {
		{
			size, err := m.Basic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQot_GetIpoList(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *C2S) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintQot_GetIpoList(dAtA, i, uint64(m.Market))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *S2C) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IpoList) > 0 {
		for iNdEx := len(m.IpoList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IpoList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQot_GetIpoList(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.C2S == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("c2s")
	} else {
		{
			size, err := m.C2S.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQot_GetIpoList(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.S2C != nil {
		{
			size, err := m.S2C.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQot_GetIpoList(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	i = encodeVarintQot_GetIpoList(dAtA, i, uint64(m.ErrCode))
	i--
	dAtA[i] = 0x18
	i -= len(m.RetMsg)
	copy(dAtA[i:], m.RetMsg)
	i = encodeVarintQot_GetIpoList(dAtA, i, uint64(len(m.RetMsg)))
	i--
	dAtA[i] = 0x12
	if m.RetType == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("retType")
	} else {
		i = encodeVarintQot_GetIpoList(dAtA, i, uint64(*m.RetType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQot_GetIpoList(dAtA []byte, offset int, v uint64) int {
	offset -= sovQot_GetIpoList(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BasicIpoData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Security != nil {
		l = m.Security.Size()
		n += 1 + l + sovQot_GetIpoList(uint64(l))
	}
	l = len(m.Name)
	n += 1 + l + sovQot_GetIpoList(uint64(l))
	l = len(m.ListTime)
	n += 1 + l + sovQot_GetIpoList(uint64(l))
	n += 9
	return n
}

func (m *CNIpoExData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ApplyCode)
	n += 1 + l + sovQot_GetIpoList(uint64(l))
	n += 1 + sovQot_GetIpoList(uint64(m.IssueSize))
	n += 1 + sovQot_GetIpoList(uint64(m.OnlineIssueSize))
	n += 1 + sovQot_GetIpoList(uint64(m.ApplyUpperLimit))
	n += 1 + sovQot_GetIpoList(uint64(m.ApplyLimitMarketValue))
	n += 2
	n += 9
	n += 9
	n += 2
	n += 9
	n += 9
	l = len(m.ApplyTime)
	n += 1 + l + sovQot_GetIpoList(uint64(l))
	n += 9
	l = len(m.WinningTime)
	n += 1 + l + sovQot_GetIpoList(uint64(l))
	n += 9
	n += 3
	if len(m.WinningNumData) > 0 {
		for _, e := range m.WinningNumData {
			l = e.Size()
			n += 2 + l + sovQot_GetIpoList(uint64(l))
		}
	}
	return n
}

func (m *WinningNumData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WinningName)
	n += 1 + l + sovQot_GetIpoList(uint64(l))
	l = len(m.WinningInfo)
	n += 1 + l + sovQot_GetIpoList(uint64(l))
	return n
}

func (m *HKIpoExData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 9
	n += 9
	n += 9
	n += 1 + sovQot_GetIpoList(uint64(m.LotSize))
	n += 9
	n += 2
	l = len(m.ApplyEndTime)
	n += 1 + l + sovQot_GetIpoList(uint64(l))
	n += 9
	return n
}

func (m *USIpoExData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 9
	n += 9
	n += 1 + sovQot_GetIpoList(uint64(m.IssueSize))
	return n
}

func (m *IpoData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Basic != nil {
		l = m.Basic.Size()
		n += 1 + l + sovQot_GetIpoList(uint64(l))
	}
	if m.CnExData != nil {
		l = m.CnExData.Size()
		n += 1 + l + sovQot_GetIpoList(uint64(l))
	}
	if m.HkExData != nil {
		l = m.HkExData.Size()
		n += 1 + l + sovQot_GetIpoList(uint64(l))
	}
	if m.UsExData != nil {
		l = m.UsExData.Size()
		n += 1 + l + sovQot_GetIpoList(uint64(l))
	}
	return n
}

func (m *C2S) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovQot_GetIpoList(uint64(m.Market))
	return n
}

func (m *S2C) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IpoList) > 0 {
		for _, e := range m.IpoList {
			l = e.Size()
			n += 1 + l + sovQot_GetIpoList(uint64(l))
		}
	}
	return n
}

func (m *Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.C2S != nil {
		l = m.C2S.Size()
		n += 1 + l + sovQot_GetIpoList(uint64(l))
	}
	return n
}

func (m *Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetType != nil {
		n += 1 + sovQot_GetIpoList(uint64(*m.RetType))
	}
	l = len(m.RetMsg)
	n += 1 + l + sovQot_GetIpoList(uint64(l))
	n += 1 + sovQot_GetIpoList(uint64(m.ErrCode))
	if m.S2C != nil {
		l = m.S2C.Size()
		n += 1 + l + sovQot_GetIpoList(uint64(l))
	}
	return n
}

func sovQot_GetIpoList(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQot_GetIpoList(x uint64) (n int) {
	return sovQot_GetIpoList(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BasicIpoData) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_GetIpoList
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BasicIpoData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BasicIpoData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Security", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetIpoList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_GetIpoList
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetIpoList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Security == nil {
				m.Security = &qotcommon.Security{}
			}
			if err := m.Security.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetIpoList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQot_GetIpoList
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetIpoList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetIpoList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQot_GetIpoList
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetIpoList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ListTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListTimestamp", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ListTimestamp = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipQot_GetIpoList(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_GetIpoList
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_GetIpoList
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("security")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("name")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CNIpoExData) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_GetIpoList
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CNIpoExData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CNIpoExData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetIpoList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQot_GetIpoList
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetIpoList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplyCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssueSize", wireType)
			}
			m.IssueSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetIpoList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IssueSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlineIssueSize", wireType)
			}
			m.OnlineIssueSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetIpoList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OnlineIssueSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyUpperLimit", wireType)
			}
			m.ApplyUpperLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetIpoList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApplyUpperLimit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyLimitMarketValue", wireType)
			}
			m.ApplyLimitMarketValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetIpoList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApplyLimitMarketValue |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEstimateIpoPrice", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetIpoList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEstimateIpoPrice = bool(v != 0)
			hasFields[0] |= uint64(0x00000020)
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpoPrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.IpoPrice = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000040)
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndustryPeRate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.IndustryPeRate = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000080)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEstimateWinningRatio", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetIpoList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEstimateWinningRatio = bool(v != 0)
			hasFields[0] |= uint64(0x00000100)
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinningRatio", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.WinningRatio = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000200)
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuePeRate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.IssuePeRate = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000400)
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetIpoList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQot_GetIpoList
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetIpoList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplyTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyTimestamp", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ApplyTimestamp = float64(math.Float64frombits(v))
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinningTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetIpoList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQot_GetIpoList
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetIpoList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WinningTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinningTimestamp", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.WinningTimestamp = float64(math.Float64frombits(v))
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsHasWon", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetIpoList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsHasWon = bool(v != 0)
			hasFields[0] |= uint64(0x00000800)
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinningNumData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetIpoList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_GetIpoList
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetIpoList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WinningNumData = append(m.WinningNumData, &WinningNumData{})
			if err := m.WinningNumData[len(m.WinningNumData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQot_GetIpoList(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_GetIpoList
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_GetIpoList
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("applyCode")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("issueSize")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("onlineIssueSize")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("applyUpperLimit")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("applyLimitMarketValue")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("isEstimateIpoPrice")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ipoPrice")
	}
	if hasFields[0]&uint64(0x00000080) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("industryPeRate")
	}
	if hasFields[0]&uint64(0x00000100) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("isEstimateWinningRatio")
	}
	if hasFields[0]&uint64(0x00000200) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("winningRatio")
	}
	if hasFields[0]&uint64(0x00000400) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("issuePeRate")
	}
	if hasFields[0]&uint64(0x00000800) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("isHasWon")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WinningNumData) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_GetIpoList
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WinningNumData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WinningNumData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinningName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetIpoList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQot_GetIpoList
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetIpoList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WinningName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinningInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetIpoList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQot_GetIpoList
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetIpoList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WinningInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipQot_GetIpoList(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_GetIpoList
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_GetIpoList
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("winningName")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("winningInfo")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HKIpoExData) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_GetIpoList
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HKIpoExData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HKIpoExData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpoPriceMin", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.IpoPriceMin = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpoPriceMax", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.IpoPriceMax = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListPrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ListPrice = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LotSize", wireType)
			}
			m.LotSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetIpoList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LotSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntrancePrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.EntrancePrice = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSubscribeStatus", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetIpoList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSubscribeStatus = bool(v != 0)
			hasFields[0] |= uint64(0x00000020)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyEndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetIpoList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQot_GetIpoList
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetIpoList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplyEndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyEndTimestamp", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ApplyEndTimestamp = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipQot_GetIpoList(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_GetIpoList
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_GetIpoList
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ipoPriceMin")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ipoPriceMax")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("listPrice")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("lotSize")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("entrancePrice")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("isSubscribeStatus")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *USIpoExData) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_GetIpoList
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: USIpoExData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: USIpoExData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpoPriceMin", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.IpoPriceMin = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpoPriceMax", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.IpoPriceMax = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssueSize", wireType)
			}
			m.IssueSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetIpoList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IssueSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipQot_GetIpoList(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_GetIpoList
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_GetIpoList
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ipoPriceMin")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ipoPriceMax")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("issueSize")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpoData) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_GetIpoList
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpoData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpoData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Basic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetIpoList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_GetIpoList
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetIpoList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Basic == nil {
				m.Basic = &BasicIpoData{}
			}
			if err := m.Basic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CnExData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetIpoList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_GetIpoList
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetIpoList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CnExData == nil {
				m.CnExData = &CNIpoExData{}
			}
			if err := m.CnExData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HkExData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetIpoList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_GetIpoList
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetIpoList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HkExData == nil {
				m.HkExData = &HKIpoExData{}
			}
			if err := m.HkExData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsExData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetIpoList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_GetIpoList
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetIpoList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UsExData == nil {
				m.UsExData = &USIpoExData{}
			}
			if err := m.UsExData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQot_GetIpoList(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_GetIpoList
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_GetIpoList
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("basic")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_GetIpoList
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Market", wireType)
			}
			m.Market = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetIpoList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Market |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipQot_GetIpoList(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_GetIpoList
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_GetIpoList
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("market")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_GetIpoList
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpoList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetIpoList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_GetIpoList
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetIpoList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpoList = append(m.IpoList, &IpoData{})
			if err := m.IpoList[len(m.IpoList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQot_GetIpoList(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_GetIpoList
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_GetIpoList
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Request) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_GetIpoList
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field C2S", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetIpoList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_GetIpoList
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetIpoList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.C2S == nil {
				m.C2S = &C2S{}
			}
			if err := m.C2S.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipQot_GetIpoList(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_GetIpoList
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_GetIpoList
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("c2s")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_GetIpoList
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetIpoList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetType = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetIpoList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQot_GetIpoList
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetIpoList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RetMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			m.ErrCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetIpoList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S2C", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetIpoList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_GetIpoList
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetIpoList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.S2C == nil {
				m.S2C = &S2C{}
			}
			if err := m.S2C.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQot_GetIpoList(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_GetIpoList
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_GetIpoList
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("retType")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQot_GetIpoList(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQot_GetIpoList
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQot_GetIpoList
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQot_GetIpoList
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQot_GetIpoList
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthQot_GetIpoList
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowQot_GetIpoList
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipQot_GetIpoList(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthQot_GetIpoList
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthQot_GetIpoList = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQot_GetIpoList   = fmt.Errorf("proto: integer overflow")
)
