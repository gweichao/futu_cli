// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: Qot_GetSecuritySnapshot.proto

package Qot_GetSecuritySnapshot

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	_ "pbgo/Common"
	Qot_Common "pbgo/Qot_Common"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type C2S struct {
	SecurityList []*Qot_Common.Security `protobuf:"bytes,1,rep,name=securityList" json:"securityList,omitempty"`
}

func (m *C2S) Reset()         { *m = C2S{} }
func (m *C2S) String() string { return proto.CompactTextString(m) }
func (*C2S) ProtoMessage()    {}
func (*C2S) Descriptor() ([]byte, []int) {
	return fileDescriptor_39e6284ba27d5399, []int{0}
}
func (m *C2S) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S.Merge(m, src)
}
func (m *C2S) XXX_Size() int {
	return m.Size()
}
func (m *C2S) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S.DiscardUnknown(m)
}

var xxx_messageInfo_C2S proto.InternalMessageInfo

func (m *C2S) GetSecurityList() []*Qot_Common.Security {
	if m != nil {
		return m.SecurityList
	}
	return nil
}

// 正股类型额外数据
type EquitySnapshotExData struct {
	IssuedShares         int64   `protobuf:"varint,1,req,name=issuedShares" json:"issuedShares"`
	IssuedMarketVal      float64 `protobuf:"fixed64,2,req,name=issuedMarketVal" json:"issuedMarketVal"`
	NetAsset             float64 `protobuf:"fixed64,3,req,name=netAsset" json:"netAsset"`
	NetProfit            float64 `protobuf:"fixed64,4,req,name=netProfit" json:"netProfit"`
	EarningsPershare     float64 `protobuf:"fixed64,5,req,name=earningsPershare" json:"earningsPershare"`
	OutstandingShares    int64   `protobuf:"varint,6,req,name=outstandingShares" json:"outstandingShares"`
	OutstandingMarketVal float64 `protobuf:"fixed64,7,req,name=outstandingMarketVal" json:"outstandingMarketVal"`
	NetAssetPershare     float64 `protobuf:"fixed64,8,req,name=netAssetPershare" json:"netAssetPershare"`
	EyRate               float64 `protobuf:"fixed64,9,req,name=eyRate" json:"eyRate"`
	PeRate               float64 `protobuf:"fixed64,10,req,name=peRate" json:"peRate"`
	PbRate               float64 `protobuf:"fixed64,11,req,name=pbRate" json:"pbRate"`
	PeTTMRate            float64 `protobuf:"fixed64,12,req,name=peTTMRate" json:"peTTMRate"`
	DividendTTM          float64 `protobuf:"fixed64,13,opt,name=dividendTTM" json:"dividendTTM"`
	DividendRatioTTM     float64 `protobuf:"fixed64,14,opt,name=dividendRatioTTM" json:"dividendRatioTTM"`
	DividendLFY          float64 `protobuf:"fixed64,15,opt,name=dividendLFY" json:"dividendLFY"`
	DividendLFYRatio     float64 `protobuf:"fixed64,16,opt,name=dividendLFYRatio" json:"dividendLFYRatio"`
}

func (m *EquitySnapshotExData) Reset()         { *m = EquitySnapshotExData{} }
func (m *EquitySnapshotExData) String() string { return proto.CompactTextString(m) }
func (*EquitySnapshotExData) ProtoMessage()    {}
func (*EquitySnapshotExData) Descriptor() ([]byte, []int) {
	return fileDescriptor_39e6284ba27d5399, []int{1}
}
func (m *EquitySnapshotExData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EquitySnapshotExData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EquitySnapshotExData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EquitySnapshotExData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EquitySnapshotExData.Merge(m, src)
}
func (m *EquitySnapshotExData) XXX_Size() int {
	return m.Size()
}
func (m *EquitySnapshotExData) XXX_DiscardUnknown() {
	xxx_messageInfo_EquitySnapshotExData.DiscardUnknown(m)
}

var xxx_messageInfo_EquitySnapshotExData proto.InternalMessageInfo

func (m *EquitySnapshotExData) GetIssuedShares() int64 {
	if m != nil {
		return m.IssuedShares
	}
	return 0
}

func (m *EquitySnapshotExData) GetIssuedMarketVal() float64 {
	if m != nil {
		return m.IssuedMarketVal
	}
	return 0
}

func (m *EquitySnapshotExData) GetNetAsset() float64 {
	if m != nil {
		return m.NetAsset
	}
	return 0
}

func (m *EquitySnapshotExData) GetNetProfit() float64 {
	if m != nil {
		return m.NetProfit
	}
	return 0
}

func (m *EquitySnapshotExData) GetEarningsPershare() float64 {
	if m != nil {
		return m.EarningsPershare
	}
	return 0
}

func (m *EquitySnapshotExData) GetOutstandingShares() int64 {
	if m != nil {
		return m.OutstandingShares
	}
	return 0
}

func (m *EquitySnapshotExData) GetOutstandingMarketVal() float64 {
	if m != nil {
		return m.OutstandingMarketVal
	}
	return 0
}

func (m *EquitySnapshotExData) GetNetAssetPershare() float64 {
	if m != nil {
		return m.NetAssetPershare
	}
	return 0
}

func (m *EquitySnapshotExData) GetEyRate() float64 {
	if m != nil {
		return m.EyRate
	}
	return 0
}

func (m *EquitySnapshotExData) GetPeRate() float64 {
	if m != nil {
		return m.PeRate
	}
	return 0
}

func (m *EquitySnapshotExData) GetPbRate() float64 {
	if m != nil {
		return m.PbRate
	}
	return 0
}

func (m *EquitySnapshotExData) GetPeTTMRate() float64 {
	if m != nil {
		return m.PeTTMRate
	}
	return 0
}

func (m *EquitySnapshotExData) GetDividendTTM() float64 {
	if m != nil {
		return m.DividendTTM
	}
	return 0
}

func (m *EquitySnapshotExData) GetDividendRatioTTM() float64 {
	if m != nil {
		return m.DividendRatioTTM
	}
	return 0
}

func (m *EquitySnapshotExData) GetDividendLFY() float64 {
	if m != nil {
		return m.DividendLFY
	}
	return 0
}

func (m *EquitySnapshotExData) GetDividendLFYRatio() float64 {
	if m != nil {
		return m.DividendLFYRatio
	}
	return 0
}

// 窝轮类型额外数据
type WarrantSnapshotExData struct {
	ConversionRate     float64              `protobuf:"fixed64,1,req,name=conversionRate" json:"conversionRate"`
	WarrantType        int32                `protobuf:"varint,2,req,name=warrantType" json:"warrantType"`
	StrikePrice        float64              `protobuf:"fixed64,3,req,name=strikePrice" json:"strikePrice"`
	MaturityTime       string               `protobuf:"bytes,4,req,name=maturityTime" json:"maturityTime"`
	EndTradeTime       string               `protobuf:"bytes,5,req,name=endTradeTime" json:"endTradeTime"`
	Owner              *Qot_Common.Security `protobuf:"bytes,6,req,name=owner" json:"owner,omitempty"`
	RecoveryPrice      float64              `protobuf:"fixed64,7,req,name=recoveryPrice" json:"recoveryPrice"`
	StreetVolumn       int64                `protobuf:"varint,8,req,name=streetVolumn" json:"streetVolumn"`
	IssueVolumn        int64                `protobuf:"varint,9,req,name=issueVolumn" json:"issueVolumn"`
	StreetRate         float64              `protobuf:"fixed64,10,req,name=streetRate" json:"streetRate"`
	Delta              float64              `protobuf:"fixed64,11,req,name=delta" json:"delta"`
	ImpliedVolatility  float64              `protobuf:"fixed64,12,req,name=impliedVolatility" json:"impliedVolatility"`
	Premium            float64              `protobuf:"fixed64,13,req,name=premium" json:"premium"`
	MaturityTimestamp  float64              `protobuf:"fixed64,14,opt,name=maturityTimestamp" json:"maturityTimestamp"`
	EndTradeTimestamp  float64              `protobuf:"fixed64,15,opt,name=endTradeTimestamp" json:"endTradeTimestamp"`
	Leverage           float64              `protobuf:"fixed64,16,opt,name=leverage" json:"leverage"`
	Ipop               float64              `protobuf:"fixed64,17,opt,name=ipop" json:"ipop"`
	BreakEvenPoint     float64              `protobuf:"fixed64,18,opt,name=breakEvenPoint" json:"breakEvenPoint"`
	ConversionPrice    float64              `protobuf:"fixed64,19,opt,name=conversionPrice" json:"conversionPrice"`
	PriceRecoveryRatio float64              `protobuf:"fixed64,20,opt,name=priceRecoveryRatio" json:"priceRecoveryRatio"`
	Score              float64              `protobuf:"fixed64,21,opt,name=score" json:"score"`
	UpperStrikePrice   float64              `protobuf:"fixed64,22,opt,name=upperStrikePrice" json:"upperStrikePrice"`
	LowerStrikePrice   float64              `protobuf:"fixed64,23,opt,name=lowerStrikePrice" json:"lowerStrikePrice"`
	InLinePriceStatus  int32                `protobuf:"varint,24,opt,name=inLinePriceStatus" json:"inLinePriceStatus"`
}

func (m *WarrantSnapshotExData) Reset()         { *m = WarrantSnapshotExData{} }
func (m *WarrantSnapshotExData) String() string { return proto.CompactTextString(m) }
func (*WarrantSnapshotExData) ProtoMessage()    {}
func (*WarrantSnapshotExData) Descriptor() ([]byte, []int) {
	return fileDescriptor_39e6284ba27d5399, []int{2}
}
func (m *WarrantSnapshotExData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WarrantSnapshotExData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WarrantSnapshotExData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WarrantSnapshotExData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WarrantSnapshotExData.Merge(m, src)
}
func (m *WarrantSnapshotExData) XXX_Size() int {
	return m.Size()
}
func (m *WarrantSnapshotExData) XXX_DiscardUnknown() {
	xxx_messageInfo_WarrantSnapshotExData.DiscardUnknown(m)
}

var xxx_messageInfo_WarrantSnapshotExData proto.InternalMessageInfo

func (m *WarrantSnapshotExData) GetConversionRate() float64 {
	if m != nil {
		return m.ConversionRate
	}
	return 0
}

func (m *WarrantSnapshotExData) GetWarrantType() int32 {
	if m != nil {
		return m.WarrantType
	}
	return 0
}

func (m *WarrantSnapshotExData) GetStrikePrice() float64 {
	if m != nil {
		return m.StrikePrice
	}
	return 0
}

func (m *WarrantSnapshotExData) GetMaturityTime() string {
	if m != nil {
		return m.MaturityTime
	}
	return ""
}

func (m *WarrantSnapshotExData) GetEndTradeTime() string {
	if m != nil {
		return m.EndTradeTime
	}
	return ""
}

func (m *WarrantSnapshotExData) GetOwner() *Qot_Common.Security {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *WarrantSnapshotExData) GetRecoveryPrice() float64 {
	if m != nil {
		return m.RecoveryPrice
	}
	return 0
}

func (m *WarrantSnapshotExData) GetStreetVolumn() int64 {
	if m != nil {
		return m.StreetVolumn
	}
	return 0
}

func (m *WarrantSnapshotExData) GetIssueVolumn() int64 {
	if m != nil {
		return m.IssueVolumn
	}
	return 0
}

func (m *WarrantSnapshotExData) GetStreetRate() float64 {
	if m != nil {
		return m.StreetRate
	}
	return 0
}

func (m *WarrantSnapshotExData) GetDelta() float64 {
	if m != nil {
		return m.Delta
	}
	return 0
}

func (m *WarrantSnapshotExData) GetImpliedVolatility() float64 {
	if m != nil {
		return m.ImpliedVolatility
	}
	return 0
}

func (m *WarrantSnapshotExData) GetPremium() float64 {
	if m != nil {
		return m.Premium
	}
	return 0
}

func (m *WarrantSnapshotExData) GetMaturityTimestamp() float64 {
	if m != nil {
		return m.MaturityTimestamp
	}
	return 0
}

func (m *WarrantSnapshotExData) GetEndTradeTimestamp() float64 {
	if m != nil {
		return m.EndTradeTimestamp
	}
	return 0
}

func (m *WarrantSnapshotExData) GetLeverage() float64 {
	if m != nil {
		return m.Leverage
	}
	return 0
}

func (m *WarrantSnapshotExData) GetIpop() float64 {
	if m != nil {
		return m.Ipop
	}
	return 0
}

func (m *WarrantSnapshotExData) GetBreakEvenPoint() float64 {
	if m != nil {
		return m.BreakEvenPoint
	}
	return 0
}

func (m *WarrantSnapshotExData) GetConversionPrice() float64 {
	if m != nil {
		return m.ConversionPrice
	}
	return 0
}

func (m *WarrantSnapshotExData) GetPriceRecoveryRatio() float64 {
	if m != nil {
		return m.PriceRecoveryRatio
	}
	return 0
}

func (m *WarrantSnapshotExData) GetScore() float64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *WarrantSnapshotExData) GetUpperStrikePrice() float64 {
	if m != nil {
		return m.UpperStrikePrice
	}
	return 0
}

func (m *WarrantSnapshotExData) GetLowerStrikePrice() float64 {
	if m != nil {
		return m.LowerStrikePrice
	}
	return 0
}

func (m *WarrantSnapshotExData) GetInLinePriceStatus() int32 {
	if m != nil {
		return m.InLinePriceStatus
	}
	return 0
}

// 期权类型额外数据
type OptionSnapshotExData struct {
	Type              int32                `protobuf:"varint,1,req,name=type" json:"type"`
	Owner             *Qot_Common.Security `protobuf:"bytes,2,req,name=owner" json:"owner,omitempty"`
	StrikeTime        string               `protobuf:"bytes,3,req,name=strikeTime" json:"strikeTime"`
	StrikePrice       float64              `protobuf:"fixed64,4,req,name=strikePrice" json:"strikePrice"`
	ContractSize      int32                `protobuf:"varint,5,req,name=contractSize" json:"contractSize"`
	OpenInterest      int32                `protobuf:"varint,6,req,name=openInterest" json:"openInterest"`
	ImpliedVolatility float64              `protobuf:"fixed64,7,req,name=impliedVolatility" json:"impliedVolatility"`
	Premium           float64              `protobuf:"fixed64,8,req,name=premium" json:"premium"`
	Delta             float64              `protobuf:"fixed64,9,req,name=delta" json:"delta"`
	Gamma             float64              `protobuf:"fixed64,10,req,name=gamma" json:"gamma"`
	Vega              float64              `protobuf:"fixed64,11,req,name=vega" json:"vega"`
	Theta             float64              `protobuf:"fixed64,12,req,name=theta" json:"theta"`
	Rho               float64              `protobuf:"fixed64,13,req,name=rho" json:"rho"`
	StrikeTimestamp   float64              `protobuf:"fixed64,14,opt,name=strikeTimestamp" json:"strikeTimestamp"`
	//以下字段仅支持港股期权
	IndexOptionType      int32   `protobuf:"varint,15,opt,name=indexOptionType" json:"indexOptionType"`
	NetOpenInterest      int32   `protobuf:"varint,16,opt,name=netOpenInterest" json:"netOpenInterest"`
	ExpiryDateDistance   int32   `protobuf:"varint,17,opt,name=expiryDateDistance" json:"expiryDateDistance"`
	ContractNominalValue float64 `protobuf:"fixed64,18,opt,name=contractNominalValue" json:"contractNominalValue"`
	OwnerLotMultiplier   float64 `protobuf:"fixed64,19,opt,name=ownerLotMultiplier" json:"ownerLotMultiplier"`
	OptionAreaType       int32   `protobuf:"varint,20,opt,name=optionAreaType" json:"optionAreaType"`
	ContractMultiplier   float64 `protobuf:"fixed64,21,opt,name=contractMultiplier" json:"contractMultiplier"`
}

func (m *OptionSnapshotExData) Reset()         { *m = OptionSnapshotExData{} }
func (m *OptionSnapshotExData) String() string { return proto.CompactTextString(m) }
func (*OptionSnapshotExData) ProtoMessage()    {}
func (*OptionSnapshotExData) Descriptor() ([]byte, []int) {
	return fileDescriptor_39e6284ba27d5399, []int{3}
}
func (m *OptionSnapshotExData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OptionSnapshotExData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OptionSnapshotExData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OptionSnapshotExData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OptionSnapshotExData.Merge(m, src)
}
func (m *OptionSnapshotExData) XXX_Size() int {
	return m.Size()
}
func (m *OptionSnapshotExData) XXX_DiscardUnknown() {
	xxx_messageInfo_OptionSnapshotExData.DiscardUnknown(m)
}

var xxx_messageInfo_OptionSnapshotExData proto.InternalMessageInfo

func (m *OptionSnapshotExData) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *OptionSnapshotExData) GetOwner() *Qot_Common.Security {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *OptionSnapshotExData) GetStrikeTime() string {
	if m != nil {
		return m.StrikeTime
	}
	return ""
}

func (m *OptionSnapshotExData) GetStrikePrice() float64 {
	if m != nil {
		return m.StrikePrice
	}
	return 0
}

func (m *OptionSnapshotExData) GetContractSize() int32 {
	if m != nil {
		return m.ContractSize
	}
	return 0
}

func (m *OptionSnapshotExData) GetOpenInterest() int32 {
	if m != nil {
		return m.OpenInterest
	}
	return 0
}

func (m *OptionSnapshotExData) GetImpliedVolatility() float64 {
	if m != nil {
		return m.ImpliedVolatility
	}
	return 0
}

func (m *OptionSnapshotExData) GetPremium() float64 {
	if m != nil {
		return m.Premium
	}
	return 0
}

func (m *OptionSnapshotExData) GetDelta() float64 {
	if m != nil {
		return m.Delta
	}
	return 0
}

func (m *OptionSnapshotExData) GetGamma() float64 {
	if m != nil {
		return m.Gamma
	}
	return 0
}

func (m *OptionSnapshotExData) GetVega() float64 {
	if m != nil {
		return m.Vega
	}
	return 0
}

func (m *OptionSnapshotExData) GetTheta() float64 {
	if m != nil {
		return m.Theta
	}
	return 0
}

func (m *OptionSnapshotExData) GetRho() float64 {
	if m != nil {
		return m.Rho
	}
	return 0
}

func (m *OptionSnapshotExData) GetStrikeTimestamp() float64 {
	if m != nil {
		return m.StrikeTimestamp
	}
	return 0
}

func (m *OptionSnapshotExData) GetIndexOptionType() int32 {
	if m != nil {
		return m.IndexOptionType
	}
	return 0
}

func (m *OptionSnapshotExData) GetNetOpenInterest() int32 {
	if m != nil {
		return m.NetOpenInterest
	}
	return 0
}

func (m *OptionSnapshotExData) GetExpiryDateDistance() int32 {
	if m != nil {
		return m.ExpiryDateDistance
	}
	return 0
}

func (m *OptionSnapshotExData) GetContractNominalValue() float64 {
	if m != nil {
		return m.ContractNominalValue
	}
	return 0
}

func (m *OptionSnapshotExData) GetOwnerLotMultiplier() float64 {
	if m != nil {
		return m.OwnerLotMultiplier
	}
	return 0
}

func (m *OptionSnapshotExData) GetOptionAreaType() int32 {
	if m != nil {
		return m.OptionAreaType
	}
	return 0
}

func (m *OptionSnapshotExData) GetContractMultiplier() float64 {
	if m != nil {
		return m.ContractMultiplier
	}
	return 0
}

// 指数类型额外数据
type IndexSnapshotExData struct {
	RaiseCount int32 `protobuf:"varint,1,req,name=raiseCount" json:"raiseCount"`
	FallCount  int32 `protobuf:"varint,2,req,name=fallCount" json:"fallCount"`
	EqualCount int32 `protobuf:"varint,3,req,name=equalCount" json:"equalCount"`
}

func (m *IndexSnapshotExData) Reset()         { *m = IndexSnapshotExData{} }
func (m *IndexSnapshotExData) String() string { return proto.CompactTextString(m) }
func (*IndexSnapshotExData) ProtoMessage()    {}
func (*IndexSnapshotExData) Descriptor() ([]byte, []int) {
	return fileDescriptor_39e6284ba27d5399, []int{4}
}
func (m *IndexSnapshotExData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexSnapshotExData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IndexSnapshotExData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IndexSnapshotExData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexSnapshotExData.Merge(m, src)
}
func (m *IndexSnapshotExData) XXX_Size() int {
	return m.Size()
}
func (m *IndexSnapshotExData) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexSnapshotExData.DiscardUnknown(m)
}

var xxx_messageInfo_IndexSnapshotExData proto.InternalMessageInfo

func (m *IndexSnapshotExData) GetRaiseCount() int32 {
	if m != nil {
		return m.RaiseCount
	}
	return 0
}

func (m *IndexSnapshotExData) GetFallCount() int32 {
	if m != nil {
		return m.FallCount
	}
	return 0
}

func (m *IndexSnapshotExData) GetEqualCount() int32 {
	if m != nil {
		return m.EqualCount
	}
	return 0
}

// 板块类型额外数据
type PlateSnapshotExData struct {
	RaiseCount int32 `protobuf:"varint,1,req,name=raiseCount" json:"raiseCount"`
	FallCount  int32 `protobuf:"varint,2,req,name=fallCount" json:"fallCount"`
	EqualCount int32 `protobuf:"varint,3,req,name=equalCount" json:"equalCount"`
}

func (m *PlateSnapshotExData) Reset()         { *m = PlateSnapshotExData{} }
func (m *PlateSnapshotExData) String() string { return proto.CompactTextString(m) }
func (*PlateSnapshotExData) ProtoMessage()    {}
func (*PlateSnapshotExData) Descriptor() ([]byte, []int) {
	return fileDescriptor_39e6284ba27d5399, []int{5}
}
func (m *PlateSnapshotExData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlateSnapshotExData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlateSnapshotExData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlateSnapshotExData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlateSnapshotExData.Merge(m, src)
}
func (m *PlateSnapshotExData) XXX_Size() int {
	return m.Size()
}
func (m *PlateSnapshotExData) XXX_DiscardUnknown() {
	xxx_messageInfo_PlateSnapshotExData.DiscardUnknown(m)
}

var xxx_messageInfo_PlateSnapshotExData proto.InternalMessageInfo

func (m *PlateSnapshotExData) GetRaiseCount() int32 {
	if m != nil {
		return m.RaiseCount
	}
	return 0
}

func (m *PlateSnapshotExData) GetFallCount() int32 {
	if m != nil {
		return m.FallCount
	}
	return 0
}

func (m *PlateSnapshotExData) GetEqualCount() int32 {
	if m != nil {
		return m.EqualCount
	}
	return 0
}

//期货类型额外数据
type FutureSnapshotExData struct {
	LastSettlePrice    float64 `protobuf:"fixed64,1,req,name=lastSettlePrice" json:"lastSettlePrice"`
	Position           int32   `protobuf:"varint,2,req,name=position" json:"position"`
	PositionChange     int32   `protobuf:"varint,3,req,name=positionChange" json:"positionChange"`
	LastTradeTime      string  `protobuf:"bytes,4,req,name=lastTradeTime" json:"lastTradeTime"`
	LastTradeTimestamp float64 `protobuf:"fixed64,5,opt,name=lastTradeTimestamp" json:"lastTradeTimestamp"`
	IsMainContract     bool    `protobuf:"varint,6,req,name=isMainContract" json:"isMainContract"`
}

func (m *FutureSnapshotExData) Reset()         { *m = FutureSnapshotExData{} }
func (m *FutureSnapshotExData) String() string { return proto.CompactTextString(m) }
func (*FutureSnapshotExData) ProtoMessage()    {}
func (*FutureSnapshotExData) Descriptor() ([]byte, []int) {
	return fileDescriptor_39e6284ba27d5399, []int{6}
}
func (m *FutureSnapshotExData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FutureSnapshotExData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FutureSnapshotExData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FutureSnapshotExData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FutureSnapshotExData.Merge(m, src)
}
func (m *FutureSnapshotExData) XXX_Size() int {
	return m.Size()
}
func (m *FutureSnapshotExData) XXX_DiscardUnknown() {
	xxx_messageInfo_FutureSnapshotExData.DiscardUnknown(m)
}

var xxx_messageInfo_FutureSnapshotExData proto.InternalMessageInfo

func (m *FutureSnapshotExData) GetLastSettlePrice() float64 {
	if m != nil {
		return m.LastSettlePrice
	}
	return 0
}

func (m *FutureSnapshotExData) GetPosition() int32 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *FutureSnapshotExData) GetPositionChange() int32 {
	if m != nil {
		return m.PositionChange
	}
	return 0
}

func (m *FutureSnapshotExData) GetLastTradeTime() string {
	if m != nil {
		return m.LastTradeTime
	}
	return ""
}

func (m *FutureSnapshotExData) GetLastTradeTimestamp() float64 {
	if m != nil {
		return m.LastTradeTimestamp
	}
	return 0
}

func (m *FutureSnapshotExData) GetIsMainContract() bool {
	if m != nil {
		return m.IsMainContract
	}
	return false
}

//基本快照数据
type SnapshotBasicData struct {
	Security                *Qot_Common.Security           `protobuf:"bytes,1,req,name=security" json:"security,omitempty"`
	Type                    int32                          `protobuf:"varint,2,req,name=type" json:"type"`
	IsSuspend               bool                           `protobuf:"varint,3,req,name=isSuspend" json:"isSuspend"`
	ListTime                string                         `protobuf:"bytes,4,req,name=listTime" json:"listTime"`
	LotSize                 int32                          `protobuf:"varint,5,req,name=lotSize" json:"lotSize"`
	PriceSpread             float64                        `protobuf:"fixed64,6,req,name=priceSpread" json:"priceSpread"`
	UpdateTime              string                         `protobuf:"bytes,7,req,name=updateTime" json:"updateTime"`
	HighPrice               float64                        `protobuf:"fixed64,8,req,name=highPrice" json:"highPrice"`
	OpenPrice               float64                        `protobuf:"fixed64,9,req,name=openPrice" json:"openPrice"`
	LowPrice                float64                        `protobuf:"fixed64,10,req,name=lowPrice" json:"lowPrice"`
	LastClosePrice          float64                        `protobuf:"fixed64,11,req,name=lastClosePrice" json:"lastClosePrice"`
	CurPrice                float64                        `protobuf:"fixed64,12,req,name=curPrice" json:"curPrice"`
	Volume                  int64                          `protobuf:"varint,13,req,name=volume" json:"volume"`
	Turnover                float64                        `protobuf:"fixed64,14,req,name=turnover" json:"turnover"`
	TurnoverRate            float64                        `protobuf:"fixed64,15,req,name=turnoverRate" json:"turnoverRate"`
	ListTimestamp           float64                        `protobuf:"fixed64,16,opt,name=listTimestamp" json:"listTimestamp"`
	UpdateTimestamp         float64                        `protobuf:"fixed64,17,opt,name=updateTimestamp" json:"updateTimestamp"`
	AskPrice                float64                        `protobuf:"fixed64,18,opt,name=askPrice" json:"askPrice"`
	BidPrice                float64                        `protobuf:"fixed64,19,opt,name=bidPrice" json:"bidPrice"`
	AskVol                  int64                          `protobuf:"varint,20,opt,name=askVol" json:"askVol"`
	BidVol                  int64                          `protobuf:"varint,21,opt,name=bidVol" json:"bidVol"`
	EnableMargin            bool                           `protobuf:"varint,22,opt,name=enableMargin" json:"enableMargin"`
	MortgageRatio           float64                        `protobuf:"fixed64,23,opt,name=mortgageRatio" json:"mortgageRatio"`
	LongMarginInitialRatio  float64                        `protobuf:"fixed64,24,opt,name=longMarginInitialRatio" json:"longMarginInitialRatio"`
	EnableShortSell         bool                           `protobuf:"varint,25,opt,name=enableShortSell" json:"enableShortSell"`
	ShortSellRate           float64                        `protobuf:"fixed64,26,opt,name=shortSellRate" json:"shortSellRate"`
	ShortAvailableVolume    int64                          `protobuf:"varint,27,opt,name=shortAvailableVolume" json:"shortAvailableVolume"`
	ShortMarginInitialRatio float64                        `protobuf:"fixed64,28,opt,name=shortMarginInitialRatio" json:"shortMarginInitialRatio"`
	Amplitude               float64                        `protobuf:"fixed64,29,opt,name=amplitude" json:"amplitude"`
	AvgPrice                float64                        `protobuf:"fixed64,30,opt,name=avgPrice" json:"avgPrice"`
	BidAskRatio             float64                        `protobuf:"fixed64,31,opt,name=bidAskRatio" json:"bidAskRatio"`
	VolumeRatio             float64                        `protobuf:"fixed64,32,opt,name=volumeRatio" json:"volumeRatio"`
	Highest52WeeksPrice     float64                        `protobuf:"fixed64,33,opt,name=highest52WeeksPrice" json:"highest52WeeksPrice"`
	Lowest52WeeksPrice      float64                        `protobuf:"fixed64,34,opt,name=lowest52WeeksPrice" json:"lowest52WeeksPrice"`
	HighestHistoryPrice     float64                        `protobuf:"fixed64,35,opt,name=highestHistoryPrice" json:"highestHistoryPrice"`
	LowestHistoryPrice      float64                        `protobuf:"fixed64,36,opt,name=lowestHistoryPrice" json:"lowestHistoryPrice"`
	PreMarket               *Qot_Common.PreAfterMarketData `protobuf:"bytes,37,opt,name=preMarket" json:"preMarket,omitempty"`
	AfterMarket             *Qot_Common.PreAfterMarketData `protobuf:"bytes,38,opt,name=afterMarket" json:"afterMarket,omitempty"`
	SecStatus               int32                          `protobuf:"varint,39,opt,name=secStatus" json:"secStatus"`
}

func (m *SnapshotBasicData) Reset()         { *m = SnapshotBasicData{} }
func (m *SnapshotBasicData) String() string { return proto.CompactTextString(m) }
func (*SnapshotBasicData) ProtoMessage()    {}
func (*SnapshotBasicData) Descriptor() ([]byte, []int) {
	return fileDescriptor_39e6284ba27d5399, []int{7}
}
func (m *SnapshotBasicData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SnapshotBasicData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SnapshotBasicData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SnapshotBasicData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapshotBasicData.Merge(m, src)
}
func (m *SnapshotBasicData) XXX_Size() int {
	return m.Size()
}
func (m *SnapshotBasicData) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapshotBasicData.DiscardUnknown(m)
}

var xxx_messageInfo_SnapshotBasicData proto.InternalMessageInfo

func (m *SnapshotBasicData) GetSecurity() *Qot_Common.Security {
	if m != nil {
		return m.Security
	}
	return nil
}

func (m *SnapshotBasicData) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *SnapshotBasicData) GetIsSuspend() bool {
	if m != nil {
		return m.IsSuspend
	}
	return false
}

func (m *SnapshotBasicData) GetListTime() string {
	if m != nil {
		return m.ListTime
	}
	return ""
}

func (m *SnapshotBasicData) GetLotSize() int32 {
	if m != nil {
		return m.LotSize
	}
	return 0
}

func (m *SnapshotBasicData) GetPriceSpread() float64 {
	if m != nil {
		return m.PriceSpread
	}
	return 0
}

func (m *SnapshotBasicData) GetUpdateTime() string {
	if m != nil {
		return m.UpdateTime
	}
	return ""
}

func (m *SnapshotBasicData) GetHighPrice() float64 {
	if m != nil {
		return m.HighPrice
	}
	return 0
}

func (m *SnapshotBasicData) GetOpenPrice() float64 {
	if m != nil {
		return m.OpenPrice
	}
	return 0
}

func (m *SnapshotBasicData) GetLowPrice() float64 {
	if m != nil {
		return m.LowPrice
	}
	return 0
}

func (m *SnapshotBasicData) GetLastClosePrice() float64 {
	if m != nil {
		return m.LastClosePrice
	}
	return 0
}

func (m *SnapshotBasicData) GetCurPrice() float64 {
	if m != nil {
		return m.CurPrice
	}
	return 0
}

func (m *SnapshotBasicData) GetVolume() int64 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func (m *SnapshotBasicData) GetTurnover() float64 {
	if m != nil {
		return m.Turnover
	}
	return 0
}

func (m *SnapshotBasicData) GetTurnoverRate() float64 {
	if m != nil {
		return m.TurnoverRate
	}
	return 0
}

func (m *SnapshotBasicData) GetListTimestamp() float64 {
	if m != nil {
		return m.ListTimestamp
	}
	return 0
}

func (m *SnapshotBasicData) GetUpdateTimestamp() float64 {
	if m != nil {
		return m.UpdateTimestamp
	}
	return 0
}

func (m *SnapshotBasicData) GetAskPrice() float64 {
	if m != nil {
		return m.AskPrice
	}
	return 0
}

func (m *SnapshotBasicData) GetBidPrice() float64 {
	if m != nil {
		return m.BidPrice
	}
	return 0
}

func (m *SnapshotBasicData) GetAskVol() int64 {
	if m != nil {
		return m.AskVol
	}
	return 0
}

func (m *SnapshotBasicData) GetBidVol() int64 {
	if m != nil {
		return m.BidVol
	}
	return 0
}

func (m *SnapshotBasicData) GetEnableMargin() bool {
	if m != nil {
		return m.EnableMargin
	}
	return false
}

func (m *SnapshotBasicData) GetMortgageRatio() float64 {
	if m != nil {
		return m.MortgageRatio
	}
	return 0
}

func (m *SnapshotBasicData) GetLongMarginInitialRatio() float64 {
	if m != nil {
		return m.LongMarginInitialRatio
	}
	return 0
}

func (m *SnapshotBasicData) GetEnableShortSell() bool {
	if m != nil {
		return m.EnableShortSell
	}
	return false
}

func (m *SnapshotBasicData) GetShortSellRate() float64 {
	if m != nil {
		return m.ShortSellRate
	}
	return 0
}

func (m *SnapshotBasicData) GetShortAvailableVolume() int64 {
	if m != nil {
		return m.ShortAvailableVolume
	}
	return 0
}

func (m *SnapshotBasicData) GetShortMarginInitialRatio() float64 {
	if m != nil {
		return m.ShortMarginInitialRatio
	}
	return 0
}

func (m *SnapshotBasicData) GetAmplitude() float64 {
	if m != nil {
		return m.Amplitude
	}
	return 0
}

func (m *SnapshotBasicData) GetAvgPrice() float64 {
	if m != nil {
		return m.AvgPrice
	}
	return 0
}

func (m *SnapshotBasicData) GetBidAskRatio() float64 {
	if m != nil {
		return m.BidAskRatio
	}
	return 0
}

func (m *SnapshotBasicData) GetVolumeRatio() float64 {
	if m != nil {
		return m.VolumeRatio
	}
	return 0
}

func (m *SnapshotBasicData) GetHighest52WeeksPrice() float64 {
	if m != nil {
		return m.Highest52WeeksPrice
	}
	return 0
}

func (m *SnapshotBasicData) GetLowest52WeeksPrice() float64 {
	if m != nil {
		return m.Lowest52WeeksPrice
	}
	return 0
}

func (m *SnapshotBasicData) GetHighestHistoryPrice() float64 {
	if m != nil {
		return m.HighestHistoryPrice
	}
	return 0
}

func (m *SnapshotBasicData) GetLowestHistoryPrice() float64 {
	if m != nil {
		return m.LowestHistoryPrice
	}
	return 0
}

func (m *SnapshotBasicData) GetPreMarket() *Qot_Common.PreAfterMarketData {
	if m != nil {
		return m.PreMarket
	}
	return nil
}

func (m *SnapshotBasicData) GetAfterMarket() *Qot_Common.PreAfterMarketData {
	if m != nil {
		return m.AfterMarket
	}
	return nil
}

func (m *SnapshotBasicData) GetSecStatus() int32 {
	if m != nil {
		return m.SecStatus
	}
	return 0
}

type Snapshot struct {
	Basic         *SnapshotBasicData     `protobuf:"bytes,1,req,name=basic" json:"basic,omitempty"`
	EquityExData  *EquitySnapshotExData  `protobuf:"bytes,2,opt,name=equityExData" json:"equityExData,omitempty"`
	WarrantExData *WarrantSnapshotExData `protobuf:"bytes,3,opt,name=warrantExData" json:"warrantExData,omitempty"`
	OptionExData  *OptionSnapshotExData  `protobuf:"bytes,4,opt,name=optionExData" json:"optionExData,omitempty"`
	IndexExData   *IndexSnapshotExData   `protobuf:"bytes,5,opt,name=indexExData" json:"indexExData,omitempty"`
	PlateExData   *PlateSnapshotExData   `protobuf:"bytes,6,opt,name=plateExData" json:"plateExData,omitempty"`
	FutureExData  *FutureSnapshotExData  `protobuf:"bytes,7,opt,name=futureExData" json:"futureExData,omitempty"`
}

func (m *Snapshot) Reset()         { *m = Snapshot{} }
func (m *Snapshot) String() string { return proto.CompactTextString(m) }
func (*Snapshot) ProtoMessage()    {}
func (*Snapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_39e6284ba27d5399, []int{8}
}
func (m *Snapshot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Snapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Snapshot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Snapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Snapshot.Merge(m, src)
}
func (m *Snapshot) XXX_Size() int {
	return m.Size()
}
func (m *Snapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_Snapshot.DiscardUnknown(m)
}

var xxx_messageInfo_Snapshot proto.InternalMessageInfo

func (m *Snapshot) GetBasic() *SnapshotBasicData {
	if m != nil {
		return m.Basic
	}
	return nil
}

func (m *Snapshot) GetEquityExData() *EquitySnapshotExData {
	if m != nil {
		return m.EquityExData
	}
	return nil
}

func (m *Snapshot) GetWarrantExData() *WarrantSnapshotExData {
	if m != nil {
		return m.WarrantExData
	}
	return nil
}

func (m *Snapshot) GetOptionExData() *OptionSnapshotExData {
	if m != nil {
		return m.OptionExData
	}
	return nil
}

func (m *Snapshot) GetIndexExData() *IndexSnapshotExData {
	if m != nil {
		return m.IndexExData
	}
	return nil
}

func (m *Snapshot) GetPlateExData() *PlateSnapshotExData {
	if m != nil {
		return m.PlateExData
	}
	return nil
}

func (m *Snapshot) GetFutureExData() *FutureSnapshotExData {
	if m != nil {
		return m.FutureExData
	}
	return nil
}

type S2C struct {
	SnapshotList []*Snapshot `protobuf:"bytes,1,rep,name=snapshotList" json:"snapshotList,omitempty"`
}

func (m *S2C) Reset()         { *m = S2C{} }
func (m *S2C) String() string { return proto.CompactTextString(m) }
func (*S2C) ProtoMessage()    {}
func (*S2C) Descriptor() ([]byte, []int) {
	return fileDescriptor_39e6284ba27d5399, []int{9}
}
func (m *S2C) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C.Merge(m, src)
}
func (m *S2C) XXX_Size() int {
	return m.Size()
}
func (m *S2C) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C.DiscardUnknown(m)
}

var xxx_messageInfo_S2C proto.InternalMessageInfo

func (m *S2C) GetSnapshotList() []*Snapshot {
	if m != nil {
		return m.SnapshotList
	}
	return nil
}

type Request struct {
	C2S *C2S `protobuf:"bytes,1,req,name=c2s" json:"c2s,omitempty"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_39e6284ba27d5399, []int{10}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return m.Size()
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetC2S() *C2S {
	if m != nil {
		return m.C2S
	}
	return nil
}

type Response struct {
	RetType *int32 `protobuf:"varint,1,req,name=retType,def=-400" json:"retType,omitempty"`
	RetMsg  string `protobuf:"bytes,2,opt,name=retMsg" json:"retMsg"`
	ErrCode int32  `protobuf:"varint,3,opt,name=errCode" json:"errCode"`
	S2C     *S2C   `protobuf:"bytes,4,opt,name=s2c" json:"s2c,omitempty"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_39e6284ba27d5399, []int{11}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return m.Size()
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

const Default_Response_RetType int32 = -400

func (m *Response) GetRetType() int32 {
	if m != nil && m.RetType != nil {
		return *m.RetType
	}
	return Default_Response_RetType
}

func (m *Response) GetRetMsg() string {
	if m != nil {
		return m.RetMsg
	}
	return ""
}

func (m *Response) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *Response) GetS2C() *S2C {
	if m != nil {
		return m.S2C
	}
	return nil
}

func init() {
	proto.RegisterType((*C2S)(nil), "Qot_GetSecuritySnapshot.C2S")
	proto.RegisterType((*EquitySnapshotExData)(nil), "Qot_GetSecuritySnapshot.EquitySnapshotExData")
	proto.RegisterType((*WarrantSnapshotExData)(nil), "Qot_GetSecuritySnapshot.WarrantSnapshotExData")
	proto.RegisterType((*OptionSnapshotExData)(nil), "Qot_GetSecuritySnapshot.OptionSnapshotExData")
	proto.RegisterType((*IndexSnapshotExData)(nil), "Qot_GetSecuritySnapshot.IndexSnapshotExData")
	proto.RegisterType((*PlateSnapshotExData)(nil), "Qot_GetSecuritySnapshot.PlateSnapshotExData")
	proto.RegisterType((*FutureSnapshotExData)(nil), "Qot_GetSecuritySnapshot.FutureSnapshotExData")
	proto.RegisterType((*SnapshotBasicData)(nil), "Qot_GetSecuritySnapshot.SnapshotBasicData")
	proto.RegisterType((*Snapshot)(nil), "Qot_GetSecuritySnapshot.Snapshot")
	proto.RegisterType((*S2C)(nil), "Qot_GetSecuritySnapshot.S2C")
	proto.RegisterType((*Request)(nil), "Qot_GetSecuritySnapshot.Request")
	proto.RegisterType((*Response)(nil), "Qot_GetSecuritySnapshot.Response")
}

func init() { proto.RegisterFile("Qot_GetSecuritySnapshot.proto", fileDescriptor_39e6284ba27d5399) }

var fileDescriptor_39e6284ba27d5399 = []byte{
	// 1934 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x58, 0xcf, 0x6e, 0x1c, 0xc7,
	0xf1, 0xd6, 0x72, 0xb9, 0x22, 0xd9, 0x24, 0x45, 0x69, 0x44, 0x4b, 0xf3, 0xe3, 0x4f, 0xa6, 0xe9,
	0x8d, 0xe2, 0x10, 0x82, 0xbd, 0x11, 0x16, 0x4e, 0xe0, 0x04, 0x46, 0x62, 0x6a, 0x25, 0x25, 0x42,
	0x48, 0x9b, 0x9e, 0x25, 0x68, 0x28, 0x97, 0xa0, 0xb9, 0x5b, 0x5a, 0x36, 0x38, 0x3b, 0x3d, 0xea,
	0xee, 0x59, 0x8a, 0xb9, 0xe7, 0x1e, 0x20, 0x08, 0x90, 0x27, 0xc8, 0x43, 0x24, 0x2f, 0xe0, 0xa3,
	0x8f, 0x39, 0x05, 0x81, 0xf4, 0x06, 0x79, 0x82, 0xa0, 0xba, 0xe7, 0x4f, 0xf5, 0xec, 0x6c, 0xe8,
	0x5b, 0x6e, 0xbb, 0xdf, 0xf7, 0x55, 0x75, 0x75, 0x4f, 0x55, 0x75, 0xcd, 0xb0, 0xf7, 0xbf, 0x96,
	0xe6, 0x77, 0xbf, 0x02, 0x33, 0x84, 0x51, 0xa6, 0x84, 0xb9, 0x1a, 0x26, 0x3c, 0xd5, 0xe7, 0xd2,
	0xf4, 0x52, 0x25, 0x8d, 0x0c, 0xee, 0x2f, 0xa0, 0x77, 0x36, 0x06, 0x72, 0x3a, 0x95, 0x89, 0x93,
	0xed, 0xdc, 0x46, 0x19, 0x45, 0xba, 0xbf, 0x64, 0xed, 0x41, 0x7f, 0x18, 0x7c, 0xc6, 0x36, 0x74,
	0x6e, 0x7a, 0x28, 0xb4, 0x09, 0x5b, 0x7b, 0xed, 0xfd, 0xf5, 0xfe, 0x76, 0x8f, 0xe8, 0x0b, 0xd7,
	0x91, 0xa7, 0xec, 0xfe, 0xad, 0xc3, 0xb6, 0x9f, 0xbd, 0xce, 0xc8, 0x9a, 0xcf, 0xde, 0x3c, 0xe5,
	0x86, 0x07, 0xfb, 0x6c, 0x43, 0x68, 0x9d, 0xc1, 0x78, 0x78, 0xce, 0x15, 0xe8, 0xb0, 0xb5, 0xb7,
	0xb4, 0xdf, 0x7e, 0xb2, 0xfc, 0xed, 0x3f, 0x3f, 0xb8, 0x11, 0x79, 0x4c, 0xd0, 0x63, 0x5b, 0xee,
	0xff, 0x11, 0x57, 0x17, 0x60, 0x4e, 0x79, 0x1c, 0x2e, 0xed, 0x2d, 0xed, 0xb7, 0x72, 0x71, 0x9d,
	0x0c, 0xf6, 0xd8, 0x6a, 0x02, 0xe6, 0x40, 0x6b, 0x30, 0x61, 0x9b, 0x08, 0x4b, 0x34, 0xe8, 0xb2,
	0xb5, 0x04, 0xcc, 0xb1, 0x92, 0xaf, 0x84, 0x09, 0x97, 0x89, 0xa4, 0x82, 0x83, 0xc7, 0xec, 0x36,
	0x70, 0x95, 0x88, 0x64, 0xa2, 0x8f, 0x41, 0x69, 0x0c, 0x25, 0xec, 0x10, 0xe9, 0x1c, 0x1b, 0xf4,
	0xd9, 0x1d, 0x99, 0x19, 0x6d, 0x78, 0x32, 0x16, 0xc9, 0x24, 0xdf, 0xd6, 0x4d, 0xb2, 0xad, 0x79,
	0x3a, 0xf8, 0x8c, 0x6d, 0x13, 0xb0, 0xda, 0xe0, 0x0a, 0x59, 0xa9, 0x51, 0x81, 0xf1, 0x15, 0xfb,
	0x29, 0xe3, 0x5b, 0xa5, 0xf1, 0xd5, 0xd9, 0xe0, 0x01, 0xbb, 0x09, 0x57, 0x11, 0x37, 0x10, 0xae,
	0x11, 0x5d, 0x8e, 0x21, 0x9b, 0x82, 0x65, 0x19, 0x65, 0x1d, 0x66, 0xd9, 0x33, 0xcb, 0xae, 0x7b,
	0xac, 0xc5, 0xf0, 0x3c, 0x53, 0x38, 0x39, 0x39, 0xb2, 0x82, 0x0d, 0x7a, 0x9e, 0x25, 0x1c, 0x7c,
	0xc4, 0xd6, 0xc7, 0x62, 0x26, 0xc6, 0x90, 0x8c, 0x4f, 0x4e, 0x8e, 0xc2, 0xcd, 0xbd, 0x56, 0xa9,
	0xa2, 0x04, 0xee, 0xab, 0xf8, 0x1b, 0x71, 0x23, 0x24, 0x8a, 0x6f, 0x11, 0xf1, 0x1c, 0x4b, 0x3d,
	0x1f, 0x3e, 0x7f, 0x19, 0x6e, 0x35, 0x79, 0x3e, 0x7c, 0xfe, 0x92, 0x7a, 0x3e, 0x7c, 0xfe, 0xd2,
	0x9a, 0x87, 0xb7, 0x9b, 0x3c, 0x17, 0x6c, 0xf7, 0xcf, 0xab, 0xec, 0xbd, 0x6f, 0xb8, 0x52, 0x3c,
	0x31, 0xb5, 0xec, 0xfd, 0x98, 0xdd, 0x1a, 0xc9, 0x64, 0x06, 0x4a, 0x0b, 0x99, 0xd8, 0x6d, 0xb7,
	0xc8, 0xb6, 0x6b, 0x1c, 0x46, 0x78, 0xe9, 0xdc, 0x9c, 0x5c, 0xa5, 0x60, 0xb3, 0xb7, 0x53, 0x44,
	0x48, 0x08, 0xd4, 0x69, 0xa3, 0xc4, 0x05, 0x1c, 0x2b, 0x31, 0x02, 0x2f, 0x79, 0x29, 0x81, 0xb5,
	0x33, 0xe5, 0xc6, 0x16, 0xd9, 0x89, 0x98, 0x82, 0x4d, 0xe1, 0xb5, 0xa2, 0x76, 0x28, 0x83, 0x4a,
	0x3c, 0x57, 0xc5, 0xc7, 0x60, 0x95, 0x1d, 0xaa, 0xa4, 0x4c, 0xf0, 0x88, 0x75, 0xe4, 0x65, 0x02,
	0xca, 0x66, 0xec, 0xa2, 0xda, 0x76, 0x92, 0xe0, 0x11, 0xdb, 0x54, 0x30, 0x92, 0x33, 0x50, 0x57,
	0x2e, 0x52, 0x9a, 0xae, 0x3e, 0x85, 0x11, 0x68, 0xa3, 0x00, 0xcc, 0xa9, 0x8c, 0xb3, 0x69, 0x62,
	0x73, 0xb4, 0xac, 0x73, 0xca, 0xe0, 0xee, 0x6d, 0x29, 0xe7, 0xc2, 0x35, 0x22, 0xa4, 0x44, 0xf0,
	0x90, 0x31, 0x67, 0x37, 0x97, 0xad, 0x04, 0x0f, 0x76, 0x58, 0x67, 0x0c, 0xb1, 0xe1, 0x5e, 0xc2,
	0x3a, 0x08, 0x2b, 0x55, 0x4c, 0xd3, 0x58, 0xc0, 0xf8, 0x54, 0xc6, 0xdc, 0x88, 0x58, 0x98, 0x2b,
	0x2f, 0x6f, 0xe7, 0xe9, 0x60, 0x97, 0xad, 0xa4, 0x0a, 0xa6, 0x22, 0x9b, 0x86, 0x9b, 0x44, 0x59,
	0x80, 0xe8, 0x93, 0x9e, 0xbc, 0x36, 0x7c, 0x9a, 0x7a, 0x89, 0x3b, 0x4f, 0xa3, 0x0d, 0x7d, 0x06,
	0xce, 0x86, 0xe6, 0xef, 0x3c, 0x8d, 0xdd, 0x2d, 0x86, 0x19, 0x28, 0x3e, 0x01, 0x2f, 0x7b, 0x4b,
	0x34, 0x08, 0xd9, 0xb2, 0x48, 0x65, 0x1a, 0xde, 0x21, 0xac, 0x45, 0x30, 0x6b, 0xcf, 0x14, 0xf0,
	0x8b, 0x67, 0x33, 0x48, 0x8e, 0xa5, 0x48, 0x4c, 0x18, 0x10, 0x4d, 0x8d, 0xc3, 0xbe, 0x5b, 0xe5,
	0xb1, 0x7b, 0xce, 0x77, 0x89, 0xbc, 0x4e, 0x06, 0x9f, 0xb2, 0x20, 0xc5, 0x1f, 0x51, 0xfe, 0xfc,
	0x5d, 0x85, 0x6d, 0x13, 0x93, 0x06, 0x1e, 0x9f, 0x93, 0x1e, 0x49, 0x05, 0xe1, 0x7b, 0x44, 0xe8,
	0x20, 0xac, 0xd8, 0x2c, 0x4d, 0x41, 0x0d, 0x49, 0x51, 0xdc, 0xa3, 0x15, 0x5b, 0x67, 0xd1, 0x22,
	0x96, 0x97, 0xbe, 0xc5, 0x7d, 0x6a, 0x51, 0x67, 0x6d, 0x2e, 0x24, 0x87, 0x22, 0x71, 0x7f, 0x87,
	0x86, 0x9b, 0x4c, 0x87, 0xe1, 0x5e, 0xab, 0xac, 0xd0, 0x79, 0xba, 0xfb, 0xef, 0x9b, 0x6c, 0xfb,
	0xab, 0xd4, 0x08, 0x99, 0xd4, 0xda, 0x42, 0xc8, 0x96, 0x0d, 0x56, 0x78, 0x8b, 0x54, 0xb8, 0x45,
	0xaa, 0xf2, 0x5a, 0xba, 0xbe, 0xbc, 0x5c, 0x82, 0x8b, 0x0b, 0x57, 0xb2, 0x6d, 0x52, 0xb2, 0x04,
	0xaf, 0x37, 0x8b, 0xe5, 0xff, 0xd2, 0x2c, 0x46, 0x32, 0x31, 0x8a, 0x8f, 0xcc, 0x50, 0xfc, 0xde,
	0xb5, 0x80, 0x22, 0x36, 0x8f, 0x41, 0xa5, 0x4c, 0x21, 0x79, 0x91, 0x18, 0x50, 0xa0, 0x8d, 0xed,
	0x04, 0xa5, 0x92, 0x32, 0xcd, 0x05, 0xb4, 0xf2, 0xbd, 0x0b, 0x68, 0xb5, 0xa9, 0x80, 0xca, 0x82,
	0x5d, 0x9b, 0x2f, 0xd8, 0x1d, 0xd6, 0x99, 0xf0, 0xe9, 0x94, 0x7b, 0xd5, 0xee, 0x20, 0x3c, 0xf3,
	0x19, 0x4c, 0xfc, 0x3a, 0xb7, 0x08, 0x5a, 0x99, 0x73, 0x30, 0xdc, 0x2b, 0x6d, 0x07, 0x05, 0xf7,
	0x58, 0x5b, 0x9d, 0x4b, 0xaf, 0x94, 0x11, 0xc0, 0xa4, 0xaf, 0xce, 0x78, 0xbe, 0x88, 0xeb, 0xa4,
	0x1d, 0x4e, 0x92, 0x31, 0xbc, 0x71, 0xe9, 0x60, 0xdb, 0xfb, 0x16, 0x49, 0x9e, 0x3a, 0x89, 0xfa,
	0x04, 0xcc, 0x57, 0xf4, 0x98, 0x6f, 0x53, 0x7d, 0x8d, 0xc4, 0xa2, 0x82, 0x37, 0xa9, 0x50, 0x57,
	0x4f, 0xb9, 0x81, 0xa7, 0x02, 0xe7, 0x80, 0x11, 0xd8, 0xd2, 0x2e, 0x4c, 0x1a, 0x78, 0x1c, 0x2b,
	0x8a, 0x27, 0xfb, 0xa5, 0x9c, 0x8a, 0x84, 0xc7, 0xa7, 0x3c, 0xce, 0xc0, 0x2b, 0xf7, 0x46, 0x05,
	0xae, 0x67, 0x93, 0xf0, 0x50, 0x9a, 0xa3, 0x2c, 0x36, 0x02, 0x9f, 0xa2, 0xf2, 0xea, 0xbe, 0x81,
	0xc7, 0xc6, 0x22, 0xed, 0x1e, 0x0f, 0x14, 0x70, 0x7b, 0x08, 0xdb, 0x24, 0xc2, 0x1a, 0x87, 0x6b,
	0x14, 0x6b, 0x93, 0x35, 0x68, 0xfd, 0x37, 0xf0, 0xdd, 0x3f, 0xb4, 0xd8, 0xdd, 0x17, 0x78, 0x9a,
	0xb5, 0x9a, 0x7b, 0xc8, 0x98, 0xe2, 0x42, 0xc3, 0x40, 0x66, 0x89, 0xf1, 0x2a, 0x8f, 0xe0, 0x38,
	0xa2, 0xbc, 0xe2, 0x71, 0xec, 0x44, 0xf4, 0x02, 0xae, 0x60, 0xf4, 0x04, 0xaf, 0x33, 0x9e, 0x8b,
	0xda, 0xd4, 0x53, 0x85, 0xdb, 0x38, 0x8e, 0x63, 0x6e, 0xe0, 0x7f, 0x1c, 0xc7, 0x5f, 0x97, 0xd8,
	0xf6, 0xf3, 0xcc, 0x64, 0xaa, 0x1e, 0x48, 0x8f, 0x6d, 0xc5, 0x5c, 0x9b, 0x21, 0x18, 0x13, 0xe7,
	0xcd, 0x81, 0x0e, 0x27, 0x75, 0x12, 0x6f, 0x94, 0x54, 0x6a, 0x81, 0x8f, 0xc8, 0x8b, 0xa8, 0x44,
	0xf1, 0xf1, 0x16, 0xbf, 0x07, 0xe7, 0x3c, 0x99, 0x80, 0x17, 0x54, 0x8d, 0xc3, 0xe9, 0x00, 0x97,
	0xa8, 0x86, 0x0e, 0x3a, 0x9e, 0xf8, 0x14, 0xa6, 0x82, 0x07, 0xb8, 0x8a, 0xeb, 0xd0, 0x54, 0x98,
	0xe7, 0x31, 0x1e, 0xa1, 0x8f, 0xb8, 0x48, 0x06, 0x79, 0x9a, 0xd8, 0x56, 0xb5, 0x5a, 0xc4, 0xe3,
	0x73, 0xdd, 0x3f, 0x6d, 0xb2, 0x3b, 0xc5, 0x11, 0x3d, 0xe1, 0x5a, 0x8c, 0xec, 0x29, 0x3d, 0x66,
	0xab, 0xc5, 0x8b, 0x8a, 0x3d, 0x9e, 0x45, 0x3d, 0xb9, 0x54, 0x95, 0xcd, 0x7d, 0x69, 0xae, 0xb9,
	0x77, 0xd9, 0x9a, 0xd0, 0xc3, 0x4c, 0xa7, 0x90, 0x8c, 0xed, 0xd1, 0x14, 0xa1, 0x54, 0xb0, 0xbd,
	0xb7, 0x85, 0x36, 0x73, 0x07, 0x52, 0xa2, 0xd8, 0x20, 0x63, 0x39, 0xdf, 0xa3, 0x0b, 0x10, 0x1b,
	0xbe, 0xbd, 0x3f, 0x87, 0xa9, 0x02, 0x3e, 0xb6, 0x5b, 0x2e, 0x1b, 0x3e, 0x21, 0x30, 0x7d, 0xb2,
	0x74, 0xcc, 0x8d, 0x3b, 0xfc, 0x15, 0x7a, 0x7d, 0x54, 0x38, 0xc6, 0x7c, 0x2e, 0x26, 0xe7, 0x2e,
	0x3f, 0x68, 0x43, 0xae, 0x60, 0xd4, 0x60, 0xdb, 0x77, 0x1a, 0xda, 0x96, 0x2b, 0xd8, 0xee, 0x4b,
	0x5e, 0x3a, 0x09, 0xed, 0xce, 0x25, 0x8a, 0x4f, 0x0b, 0x9f, 0xe1, 0x20, 0x96, 0x3a, 0x4f, 0x47,
	0xda, 0xaa, 0x6b, 0x1c, 0xfa, 0x1b, 0x65, 0xca, 0xe9, 0x68, 0xdf, 0x2e, 0x51, 0x7c, 0x17, 0x99,
	0xe1, 0x24, 0x08, 0xb6, 0x7b, 0x17, 0x23, 0x62, 0x8e, 0xa1, 0xbd, 0xc9, 0x54, 0x82, 0x13, 0x46,
	0x78, 0x8b, 0xda, 0x17, 0x28, 0x5e, 0x73, 0xc5, 0x6f, 0x3b, 0x41, 0x6e, 0x11, 0x95, 0xc7, 0xd8,
	0x4c, 0xce, 0x9f, 0x8e, 0x4b, 0x4c, 0x3a, 0x70, 0xf9, 0x14, 0x56, 0x5d, 0x75, 0xba, 0x4e, 0x4d,
	0x07, 0xb0, 0x3a, 0x89, 0x71, 0x72, 0x7d, 0xe1, 0xf6, 0x49, 0xdb, 0x72, 0x89, 0xa2, 0xe2, 0x4c,
	0x8c, 0xe7, 0x07, 0xaf, 0x12, 0xc5, 0x93, 0xe0, 0xfa, 0xe2, 0x54, 0xc6, 0xb6, 0xdd, 0x96, 0x27,
	0xe1, 0x30, 0x64, 0xcf, 0x04, 0xde, 0xc0, 0xb6, 0xb5, 0x96, 0xac, 0xc3, 0xdc, 0x9b, 0x01, 0x3f,
	0x8b, 0xe1, 0x88, 0xab, 0x89, 0x48, 0xec, 0x5c, 0xb5, 0x5a, 0xbd, 0x19, 0x54, 0x0c, 0x9e, 0xc2,
	0x54, 0x2a, 0x33, 0xe1, 0x13, 0x70, 0x23, 0x1d, 0x1d, 0xa8, 0x7c, 0x2a, 0xf8, 0x9c, 0xdd, 0x8b,
	0xa5, 0x7d, 0x4d, 0x9d, 0x88, 0xe4, 0x45, 0x22, 0x8c, 0xe0, 0xb1, 0x33, 0x0a, 0x89, 0xd1, 0x02,
	0x0d, 0x9e, 0xa1, 0x5b, 0x79, 0x78, 0x2e, 0x95, 0x19, 0x42, 0x1c, 0x87, 0xff, 0x47, 0xc2, 0xaa,
	0x93, 0x18, 0x99, 0x2e, 0xfe, 0xd8, 0x47, 0xb9, 0x43, 0x23, 0xf3, 0x28, 0xbc, 0x12, 0x2d, 0x70,
	0x30, 0xe3, 0x22, 0x46, 0x37, 0xa7, 0x2e, 0x87, 0xfe, 0x9f, 0x9c, 0x4d, 0xa3, 0x22, 0xf8, 0x05,
	0xbb, 0x6f, 0xf1, 0x86, 0x4d, 0x3d, 0x20, 0xeb, 0x2d, 0x12, 0x61, 0x15, 0x71, 0x9c, 0x86, 0x4c,
	0x36, 0x86, 0xf0, 0x7d, 0x62, 0x51, 0xc1, 0x36, 0x1b, 0x66, 0x13, 0xf7, 0xac, 0x77, 0xbd, 0x6c,
	0xc8, 0x51, 0xac, 0xfe, 0x33, 0x31, 0x3e, 0xd0, 0x17, 0x6e, 0xe5, 0x0f, 0xe8, 0x5b, 0x2e, 0x21,
	0x50, 0xe7, 0x2a, 0xc1, 0xe9, 0xf6, 0xa8, 0x8e, 0x10, 0xc1, 0x4f, 0xd9, 0x5d, 0x2c, 0x74, 0xd0,
	0xe6, 0x27, 0xfd, 0x6f, 0x00, 0x2e, 0xb4, 0x5b, 0xfc, 0x43, 0xa2, 0x6f, 0x12, 0xd8, 0x8e, 0x2d,
	0x2f, 0xeb, 0x66, 0x5d, 0xaf, 0x63, 0xcf, 0xf1, 0x64, 0xb5, 0x5f, 0x0b, 0x6d, 0x64, 0xf1, 0xde,
	0xf8, 0x83, 0x86, 0xd5, 0xa8, 0xa0, 0x5a, 0xcd, 0x33, 0x7b, 0x38, 0xbf, 0x9a, 0x67, 0xf5, 0x39,
	0x5b, 0x4b, 0x15, 0xb8, 0x6f, 0x25, 0xe1, 0x0f, 0xf7, 0x5a, 0xfb, 0xeb, 0xfd, 0x5d, 0xda, 0xdc,
	0x8f, 0x15, 0x1c, 0xbc, 0x32, 0xa0, 0x9c, 0x02, 0xaf, 0x83, 0xa8, 0x32, 0x08, 0xbe, 0x60, 0xeb,
	0xbc, 0x62, 0xc3, 0x8f, 0xbe, 0x97, 0x3d, 0x35, 0xc1, 0x27, 0xae, 0x61, 0x94, 0xbf, 0x4b, 0xfc,
	0x88, 0x4c, 0x42, 0x15, 0xdc, 0xfd, 0xfb, 0x32, 0x5b, 0x2d, 0x6e, 0xa5, 0xe0, 0x0b, 0xd6, 0x39,
	0xc3, 0x9b, 0x29, 0xbf, 0x89, 0x1e, 0xf5, 0x16, 0x7d, 0xce, 0x9b, 0xbb, 0xc7, 0x22, 0x67, 0x18,
	0x7c, 0xcd, 0x36, 0xc0, 0x7e, 0x66, 0x73, 0x43, 0x40, 0xb8, 0x64, 0xa3, 0xfe, 0x64, 0xa1, 0xa3,
	0xa6, 0x6f, 0x72, 0x91, 0xe7, 0x22, 0x38, 0x61, 0x9b, 0xf9, 0xc7, 0x89, 0xdc, 0x67, 0xdb, 0xfa,
	0xec, 0x2d, 0xf4, 0xd9, 0xf8, 0xa9, 0x24, 0xf2, 0x9d, 0x60, 0xa0, 0x6e, 0x1c, 0xcc, 0x9d, 0x2e,
	0x5f, 0x13, 0x68, 0xd3, 0x7b, 0x56, 0xe4, 0xb9, 0x08, 0xbe, 0x64, 0xeb, 0x76, 0xcc, 0xce, 0x3d,
	0x76, 0xac, 0xc7, 0x8f, 0x17, 0x7a, 0x6c, 0x18, 0x22, 0x23, 0xea, 0x00, 0xfd, 0xa5, 0x38, 0xe0,
	0xe5, 0xfe, 0x6e, 0x5e, 0xe3, 0xaf, 0x61, 0x18, 0x8c, 0xa8, 0x03, 0xdc, 0xf2, 0x2b, 0x3b, 0xa8,
	0xe5, 0x0e, 0x57, 0xae, 0xd9, 0x72, 0xd3, 0x54, 0x17, 0x79, 0x2e, 0xba, 0x87, 0xac, 0x3d, 0xec,
	0x0f, 0x82, 0x67, 0x6c, 0x43, 0xe7, 0x32, 0xf2, 0x5d, 0xf6, 0xc3, 0x6b, 0xd3, 0x27, 0xf2, 0xcc,
	0xba, 0x3f, 0x63, 0x2b, 0x11, 0xbc, 0xce, 0xf0, 0x7d, 0xa3, 0xc7, 0xda, 0xa3, 0xbe, 0xce, 0xf3,
	0xf0, 0xc1, 0x42, 0x47, 0x83, 0xfe, 0x30, 0x42, 0x61, 0xf7, 0x2f, 0x2d, 0xb6, 0x1a, 0x81, 0x4e,
	0x65, 0xa2, 0xed, 0x04, 0xa3, 0xc0, 0x7d, 0xe3, 0xb2, 0xf3, 0xef, 0xcf, 0x97, 0x3f, 0xf9, 0xf4,
	0xf1, 0xe3, 0xa8, 0x00, 0xf1, 0x46, 0x52, 0x60, 0x8e, 0xf4, 0xc4, 0xa6, 0x67, 0x31, 0x95, 0xe4,
	0x18, 0x5a, 0x83, 0x52, 0x03, 0x39, 0x06, 0x9b, 0x69, 0xe5, 0xfc, 0x93, 0x83, 0x18, 0x9a, 0xee,
	0x8f, 0xf2, 0x84, 0x59, 0x1c, 0xda, 0xb0, 0x3f, 0x88, 0x50, 0xf8, 0xe4, 0x37, 0xdf, 0xbe, 0xdd,
	0x6d, 0x7d, 0xf7, 0x76, 0xb7, 0xf5, 0xaf, 0xb7, 0xbb, 0xad, 0x3f, 0xbe, 0xdb, 0xbd, 0xf1, 0xdd,
	0xbb, 0xdd, 0x1b, 0xff, 0x78, 0xb7, 0x7b, 0x83, 0xdd, 0x1d, 0xc9, 0x69, 0x0f, 0xcf, 0xb3, 0x87,
	0x73, 0x0c, 0x4f, 0x45, 0x2f, 0x3d, 0xfb, 0xed, 0x83, 0xf4, 0x6c, 0x22, 0x7f, 0xbc, 0xc0, 0xeb,
	0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x21, 0xe2, 0xbb, 0x9c, 0x61, 0x17, 0x00, 0x00,
}

func (m *C2S) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SecurityList) > 0 {
		for iNdEx := len(m.SecurityList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SecurityList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQot_GetSecuritySnapshot(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *EquitySnapshotExData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EquitySnapshotExData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EquitySnapshotExData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.DividendLFYRatio))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x81
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.DividendLFY))))
	i--
	dAtA[i] = 0x79
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.DividendRatioTTM))))
	i--
	dAtA[i] = 0x71
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.DividendTTM))))
	i--
	dAtA[i] = 0x69
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.PeTTMRate))))
	i--
	dAtA[i] = 0x61
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.PbRate))))
	i--
	dAtA[i] = 0x59
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.PeRate))))
	i--
	dAtA[i] = 0x51
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.EyRate))))
	i--
	dAtA[i] = 0x49
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.NetAssetPershare))))
	i--
	dAtA[i] = 0x41
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.OutstandingMarketVal))))
	i--
	dAtA[i] = 0x39
	i = encodeVarintQot_GetSecuritySnapshot(dAtA, i, uint64(m.OutstandingShares))
	i--
	dAtA[i] = 0x30
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.EarningsPershare))))
	i--
	dAtA[i] = 0x29
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.NetProfit))))
	i--
	dAtA[i] = 0x21
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.NetAsset))))
	i--
	dAtA[i] = 0x19
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.IssuedMarketVal))))
	i--
	dAtA[i] = 0x11
	i = encodeVarintQot_GetSecuritySnapshot(dAtA, i, uint64(m.IssuedShares))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *WarrantSnapshotExData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WarrantSnapshotExData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WarrantSnapshotExData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintQot_GetSecuritySnapshot(dAtA, i, uint64(m.InLinePriceStatus))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xc0
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.LowerStrikePrice))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xb9
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.UpperStrikePrice))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xb1
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Score))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa9
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.PriceRecoveryRatio))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa1
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ConversionPrice))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x99
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.BreakEvenPoint))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x91
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Ipop))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x89
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Leverage))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x81
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.EndTradeTimestamp))))
	i--
	dAtA[i] = 0x79
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MaturityTimestamp))))
	i--
	dAtA[i] = 0x71
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Premium))))
	i--
	dAtA[i] = 0x69
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ImpliedVolatility))))
	i--
	dAtA[i] = 0x61
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Delta))))
	i--
	dAtA[i] = 0x59
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.StreetRate))))
	i--
	dAtA[i] = 0x51
	i = encodeVarintQot_GetSecuritySnapshot(dAtA, i, uint64(m.IssueVolumn))
	i--
	dAtA[i] = 0x48
	i = encodeVarintQot_GetSecuritySnapshot(dAtA, i, uint64(m.StreetVolumn))
	i--
	dAtA[i] = 0x40
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.RecoveryPrice))))
	i--
	dAtA[i] = 0x39
	if m.Owner == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("owner")
	} else {
		{
			size, err := m.Owner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQot_GetSecuritySnapshot(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	i -= len(m.EndTradeTime)
	copy(dAtA[i:], m.EndTradeTime)
	i = encodeVarintQot_GetSecuritySnapshot(dAtA, i, uint64(len(m.EndTradeTime)))
	i--
	dAtA[i] = 0x2a
	i -= len(m.MaturityTime)
	copy(dAtA[i:], m.MaturityTime)
	i = encodeVarintQot_GetSecuritySnapshot(dAtA, i, uint64(len(m.MaturityTime)))
	i--
	dAtA[i] = 0x22
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.StrikePrice))))
	i--
	dAtA[i] = 0x19
	i = encodeVarintQot_GetSecuritySnapshot(dAtA, i, uint64(m.WarrantType))
	i--
	dAtA[i] = 0x10
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ConversionRate))))
	i--
	dAtA[i] = 0x9
	return len(dAtA) - i, nil
}

func (m *OptionSnapshotExData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OptionSnapshotExData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OptionSnapshotExData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ContractMultiplier))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa9
	i = encodeVarintQot_GetSecuritySnapshot(dAtA, i, uint64(m.OptionAreaType))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa0
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.OwnerLotMultiplier))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x99
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ContractNominalValue))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x91
	i = encodeVarintQot_GetSecuritySnapshot(dAtA, i, uint64(m.ExpiryDateDistance))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x88
	i = encodeVarintQot_GetSecuritySnapshot(dAtA, i, uint64(m.NetOpenInterest))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x80
	i = encodeVarintQot_GetSecuritySnapshot(dAtA, i, uint64(m.IndexOptionType))
	i--
	dAtA[i] = 0x78
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.StrikeTimestamp))))
	i--
	dAtA[i] = 0x71
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Rho))))
	i--
	dAtA[i] = 0x69
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Theta))))
	i--
	dAtA[i] = 0x61
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Vega))))
	i--
	dAtA[i] = 0x59
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Gamma))))
	i--
	dAtA[i] = 0x51
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Delta))))
	i--
	dAtA[i] = 0x49
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Premium))))
	i--
	dAtA[i] = 0x41
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ImpliedVolatility))))
	i--
	dAtA[i] = 0x39
	i = encodeVarintQot_GetSecuritySnapshot(dAtA, i, uint64(m.OpenInterest))
	i--
	dAtA[i] = 0x30
	i = encodeVarintQot_GetSecuritySnapshot(dAtA, i, uint64(m.ContractSize))
	i--
	dAtA[i] = 0x28
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.StrikePrice))))
	i--
	dAtA[i] = 0x21
	i -= len(m.StrikeTime)
	copy(dAtA[i:], m.StrikeTime)
	i = encodeVarintQot_GetSecuritySnapshot(dAtA, i, uint64(len(m.StrikeTime)))
	i--
	dAtA[i] = 0x1a
	if m.Owner == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("owner")
	} else {
		{
			size, err := m.Owner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQot_GetSecuritySnapshot(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	i = encodeVarintQot_GetSecuritySnapshot(dAtA, i, uint64(m.Type))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *IndexSnapshotExData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexSnapshotExData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IndexSnapshotExData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintQot_GetSecuritySnapshot(dAtA, i, uint64(m.EqualCount))
	i--
	dAtA[i] = 0x18
	i = encodeVarintQot_GetSecuritySnapshot(dAtA, i, uint64(m.FallCount))
	i--
	dAtA[i] = 0x10
	i = encodeVarintQot_GetSecuritySnapshot(dAtA, i, uint64(m.RaiseCount))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *PlateSnapshotExData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlateSnapshotExData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlateSnapshotExData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintQot_GetSecuritySnapshot(dAtA, i, uint64(m.EqualCount))
	i--
	dAtA[i] = 0x18
	i = encodeVarintQot_GetSecuritySnapshot(dAtA, i, uint64(m.FallCount))
	i--
	dAtA[i] = 0x10
	i = encodeVarintQot_GetSecuritySnapshot(dAtA, i, uint64(m.RaiseCount))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *FutureSnapshotExData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FutureSnapshotExData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FutureSnapshotExData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.IsMainContract {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x30
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.LastTradeTimestamp))))
	i--
	dAtA[i] = 0x29
	i -= len(m.LastTradeTime)
	copy(dAtA[i:], m.LastTradeTime)
	i = encodeVarintQot_GetSecuritySnapshot(dAtA, i, uint64(len(m.LastTradeTime)))
	i--
	dAtA[i] = 0x22
	i = encodeVarintQot_GetSecuritySnapshot(dAtA, i, uint64(m.PositionChange))
	i--
	dAtA[i] = 0x18
	i = encodeVarintQot_GetSecuritySnapshot(dAtA, i, uint64(m.Position))
	i--
	dAtA[i] = 0x10
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.LastSettlePrice))))
	i--
	dAtA[i] = 0x9
	return len(dAtA) - i, nil
}

func (m *SnapshotBasicData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnapshotBasicData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SnapshotBasicData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintQot_GetSecuritySnapshot(dAtA, i, uint64(m.SecStatus))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xb8
	if m.AfterMarket != nil {
		{
			size, err := m.AfterMarket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQot_GetSecuritySnapshot(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb2
	}
	if m.PreMarket != nil {
		{
			size, err := m.PreMarket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQot_GetSecuritySnapshot(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xaa
	}
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.LowestHistoryPrice))))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xa1
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.HighestHistoryPrice))))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0x99
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Lowest52WeeksPrice))))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0x91
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Highest52WeeksPrice))))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0x89
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.VolumeRatio))))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0x81
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.BidAskRatio))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xf9
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.AvgPrice))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xf1
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Amplitude))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xe9
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ShortMarginInitialRatio))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xe1
	i = encodeVarintQot_GetSecuritySnapshot(dAtA, i, uint64(m.ShortAvailableVolume))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xd8
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ShortSellRate))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xd1
	i--
	if m.EnableShortSell {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xc8
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.LongMarginInitialRatio))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xc1
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MortgageRatio))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xb9
	i--
	if m.EnableMargin {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xb0
	i = encodeVarintQot_GetSecuritySnapshot(dAtA, i, uint64(m.BidVol))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa8
	i = encodeVarintQot_GetSecuritySnapshot(dAtA, i, uint64(m.AskVol))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa0
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.BidPrice))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x99
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.AskPrice))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x91
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.UpdateTimestamp))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x89
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ListTimestamp))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x81
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.TurnoverRate))))
	i--
	dAtA[i] = 0x79
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Turnover))))
	i--
	dAtA[i] = 0x71
	i = encodeVarintQot_GetSecuritySnapshot(dAtA, i, uint64(m.Volume))
	i--
	dAtA[i] = 0x68
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.CurPrice))))
	i--
	dAtA[i] = 0x61
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.LastClosePrice))))
	i--
	dAtA[i] = 0x59
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.LowPrice))))
	i--
	dAtA[i] = 0x51
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.OpenPrice))))
	i--
	dAtA[i] = 0x49
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.HighPrice))))
	i--
	dAtA[i] = 0x41
	i -= len(m.UpdateTime)
	copy(dAtA[i:], m.UpdateTime)
	i = encodeVarintQot_GetSecuritySnapshot(dAtA, i, uint64(len(m.UpdateTime)))
	i--
	dAtA[i] = 0x3a
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.PriceSpread))))
	i--
	dAtA[i] = 0x31
	i = encodeVarintQot_GetSecuritySnapshot(dAtA, i, uint64(m.LotSize))
	i--
	dAtA[i] = 0x28
	i -= len(m.ListTime)
	copy(dAtA[i:], m.ListTime)
	i = encodeVarintQot_GetSecuritySnapshot(dAtA, i, uint64(len(m.ListTime)))
	i--
	dAtA[i] = 0x22
	i--
	if m.IsSuspend {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x18
	i = encodeVarintQot_GetSecuritySnapshot(dAtA, i, uint64(m.Type))
	i--
	dAtA[i] = 0x10
	if m.Security == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("security")
	} else {
		{
			size, err := m.Security.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQot_GetSecuritySnapshot(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Snapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Snapshot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Snapshot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FutureExData != nil {
		{
			size, err := m.FutureExData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQot_GetSecuritySnapshot(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.PlateExData != nil {
		{
			size, err := m.PlateExData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQot_GetSecuritySnapshot(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.IndexExData != nil {
		{
			size, err := m.IndexExData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQot_GetSecuritySnapshot(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.OptionExData != nil {
		{
			size, err := m.OptionExData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQot_GetSecuritySnapshot(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.WarrantExData != nil {
		{
			size, err := m.WarrantExData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQot_GetSecuritySnapshot(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.EquityExData != nil {
		{
			size, err := m.EquityExData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQot_GetSecuritySnapshot(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Basic == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("basic")
	} else {
		{
			size, err := m.Basic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQot_GetSecuritySnapshot(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *S2C) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SnapshotList) > 0 {
		for iNdEx := len(m.SnapshotList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SnapshotList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQot_GetSecuritySnapshot(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.C2S == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("c2s")
	} else {
		{
			size, err := m.C2S.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQot_GetSecuritySnapshot(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.S2C != nil {
		{
			size, err := m.S2C.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQot_GetSecuritySnapshot(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	i = encodeVarintQot_GetSecuritySnapshot(dAtA, i, uint64(m.ErrCode))
	i--
	dAtA[i] = 0x18
	i -= len(m.RetMsg)
	copy(dAtA[i:], m.RetMsg)
	i = encodeVarintQot_GetSecuritySnapshot(dAtA, i, uint64(len(m.RetMsg)))
	i--
	dAtA[i] = 0x12
	if m.RetType == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("retType")
	} else {
		i = encodeVarintQot_GetSecuritySnapshot(dAtA, i, uint64(*m.RetType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQot_GetSecuritySnapshot(dAtA []byte, offset int, v uint64) int {
	offset -= sovQot_GetSecuritySnapshot(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *C2S) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SecurityList) > 0 {
		for _, e := range m.SecurityList {
			l = e.Size()
			n += 1 + l + sovQot_GetSecuritySnapshot(uint64(l))
		}
	}
	return n
}

func (m *EquitySnapshotExData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovQot_GetSecuritySnapshot(uint64(m.IssuedShares))
	n += 9
	n += 9
	n += 9
	n += 9
	n += 1 + sovQot_GetSecuritySnapshot(uint64(m.OutstandingShares))
	n += 9
	n += 9
	n += 9
	n += 9
	n += 9
	n += 9
	n += 9
	n += 9
	n += 9
	n += 10
	return n
}

func (m *WarrantSnapshotExData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 9
	n += 1 + sovQot_GetSecuritySnapshot(uint64(m.WarrantType))
	n += 9
	l = len(m.MaturityTime)
	n += 1 + l + sovQot_GetSecuritySnapshot(uint64(l))
	l = len(m.EndTradeTime)
	n += 1 + l + sovQot_GetSecuritySnapshot(uint64(l))
	if m.Owner != nil {
		l = m.Owner.Size()
		n += 1 + l + sovQot_GetSecuritySnapshot(uint64(l))
	}
	n += 9
	n += 1 + sovQot_GetSecuritySnapshot(uint64(m.StreetVolumn))
	n += 1 + sovQot_GetSecuritySnapshot(uint64(m.IssueVolumn))
	n += 9
	n += 9
	n += 9
	n += 9
	n += 9
	n += 9
	n += 10
	n += 10
	n += 10
	n += 10
	n += 10
	n += 10
	n += 10
	n += 10
	n += 2 + sovQot_GetSecuritySnapshot(uint64(m.InLinePriceStatus))
	return n
}

func (m *OptionSnapshotExData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovQot_GetSecuritySnapshot(uint64(m.Type))
	if m.Owner != nil {
		l = m.Owner.Size()
		n += 1 + l + sovQot_GetSecuritySnapshot(uint64(l))
	}
	l = len(m.StrikeTime)
	n += 1 + l + sovQot_GetSecuritySnapshot(uint64(l))
	n += 9
	n += 1 + sovQot_GetSecuritySnapshot(uint64(m.ContractSize))
	n += 1 + sovQot_GetSecuritySnapshot(uint64(m.OpenInterest))
	n += 9
	n += 9
	n += 9
	n += 9
	n += 9
	n += 9
	n += 9
	n += 9
	n += 1 + sovQot_GetSecuritySnapshot(uint64(m.IndexOptionType))
	n += 2 + sovQot_GetSecuritySnapshot(uint64(m.NetOpenInterest))
	n += 2 + sovQot_GetSecuritySnapshot(uint64(m.ExpiryDateDistance))
	n += 10
	n += 10
	n += 2 + sovQot_GetSecuritySnapshot(uint64(m.OptionAreaType))
	n += 10
	return n
}

func (m *IndexSnapshotExData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovQot_GetSecuritySnapshot(uint64(m.RaiseCount))
	n += 1 + sovQot_GetSecuritySnapshot(uint64(m.FallCount))
	n += 1 + sovQot_GetSecuritySnapshot(uint64(m.EqualCount))
	return n
}

func (m *PlateSnapshotExData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovQot_GetSecuritySnapshot(uint64(m.RaiseCount))
	n += 1 + sovQot_GetSecuritySnapshot(uint64(m.FallCount))
	n += 1 + sovQot_GetSecuritySnapshot(uint64(m.EqualCount))
	return n
}

func (m *FutureSnapshotExData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 9
	n += 1 + sovQot_GetSecuritySnapshot(uint64(m.Position))
	n += 1 + sovQot_GetSecuritySnapshot(uint64(m.PositionChange))
	l = len(m.LastTradeTime)
	n += 1 + l + sovQot_GetSecuritySnapshot(uint64(l))
	n += 9
	n += 2
	return n
}

func (m *SnapshotBasicData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Security != nil {
		l = m.Security.Size()
		n += 1 + l + sovQot_GetSecuritySnapshot(uint64(l))
	}
	n += 1 + sovQot_GetSecuritySnapshot(uint64(m.Type))
	n += 2
	l = len(m.ListTime)
	n += 1 + l + sovQot_GetSecuritySnapshot(uint64(l))
	n += 1 + sovQot_GetSecuritySnapshot(uint64(m.LotSize))
	n += 9
	l = len(m.UpdateTime)
	n += 1 + l + sovQot_GetSecuritySnapshot(uint64(l))
	n += 9
	n += 9
	n += 9
	n += 9
	n += 9
	n += 1 + sovQot_GetSecuritySnapshot(uint64(m.Volume))
	n += 9
	n += 9
	n += 10
	n += 10
	n += 10
	n += 10
	n += 2 + sovQot_GetSecuritySnapshot(uint64(m.AskVol))
	n += 2 + sovQot_GetSecuritySnapshot(uint64(m.BidVol))
	n += 3
	n += 10
	n += 10
	n += 3
	n += 10
	n += 2 + sovQot_GetSecuritySnapshot(uint64(m.ShortAvailableVolume))
	n += 10
	n += 10
	n += 10
	n += 10
	n += 10
	n += 10
	n += 10
	n += 10
	n += 10
	if m.PreMarket != nil {
		l = m.PreMarket.Size()
		n += 2 + l + sovQot_GetSecuritySnapshot(uint64(l))
	}
	if m.AfterMarket != nil {
		l = m.AfterMarket.Size()
		n += 2 + l + sovQot_GetSecuritySnapshot(uint64(l))
	}
	n += 2 + sovQot_GetSecuritySnapshot(uint64(m.SecStatus))
	return n
}

func (m *Snapshot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Basic != nil {
		l = m.Basic.Size()
		n += 1 + l + sovQot_GetSecuritySnapshot(uint64(l))
	}
	if m.EquityExData != nil {
		l = m.EquityExData.Size()
		n += 1 + l + sovQot_GetSecuritySnapshot(uint64(l))
	}
	if m.WarrantExData != nil {
		l = m.WarrantExData.Size()
		n += 1 + l + sovQot_GetSecuritySnapshot(uint64(l))
	}
	if m.OptionExData != nil {
		l = m.OptionExData.Size()
		n += 1 + l + sovQot_GetSecuritySnapshot(uint64(l))
	}
	if m.IndexExData != nil {
		l = m.IndexExData.Size()
		n += 1 + l + sovQot_GetSecuritySnapshot(uint64(l))
	}
	if m.PlateExData != nil {
		l = m.PlateExData.Size()
		n += 1 + l + sovQot_GetSecuritySnapshot(uint64(l))
	}
	if m.FutureExData != nil {
		l = m.FutureExData.Size()
		n += 1 + l + sovQot_GetSecuritySnapshot(uint64(l))
	}
	return n
}

func (m *S2C) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SnapshotList) > 0 {
		for _, e := range m.SnapshotList {
			l = e.Size()
			n += 1 + l + sovQot_GetSecuritySnapshot(uint64(l))
		}
	}
	return n
}

func (m *Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.C2S != nil {
		l = m.C2S.Size()
		n += 1 + l + sovQot_GetSecuritySnapshot(uint64(l))
	}
	return n
}

func (m *Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetType != nil {
		n += 1 + sovQot_GetSecuritySnapshot(uint64(*m.RetType))
	}
	l = len(m.RetMsg)
	n += 1 + l + sovQot_GetSecuritySnapshot(uint64(l))
	n += 1 + sovQot_GetSecuritySnapshot(uint64(m.ErrCode))
	if m.S2C != nil {
		l = m.S2C.Size()
		n += 1 + l + sovQot_GetSecuritySnapshot(uint64(l))
	}
	return n
}

func sovQot_GetSecuritySnapshot(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQot_GetSecuritySnapshot(x uint64) (n int) {
	return sovQot_GetSecuritySnapshot(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *C2S) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_GetSecuritySnapshot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetSecuritySnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityList = append(m.SecurityList, &Qot_Common.Security{})
			if err := m.SecurityList[len(m.SecurityList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQot_GetSecuritySnapshot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EquitySnapshotExData) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_GetSecuritySnapshot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EquitySnapshotExData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EquitySnapshotExData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuedShares", wireType)
			}
			m.IssuedShares = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetSecuritySnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IssuedShares |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuedMarketVal", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.IssuedMarketVal = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetAsset", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.NetAsset = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetProfit", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.NetProfit = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field EarningsPershare", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.EarningsPershare = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutstandingShares", wireType)
			}
			m.OutstandingShares = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetSecuritySnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutstandingShares |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000020)
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutstandingMarketVal", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.OutstandingMarketVal = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000040)
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetAssetPershare", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.NetAssetPershare = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000080)
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field EyRate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.EyRate = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000100)
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeRate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.PeRate = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000200)
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PbRate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.PbRate = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000400)
		case 12:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeTTMRate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.PeTTMRate = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000800)
		case 13:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DividendTTM", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.DividendTTM = float64(math.Float64frombits(v))
		case 14:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DividendRatioTTM", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.DividendRatioTTM = float64(math.Float64frombits(v))
		case 15:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DividendLFY", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.DividendLFY = float64(math.Float64frombits(v))
		case 16:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DividendLFYRatio", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.DividendLFYRatio = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipQot_GetSecuritySnapshot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("issuedShares")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("issuedMarketVal")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("netAsset")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("netProfit")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("earningsPershare")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("outstandingShares")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("outstandingMarketVal")
	}
	if hasFields[0]&uint64(0x00000080) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("netAssetPershare")
	}
	if hasFields[0]&uint64(0x00000100) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("eyRate")
	}
	if hasFields[0]&uint64(0x00000200) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("peRate")
	}
	if hasFields[0]&uint64(0x00000400) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("pbRate")
	}
	if hasFields[0]&uint64(0x00000800) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("peTTMRate")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WarrantSnapshotExData) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_GetSecuritySnapshot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WarrantSnapshotExData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WarrantSnapshotExData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConversionRate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ConversionRate = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WarrantType", wireType)
			}
			m.WarrantType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetSecuritySnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WarrantType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrikePrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.StrikePrice = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaturityTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetSecuritySnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaturityTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTradeTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetSecuritySnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndTradeTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetSecuritySnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Owner == nil {
				m.Owner = &Qot_Common.Security{}
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000020)
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecoveryPrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.RecoveryPrice = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000040)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreetVolumn", wireType)
			}
			m.StreetVolumn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetSecuritySnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreetVolumn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000080)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssueVolumn", wireType)
			}
			m.IssueVolumn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetSecuritySnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IssueVolumn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000100)
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreetRate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.StreetRate = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000200)
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delta", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Delta = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000400)
		case 12:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImpliedVolatility", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ImpliedVolatility = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000800)
		case 13:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Premium", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Premium = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00001000)
		case 14:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaturityTimestamp", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MaturityTimestamp = float64(math.Float64frombits(v))
		case 15:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTradeTimestamp", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.EndTradeTimestamp = float64(math.Float64frombits(v))
		case 16:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leverage", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Leverage = float64(math.Float64frombits(v))
		case 17:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipop", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Ipop = float64(math.Float64frombits(v))
		case 18:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field BreakEvenPoint", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.BreakEvenPoint = float64(math.Float64frombits(v))
		case 19:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConversionPrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ConversionPrice = float64(math.Float64frombits(v))
		case 20:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceRecoveryRatio", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.PriceRecoveryRatio = float64(math.Float64frombits(v))
		case 21:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Score = float64(math.Float64frombits(v))
		case 22:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpperStrikePrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.UpperStrikePrice = float64(math.Float64frombits(v))
		case 23:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowerStrikePrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.LowerStrikePrice = float64(math.Float64frombits(v))
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InLinePriceStatus", wireType)
			}
			m.InLinePriceStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetSecuritySnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InLinePriceStatus |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQot_GetSecuritySnapshot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("conversionRate")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("warrantType")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("strikePrice")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("maturityTime")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("endTradeTime")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("owner")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("recoveryPrice")
	}
	if hasFields[0]&uint64(0x00000080) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("streetVolumn")
	}
	if hasFields[0]&uint64(0x00000100) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("issueVolumn")
	}
	if hasFields[0]&uint64(0x00000200) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("streetRate")
	}
	if hasFields[0]&uint64(0x00000400) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("delta")
	}
	if hasFields[0]&uint64(0x00000800) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("impliedVolatility")
	}
	if hasFields[0]&uint64(0x00001000) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("premium")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OptionSnapshotExData) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_GetSecuritySnapshot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OptionSnapshotExData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OptionSnapshotExData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetSecuritySnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetSecuritySnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Owner == nil {
				m.Owner = &Qot_Common.Security{}
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrikeTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetSecuritySnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StrikeTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrikePrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.StrikePrice = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractSize", wireType)
			}
			m.ContractSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetSecuritySnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContractSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenInterest", wireType)
			}
			m.OpenInterest = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetSecuritySnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpenInterest |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000020)
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImpliedVolatility", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ImpliedVolatility = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000040)
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Premium", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Premium = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000080)
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delta", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Delta = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000100)
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gamma", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Gamma = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000200)
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vega", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Vega = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000400)
		case 12:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Theta", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Theta = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000800)
		case 13:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rho", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Rho = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00001000)
		case 14:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrikeTimestamp", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.StrikeTimestamp = float64(math.Float64frombits(v))
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexOptionType", wireType)
			}
			m.IndexOptionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetSecuritySnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IndexOptionType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetOpenInterest", wireType)
			}
			m.NetOpenInterest = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetSecuritySnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NetOpenInterest |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiryDateDistance", wireType)
			}
			m.ExpiryDateDistance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetSecuritySnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiryDateDistance |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractNominalValue", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ContractNominalValue = float64(math.Float64frombits(v))
		case 19:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerLotMultiplier", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.OwnerLotMultiplier = float64(math.Float64frombits(v))
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptionAreaType", wireType)
			}
			m.OptionAreaType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetSecuritySnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OptionAreaType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractMultiplier", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ContractMultiplier = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipQot_GetSecuritySnapshot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("type")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("owner")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("strikeTime")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("strikePrice")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("contractSize")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("openInterest")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("impliedVolatility")
	}
	if hasFields[0]&uint64(0x00000080) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("premium")
	}
	if hasFields[0]&uint64(0x00000100) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("delta")
	}
	if hasFields[0]&uint64(0x00000200) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("gamma")
	}
	if hasFields[0]&uint64(0x00000400) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("vega")
	}
	if hasFields[0]&uint64(0x00000800) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("theta")
	}
	if hasFields[0]&uint64(0x00001000) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("rho")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexSnapshotExData) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_GetSecuritySnapshot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexSnapshotExData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexSnapshotExData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaiseCount", wireType)
			}
			m.RaiseCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetSecuritySnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RaiseCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FallCount", wireType)
			}
			m.FallCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetSecuritySnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FallCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EqualCount", wireType)
			}
			m.EqualCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetSecuritySnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EqualCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipQot_GetSecuritySnapshot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("raiseCount")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("fallCount")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("equalCount")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlateSnapshotExData) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_GetSecuritySnapshot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlateSnapshotExData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlateSnapshotExData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaiseCount", wireType)
			}
			m.RaiseCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetSecuritySnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RaiseCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FallCount", wireType)
			}
			m.FallCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetSecuritySnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FallCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EqualCount", wireType)
			}
			m.EqualCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetSecuritySnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EqualCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipQot_GetSecuritySnapshot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("raiseCount")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("fallCount")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("equalCount")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FutureSnapshotExData) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_GetSecuritySnapshot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FutureSnapshotExData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FutureSnapshotExData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSettlePrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.LastSettlePrice = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetSecuritySnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionChange", wireType)
			}
			m.PositionChange = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetSecuritySnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PositionChange |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTradeTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetSecuritySnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastTradeTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTradeTimestamp", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.LastTradeTimestamp = float64(math.Float64frombits(v))
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMainContract", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetSecuritySnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsMainContract = bool(v != 0)
			hasFields[0] |= uint64(0x00000010)
		default:
			iNdEx = preIndex
			skippy, err := skipQot_GetSecuritySnapshot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("lastSettlePrice")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("position")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("positionChange")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("lastTradeTime")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("isMainContract")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnapshotBasicData) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_GetSecuritySnapshot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnapshotBasicData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnapshotBasicData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Security", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetSecuritySnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Security == nil {
				m.Security = &Qot_Common.Security{}
			}
			if err := m.Security.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetSecuritySnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSuspend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetSecuritySnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSuspend = bool(v != 0)
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetSecuritySnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ListTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LotSize", wireType)
			}
			m.LotSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetSecuritySnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LotSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceSpread", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.PriceSpread = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000020)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetSecuritySnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000040)
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighPrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.HighPrice = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000080)
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenPrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.OpenPrice = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000100)
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowPrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.LowPrice = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000200)
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastClosePrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.LastClosePrice = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000400)
		case 12:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurPrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.CurPrice = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000800)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volume", wireType)
			}
			m.Volume = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetSecuritySnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Volume |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00001000)
		case 14:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Turnover", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Turnover = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00002000)
		case 15:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TurnoverRate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.TurnoverRate = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00004000)
		case 16:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListTimestamp", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ListTimestamp = float64(math.Float64frombits(v))
		case 17:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTimestamp", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.UpdateTimestamp = float64(math.Float64frombits(v))
		case 18:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AskPrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.AskPrice = float64(math.Float64frombits(v))
		case 19:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidPrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.BidPrice = float64(math.Float64frombits(v))
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AskVol", wireType)
			}
			m.AskVol = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetSecuritySnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AskVol |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidVol", wireType)
			}
			m.BidVol = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetSecuritySnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BidVol |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableMargin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetSecuritySnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableMargin = bool(v != 0)
		case 23:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MortgageRatio", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MortgageRatio = float64(math.Float64frombits(v))
		case 24:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LongMarginInitialRatio", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.LongMarginInitialRatio = float64(math.Float64frombits(v))
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableShortSell", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetSecuritySnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableShortSell = bool(v != 0)
		case 26:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortSellRate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ShortSellRate = float64(math.Float64frombits(v))
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortAvailableVolume", wireType)
			}
			m.ShortAvailableVolume = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetSecuritySnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShortAvailableVolume |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 28:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortMarginInitialRatio", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ShortMarginInitialRatio = float64(math.Float64frombits(v))
		case 29:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amplitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Amplitude = float64(math.Float64frombits(v))
		case 30:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvgPrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.AvgPrice = float64(math.Float64frombits(v))
		case 31:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidAskRatio", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.BidAskRatio = float64(math.Float64frombits(v))
		case 32:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolumeRatio", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.VolumeRatio = float64(math.Float64frombits(v))
		case 33:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Highest52WeeksPrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Highest52WeeksPrice = float64(math.Float64frombits(v))
		case 34:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lowest52WeeksPrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Lowest52WeeksPrice = float64(math.Float64frombits(v))
		case 35:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighestHistoryPrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.HighestHistoryPrice = float64(math.Float64frombits(v))
		case 36:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowestHistoryPrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.LowestHistoryPrice = float64(math.Float64frombits(v))
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreMarket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetSecuritySnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PreMarket == nil {
				m.PreMarket = &Qot_Common.PreAfterMarketData{}
			}
			if err := m.PreMarket.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AfterMarket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetSecuritySnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AfterMarket == nil {
				m.AfterMarket = &Qot_Common.PreAfterMarketData{}
			}
			if err := m.AfterMarket.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 39:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecStatus", wireType)
			}
			m.SecStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetSecuritySnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SecStatus |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQot_GetSecuritySnapshot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("security")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("type")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("isSuspend")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("listTime")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("lotSize")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("priceSpread")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("updateTime")
	}
	if hasFields[0]&uint64(0x00000080) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("highPrice")
	}
	if hasFields[0]&uint64(0x00000100) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("openPrice")
	}
	if hasFields[0]&uint64(0x00000200) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("lowPrice")
	}
	if hasFields[0]&uint64(0x00000400) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("lastClosePrice")
	}
	if hasFields[0]&uint64(0x00000800) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("curPrice")
	}
	if hasFields[0]&uint64(0x00001000) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("volume")
	}
	if hasFields[0]&uint64(0x00002000) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("turnover")
	}
	if hasFields[0]&uint64(0x00004000) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("turnoverRate")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Snapshot) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_GetSecuritySnapshot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Snapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Snapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Basic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetSecuritySnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Basic == nil {
				m.Basic = &SnapshotBasicData{}
			}
			if err := m.Basic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquityExData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetSecuritySnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EquityExData == nil {
				m.EquityExData = &EquitySnapshotExData{}
			}
			if err := m.EquityExData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WarrantExData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetSecuritySnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WarrantExData == nil {
				m.WarrantExData = &WarrantSnapshotExData{}
			}
			if err := m.WarrantExData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptionExData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetSecuritySnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OptionExData == nil {
				m.OptionExData = &OptionSnapshotExData{}
			}
			if err := m.OptionExData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexExData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetSecuritySnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IndexExData == nil {
				m.IndexExData = &IndexSnapshotExData{}
			}
			if err := m.IndexExData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlateExData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetSecuritySnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlateExData == nil {
				m.PlateExData = &PlateSnapshotExData{}
			}
			if err := m.PlateExData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FutureExData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetSecuritySnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FutureExData == nil {
				m.FutureExData = &FutureSnapshotExData{}
			}
			if err := m.FutureExData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQot_GetSecuritySnapshot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("basic")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_GetSecuritySnapshot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapshotList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetSecuritySnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SnapshotList = append(m.SnapshotList, &Snapshot{})
			if err := m.SnapshotList[len(m.SnapshotList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQot_GetSecuritySnapshot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Request) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_GetSecuritySnapshot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field C2S", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetSecuritySnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.C2S == nil {
				m.C2S = &C2S{}
			}
			if err := m.C2S.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipQot_GetSecuritySnapshot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("c2s")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_GetSecuritySnapshot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetSecuritySnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetType = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetSecuritySnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RetMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			m.ErrCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetSecuritySnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S2C", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetSecuritySnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.S2C == nil {
				m.S2C = &S2C{}
			}
			if err := m.S2C.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQot_GetSecuritySnapshot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_GetSecuritySnapshot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("retType")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQot_GetSecuritySnapshot(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQot_GetSecuritySnapshot
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQot_GetSecuritySnapshot
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQot_GetSecuritySnapshot
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQot_GetSecuritySnapshot
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthQot_GetSecuritySnapshot
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowQot_GetSecuritySnapshot
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipQot_GetSecuritySnapshot(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthQot_GetSecuritySnapshot
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthQot_GetSecuritySnapshot = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQot_GetSecuritySnapshot   = fmt.Errorf("proto: integer overflow")
)
