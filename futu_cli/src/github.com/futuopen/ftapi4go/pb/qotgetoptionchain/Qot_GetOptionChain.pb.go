// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: Qot_GetOptionChain.proto

package qotgetoptionchain

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/futuopen/ftapi4go/pb/common"
	qotcommon "github.com/futuopen/ftapi4go/pb/qotcommon"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type OptionCondType int32

const (
	OptionCondType_OptionCondType_Unknow  OptionCondType = 0
	OptionCondType_OptionCondType_WithIn  OptionCondType = 1
	OptionCondType_OptionCondType_Outside OptionCondType = 2
)

var OptionCondType_name = map[int32]string{
	0: "OptionCondType_Unknow",
	1: "OptionCondType_WithIn",
	2: "OptionCondType_Outside",
}

var OptionCondType_value = map[string]int32{
	"OptionCondType_Unknow":  0,
	"OptionCondType_WithIn":  1,
	"OptionCondType_Outside": 2,
}

func (x OptionCondType) Enum() *OptionCondType {
	p := new(OptionCondType)
	*p = x
	return p
}

func (x OptionCondType) String() string {
	return proto.EnumName(OptionCondType_name, int32(x))
}

func (x *OptionCondType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(OptionCondType_value, data, "OptionCondType")
	if err != nil {
		return err
	}
	*x = OptionCondType(value)
	return nil
}

func (OptionCondType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_66a5ab2b53e1bbfe, []int{0}
}

//以下为数据字段筛选，可选字段，不填表示不过滤
type DataFilter struct {
	ImpliedVolatilityMin float64 `protobuf:"fixed64,1,opt,name=impliedVolatilityMin" json:"impliedVolatilityMin"`
	ImpliedVolatilityMax float64 `protobuf:"fixed64,2,opt,name=impliedVolatilityMax" json:"impliedVolatilityMax"`
	DeltaMin             float64 `protobuf:"fixed64,3,opt,name=deltaMin" json:"deltaMin"`
	DeltaMax             float64 `protobuf:"fixed64,4,opt,name=deltaMax" json:"deltaMax"`
	GammaMin             float64 `protobuf:"fixed64,5,opt,name=gammaMin" json:"gammaMin"`
	GammaMax             float64 `protobuf:"fixed64,6,opt,name=gammaMax" json:"gammaMax"`
	VegaMin              float64 `protobuf:"fixed64,7,opt,name=vegaMin" json:"vegaMin"`
	VegaMax              float64 `protobuf:"fixed64,8,opt,name=vegaMax" json:"vegaMax"`
	ThetaMin             float64 `protobuf:"fixed64,9,opt,name=thetaMin" json:"thetaMin"`
	ThetaMax             float64 `protobuf:"fixed64,10,opt,name=thetaMax" json:"thetaMax"`
	RhoMin               float64 `protobuf:"fixed64,11,opt,name=rhoMin" json:"rhoMin"`
	RhoMax               float64 `protobuf:"fixed64,12,opt,name=rhoMax" json:"rhoMax"`
	NetOpenInterestMin   float64 `protobuf:"fixed64,13,opt,name=netOpenInterestMin" json:"netOpenInterestMin"`
	NetOpenInterestMax   float64 `protobuf:"fixed64,14,opt,name=netOpenInterestMax" json:"netOpenInterestMax"`
	OpenInterestMin      float64 `protobuf:"fixed64,15,opt,name=openInterestMin" json:"openInterestMin"`
	OpenInterestMax      float64 `protobuf:"fixed64,16,opt,name=openInterestMax" json:"openInterestMax"`
	VolMin               float64 `protobuf:"fixed64,17,opt,name=volMin" json:"volMin"`
	VolMax               float64 `protobuf:"fixed64,18,opt,name=volMax" json:"volMax"`
}

func (m *DataFilter) Reset()         { *m = DataFilter{} }
func (m *DataFilter) String() string { return proto.CompactTextString(m) }
func (*DataFilter) ProtoMessage()    {}
func (*DataFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_66a5ab2b53e1bbfe, []int{0}
}
func (m *DataFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataFilter.Merge(m, src)
}
func (m *DataFilter) XXX_Size() int {
	return m.Size()
}
func (m *DataFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_DataFilter.DiscardUnknown(m)
}

var xxx_messageInfo_DataFilter proto.InternalMessageInfo

func (m *DataFilter) GetImpliedVolatilityMin() float64 {
	if m != nil {
		return m.ImpliedVolatilityMin
	}
	return 0
}

func (m *DataFilter) GetImpliedVolatilityMax() float64 {
	if m != nil {
		return m.ImpliedVolatilityMax
	}
	return 0
}

func (m *DataFilter) GetDeltaMin() float64 {
	if m != nil {
		return m.DeltaMin
	}
	return 0
}

func (m *DataFilter) GetDeltaMax() float64 {
	if m != nil {
		return m.DeltaMax
	}
	return 0
}

func (m *DataFilter) GetGammaMin() float64 {
	if m != nil {
		return m.GammaMin
	}
	return 0
}

func (m *DataFilter) GetGammaMax() float64 {
	if m != nil {
		return m.GammaMax
	}
	return 0
}

func (m *DataFilter) GetVegaMin() float64 {
	if m != nil {
		return m.VegaMin
	}
	return 0
}

func (m *DataFilter) GetVegaMax() float64 {
	if m != nil {
		return m.VegaMax
	}
	return 0
}

func (m *DataFilter) GetThetaMin() float64 {
	if m != nil {
		return m.ThetaMin
	}
	return 0
}

func (m *DataFilter) GetThetaMax() float64 {
	if m != nil {
		return m.ThetaMax
	}
	return 0
}

func (m *DataFilter) GetRhoMin() float64 {
	if m != nil {
		return m.RhoMin
	}
	return 0
}

func (m *DataFilter) GetRhoMax() float64 {
	if m != nil {
		return m.RhoMax
	}
	return 0
}

func (m *DataFilter) GetNetOpenInterestMin() float64 {
	if m != nil {
		return m.NetOpenInterestMin
	}
	return 0
}

func (m *DataFilter) GetNetOpenInterestMax() float64 {
	if m != nil {
		return m.NetOpenInterestMax
	}
	return 0
}

func (m *DataFilter) GetOpenInterestMin() float64 {
	if m != nil {
		return m.OpenInterestMin
	}
	return 0
}

func (m *DataFilter) GetOpenInterestMax() float64 {
	if m != nil {
		return m.OpenInterestMax
	}
	return 0
}

func (m *DataFilter) GetVolMin() float64 {
	if m != nil {
		return m.VolMin
	}
	return 0
}

func (m *DataFilter) GetVolMax() float64 {
	if m != nil {
		return m.VolMax
	}
	return 0
}

type C2S struct {
	Owner           *qotcommon.Security `protobuf:"bytes,1,req,name=owner" json:"owner,omitempty"`
	IndexOptionType int32               `protobuf:"varint,6,opt,name=indexOptionType" json:"indexOptionType"`
	Type            int32               `protobuf:"varint,2,opt,name=type" json:"type"`
	Condition       int32               `protobuf:"varint,3,opt,name=condition" json:"condition"`
	BeginTime       string              `protobuf:"bytes,4,req,name=beginTime" json:"beginTime"`
	EndTime         string              `protobuf:"bytes,5,req,name=endTime" json:"endTime"`
	DataFilter      *DataFilter         `protobuf:"bytes,7,opt,name=dataFilter" json:"dataFilter,omitempty"`
}

func (m *C2S) Reset()         { *m = C2S{} }
func (m *C2S) String() string { return proto.CompactTextString(m) }
func (*C2S) ProtoMessage()    {}
func (*C2S) Descriptor() ([]byte, []int) {
	return fileDescriptor_66a5ab2b53e1bbfe, []int{1}
}
func (m *C2S) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S.Merge(m, src)
}
func (m *C2S) XXX_Size() int {
	return m.Size()
}
func (m *C2S) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S.DiscardUnknown(m)
}

var xxx_messageInfo_C2S proto.InternalMessageInfo

func (m *C2S) GetOwner() *qotcommon.Security {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *C2S) GetIndexOptionType() int32 {
	if m != nil {
		return m.IndexOptionType
	}
	return 0
}

func (m *C2S) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *C2S) GetCondition() int32 {
	if m != nil {
		return m.Condition
	}
	return 0
}

func (m *C2S) GetBeginTime() string {
	if m != nil {
		return m.BeginTime
	}
	return ""
}

func (m *C2S) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *C2S) GetDataFilter() *DataFilter {
	if m != nil {
		return m.DataFilter
	}
	return nil
}

type OptionItem struct {
	Call *qotcommon.SecurityStaticInfo `protobuf:"bytes,1,opt,name=call" json:"call,omitempty"`
	Put  *qotcommon.SecurityStaticInfo `protobuf:"bytes,2,opt,name=put" json:"put,omitempty"`
}

func (m *OptionItem) Reset()         { *m = OptionItem{} }
func (m *OptionItem) String() string { return proto.CompactTextString(m) }
func (*OptionItem) ProtoMessage()    {}
func (*OptionItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_66a5ab2b53e1bbfe, []int{2}
}
func (m *OptionItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OptionItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OptionItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OptionItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OptionItem.Merge(m, src)
}
func (m *OptionItem) XXX_Size() int {
	return m.Size()
}
func (m *OptionItem) XXX_DiscardUnknown() {
	xxx_messageInfo_OptionItem.DiscardUnknown(m)
}

var xxx_messageInfo_OptionItem proto.InternalMessageInfo

func (m *OptionItem) GetCall() *qotcommon.SecurityStaticInfo {
	if m != nil {
		return m.Call
	}
	return nil
}

func (m *OptionItem) GetPut() *qotcommon.SecurityStaticInfo {
	if m != nil {
		return m.Put
	}
	return nil
}

type OptionChain struct {
	StrikeTime      string        `protobuf:"bytes,1,req,name=strikeTime" json:"strikeTime"`
	Option          []*OptionItem `protobuf:"bytes,2,rep,name=option" json:"option,omitempty"`
	StrikeTimestamp float64       `protobuf:"fixed64,3,opt,name=strikeTimestamp" json:"strikeTimestamp"`
}

func (m *OptionChain) Reset()         { *m = OptionChain{} }
func (m *OptionChain) String() string { return proto.CompactTextString(m) }
func (*OptionChain) ProtoMessage()    {}
func (*OptionChain) Descriptor() ([]byte, []int) {
	return fileDescriptor_66a5ab2b53e1bbfe, []int{3}
}
func (m *OptionChain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OptionChain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OptionChain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OptionChain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OptionChain.Merge(m, src)
}
func (m *OptionChain) XXX_Size() int {
	return m.Size()
}
func (m *OptionChain) XXX_DiscardUnknown() {
	xxx_messageInfo_OptionChain.DiscardUnknown(m)
}

var xxx_messageInfo_OptionChain proto.InternalMessageInfo

func (m *OptionChain) GetStrikeTime() string {
	if m != nil {
		return m.StrikeTime
	}
	return ""
}

func (m *OptionChain) GetOption() []*OptionItem {
	if m != nil {
		return m.Option
	}
	return nil
}

func (m *OptionChain) GetStrikeTimestamp() float64 {
	if m != nil {
		return m.StrikeTimestamp
	}
	return 0
}

type S2C struct {
	OptionChain []*OptionChain `protobuf:"bytes,1,rep,name=optionChain" json:"optionChain,omitempty"`
}

func (m *S2C) Reset()         { *m = S2C{} }
func (m *S2C) String() string { return proto.CompactTextString(m) }
func (*S2C) ProtoMessage()    {}
func (*S2C) Descriptor() ([]byte, []int) {
	return fileDescriptor_66a5ab2b53e1bbfe, []int{4}
}
func (m *S2C) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C.Merge(m, src)
}
func (m *S2C) XXX_Size() int {
	return m.Size()
}
func (m *S2C) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C.DiscardUnknown(m)
}

var xxx_messageInfo_S2C proto.InternalMessageInfo

func (m *S2C) GetOptionChain() []*OptionChain {
	if m != nil {
		return m.OptionChain
	}
	return nil
}

type Request struct {
	C2S *C2S `protobuf:"bytes,1,req,name=c2s" json:"c2s,omitempty"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_66a5ab2b53e1bbfe, []int{5}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return m.Size()
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetC2S() *C2S {
	if m != nil {
		return m.C2S
	}
	return nil
}

type Response struct {
	RetType *int32 `protobuf:"varint,1,req,name=retType,def=-400" json:"retType,omitempty"`
	RetMsg  string `protobuf:"bytes,2,opt,name=retMsg" json:"retMsg"`
	ErrCode int32  `protobuf:"varint,3,opt,name=errCode" json:"errCode"`
	S2C     *S2C   `protobuf:"bytes,4,opt,name=s2c" json:"s2c,omitempty"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_66a5ab2b53e1bbfe, []int{6}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return m.Size()
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

const Default_Response_RetType int32 = -400

func (m *Response) GetRetType() int32 {
	if m != nil && m.RetType != nil {
		return *m.RetType
	}
	return Default_Response_RetType
}

func (m *Response) GetRetMsg() string {
	if m != nil {
		return m.RetMsg
	}
	return ""
}

func (m *Response) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *Response) GetS2C() *S2C {
	if m != nil {
		return m.S2C
	}
	return nil
}

func init() {
	proto.RegisterEnum("Qot_GetOptionChain.OptionCondType", OptionCondType_name, OptionCondType_value)
	proto.RegisterType((*DataFilter)(nil), "Qot_GetOptionChain.DataFilter")
	proto.RegisterType((*C2S)(nil), "Qot_GetOptionChain.C2S")
	proto.RegisterType((*OptionItem)(nil), "Qot_GetOptionChain.OptionItem")
	proto.RegisterType((*OptionChain)(nil), "Qot_GetOptionChain.OptionChain")
	proto.RegisterType((*S2C)(nil), "Qot_GetOptionChain.S2C")
	proto.RegisterType((*Request)(nil), "Qot_GetOptionChain.Request")
	proto.RegisterType((*Response)(nil), "Qot_GetOptionChain.Response")
}

func init() { proto.RegisterFile("Qot_GetOptionChain.proto", fileDescriptor_66a5ab2b53e1bbfe) }

var fileDescriptor_66a5ab2b53e1bbfe = []byte{
	// 774 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x94, 0xcf, 0x8f, 0xdb, 0x44,
	0x14, 0xc7, 0xe3, 0xfc, 0xd8, 0xdd, 0xbc, 0x94, 0x36, 0x0c, 0x05, 0x86, 0x15, 0x72, 0x23, 0x8b,
	0xc3, 0x52, 0x09, 0x67, 0xb1, 0x22, 0x84, 0x38, 0x20, 0xd1, 0x20, 0x20, 0x87, 0xaa, 0xc2, 0x29,
	0x20, 0x71, 0x29, 0x13, 0x7b, 0x36, 0x19, 0xd5, 0x9e, 0x71, 0xed, 0x49, 0x3b, 0xfb, 0x5f, 0x20,
	0x71, 0xe4, 0xc8, 0x3f, 0xd3, 0xe3, 0x1e, 0x39, 0x21, 0xb4, 0xfb, 0x8f, 0xa0, 0x19, 0xc7, 0xf1,
	0xac, 0x93, 0x2c, 0x37, 0xeb, 0xfb, 0xfd, 0xbc, 0x37, 0xef, 0x79, 0xde, 0x3c, 0xc0, 0x3f, 0x0a,
	0xf9, 0xe2, 0x7b, 0x2a, 0x9f, 0x65, 0x92, 0x09, 0x3e, 0x5d, 0x11, 0xc6, 0xfd, 0x2c, 0x17, 0x52,
	0x20, 0xb4, 0xeb, 0x9c, 0xde, 0x9b, 0x8a, 0x34, 0x15, 0x1b, 0xe2, 0x74, 0xa8, 0x09, 0x5b, 0xf1,
	0xae, 0x7a, 0x00, 0xdf, 0x12, 0x49, 0xbe, 0x63, 0x89, 0xa4, 0x39, 0xfa, 0x12, 0x1e, 0xb2, 0x34,
	0x4b, 0x18, 0x8d, 0x7f, 0x16, 0x09, 0x91, 0x2c, 0x61, 0xf2, 0xf2, 0x29, 0xe3, 0xd8, 0x19, 0x39,
	0x67, 0xce, 0x93, 0xee, 0xdb, 0x7f, 0x1e, 0xb5, 0xc2, 0xbd, 0xc4, 0xfe, 0x48, 0xa2, 0x70, 0xfb,
	0xee, 0x48, 0xa2, 0xd0, 0x08, 0x4e, 0x62, 0x9a, 0x48, 0xa2, 0xcf, 0xe9, 0x58, 0xf4, 0x56, 0xad,
	0x09, 0xa2, 0x70, 0x77, 0x97, 0x28, 0x73, 0x2c, 0x49, 0x9a, 0x9a, 0x1c, 0x3d, 0x9b, 0xa8, 0xd4,
	0x9a, 0x20, 0x0a, 0x1f, 0xed, 0x12, 0x44, 0x21, 0x17, 0x8e, 0x5f, 0xd3, 0xa5, 0x49, 0x71, 0x6c,
	0x01, 0x95, 0xb8, 0xf5, 0x89, 0xc2, 0x27, 0x3b, 0x7e, 0x59, 0x83, 0x5c, 0xd1, 0xb2, 0x8f, 0xbe,
	0x7d, 0x42, 0xa5, 0xd6, 0x04, 0x51, 0x18, 0x76, 0x09, 0xa2, 0xd0, 0xc7, 0x70, 0x94, 0xaf, 0x84,
	0xce, 0x30, 0xb0, 0xfc, 0x8d, 0x56, 0xb9, 0x44, 0xe1, 0x7b, 0x4d, 0x97, 0x28, 0x34, 0x01, 0xc4,
	0xf5, 0xe5, 0x53, 0x3e, 0xe3, 0x92, 0xe6, 0xb4, 0x90, 0x3a, 0xcf, 0x3b, 0x16, 0xb9, 0xc7, 0xdf,
	0x17, 0x45, 0x14, 0xbe, 0x7f, 0x57, 0x14, 0x51, 0xc8, 0x87, 0x07, 0xa2, 0x71, 0xd0, 0x03, 0x2b,
	0xa4, 0x69, 0xee, 0xf0, 0x44, 0xe1, 0xe1, 0x41, 0xbe, 0xfc, 0x0f, 0xaf, 0x45, 0xa2, 0xd3, 0xbe,
	0x6b, 0x77, 0x5a, 0x6a, 0x95, 0x4b, 0x14, 0x46, 0x4d, 0x97, 0x28, 0xef, 0xaf, 0x36, 0x74, 0xa6,
	0xc1, 0x1c, 0x3d, 0x86, 0x9e, 0x78, 0xc3, 0x69, 0x8e, 0x9d, 0x51, 0xfb, 0x6c, 0x10, 0x3c, 0xf4,
	0xad, 0xe1, 0x9f, 0xd3, 0x68, 0x9d, 0x33, 0x79, 0x19, 0x96, 0x88, 0xae, 0x8f, 0xf1, 0x98, 0xaa,
	0xf2, 0xe9, 0x3c, 0xbf, 0xcc, 0xa8, 0x19, 0x92, 0x5e, 0x55, 0x5f, 0xc3, 0x44, 0x18, 0xba, 0x52,
	0x43, 0x6d, 0x0b, 0x32, 0x0a, 0xf2, 0xa0, 0x1f, 0x09, 0x1e, 0x33, 0x8d, 0x9a, 0x71, 0xae, 0xec,
	0x5a, 0xd6, 0xcc, 0x82, 0x2e, 0x19, 0x7f, 0xce, 0x52, 0x8a, 0xbb, 0xa3, 0xf6, 0x59, 0xbf, 0x62,
	0xb6, 0xb2, 0x9e, 0x36, 0xca, 0x63, 0x43, 0xf4, 0x2c, 0xa2, 0x12, 0xd1, 0xd7, 0x00, 0xf1, 0xf6,
	0xdd, 0x9a, 0x81, 0x1d, 0x04, 0xae, 0xbf, 0x67, 0x37, 0xd4, 0xaf, 0x3b, 0xb4, 0x22, 0xbc, 0x1c,
	0xa0, 0xa4, 0x66, 0x92, 0xa6, 0x28, 0x80, 0x6e, 0x44, 0x92, 0xc4, 0xbc, 0xf3, 0x2a, 0x4f, 0xe3,
	0x57, 0xcd, 0x25, 0x91, 0x2c, 0x9a, 0xf1, 0x0b, 0x11, 0x1a, 0x16, 0x9d, 0x43, 0x27, 0x5b, 0x4b,
	0xf3, 0x0b, 0xfe, 0x3f, 0x44, 0xa3, 0xde, 0x9f, 0x0e, 0x0c, 0xac, 0xd2, 0xd0, 0x27, 0x00, 0x85,
	0xcc, 0xd9, 0x4b, 0x6a, 0xda, 0x74, 0xac, 0x36, 0x2d, 0x1d, 0x7d, 0x01, 0x47, 0xc2, 0x04, 0xe1,
	0xf6, 0xa8, 0x73, 0xa8, 0xcb, 0xba, 0x97, 0x70, 0x43, 0xeb, 0x3b, 0xad, 0xb3, 0x14, 0x92, 0xa4,
	0xd9, 0xad, 0xf5, 0xd2, 0x34, 0xbd, 0x1f, 0xa0, 0x33, 0x0f, 0xa6, 0xe8, 0x1b, 0x18, 0x88, 0x3a,
	0x31, 0x76, 0xcc, 0x99, 0x8f, 0x0e, 0x9f, 0x69, 0xbe, 0x43, 0x3b, 0xc6, 0x9b, 0xc0, 0x71, 0x48,
	0x5f, 0xad, 0x69, 0x21, 0xd1, 0xa7, 0xd0, 0x89, 0x82, 0x62, 0x33, 0x82, 0x1f, 0xee, 0xcb, 0x32,
	0x0d, 0xe6, 0xa1, 0x66, 0xbc, 0x3f, 0x1c, 0x38, 0x09, 0x69, 0x91, 0x09, 0x5e, 0x98, 0xeb, 0xcf,
	0xa9, 0x34, 0x83, 0xa8, 0x63, 0x7b, 0x5f, 0x75, 0x3f, 0x9b, 0x9c, 0x9f, 0x87, 0x95, 0x68, 0x56,
	0x01, 0x95, 0x4f, 0x8b, 0xa5, 0xf9, 0xff, 0xfd, 0xed, 0x2a, 0x30, 0x9a, 0x19, 0x9e, 0x3c, 0x9f,
	0x8a, 0x98, 0xde, 0x1a, 0xc1, 0x4a, 0xd4, 0x55, 0x15, 0x41, 0x64, 0x76, 0xe9, 0x81, 0xaa, 0xe6,
	0xc1, 0x34, 0xd4, 0xcc, 0xe3, 0x05, 0xdc, 0xdf, 0xe8, 0x82, 0xc7, 0xe6, 0xe8, 0x8f, 0xe0, 0xfd,
	0xdb, 0xca, 0x8b, 0x9f, 0xf8, 0x4b, 0x2e, 0xde, 0x0c, 0x5b, 0x7b, 0xac, 0x5f, 0x98, 0x5c, 0xcd,
	0xf8, 0xd0, 0x41, 0xa7, 0xf0, 0x41, 0xc3, 0x7a, 0xb6, 0x96, 0x05, 0x8b, 0xe9, 0xb0, 0xfd, 0xe4,
	0xb7, 0xb7, 0xd7, 0xae, 0x73, 0x75, 0xed, 0x3a, 0xff, 0x5e, 0xbb, 0xce, 0xef, 0x37, 0x6e, 0xeb,
	0xea, 0xc6, 0x6d, 0xfd, 0x7d, 0xe3, 0xb6, 0xe0, 0xbd, 0x48, 0xa4, 0xfe, 0xc5, 0x5a, 0xae, 0x7d,
	0xbd, 0x21, 0x48, 0xc6, 0xfc, 0x6c, 0xf1, 0xeb, 0xe7, 0x4b, 0x26, 0x57, 0xeb, 0x85, 0x1f, 0x89,
	0x74, 0xac, 0x3d, 0x6d, 0x8d, 0x2f, 0x24, 0xc9, 0xd8, 0x64, 0x29, 0xc6, 0xd9, 0x62, 0xfc, 0x4a,
	0xc8, 0x25, 0x95, 0xe5, 0x8d, 0x44, 0xba, 0x9d, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x3c, 0xd9,
	0x7f, 0xd2, 0x35, 0x07, 0x00, 0x00,
}

func (m *DataFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.VolMax))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x91
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.VolMin))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x89
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.OpenInterestMax))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x81
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.OpenInterestMin))))
	i--
	dAtA[i] = 0x79
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.NetOpenInterestMax))))
	i--
	dAtA[i] = 0x71
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.NetOpenInterestMin))))
	i--
	dAtA[i] = 0x69
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.RhoMax))))
	i--
	dAtA[i] = 0x61
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.RhoMin))))
	i--
	dAtA[i] = 0x59
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ThetaMax))))
	i--
	dAtA[i] = 0x51
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ThetaMin))))
	i--
	dAtA[i] = 0x49
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.VegaMax))))
	i--
	dAtA[i] = 0x41
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.VegaMin))))
	i--
	dAtA[i] = 0x39
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.GammaMax))))
	i--
	dAtA[i] = 0x31
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.GammaMin))))
	i--
	dAtA[i] = 0x29
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.DeltaMax))))
	i--
	dAtA[i] = 0x21
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.DeltaMin))))
	i--
	dAtA[i] = 0x19
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ImpliedVolatilityMax))))
	i--
	dAtA[i] = 0x11
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ImpliedVolatilityMin))))
	i--
	dAtA[i] = 0x9
	return len(dAtA) - i, nil
}

func (m *C2S) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DataFilter != nil {
		{
			size, err := m.DataFilter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQot_GetOptionChain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	i = encodeVarintQot_GetOptionChain(dAtA, i, uint64(m.IndexOptionType))
	i--
	dAtA[i] = 0x30
	i -= len(m.EndTime)
	copy(dAtA[i:], m.EndTime)
	i = encodeVarintQot_GetOptionChain(dAtA, i, uint64(len(m.EndTime)))
	i--
	dAtA[i] = 0x2a
	i -= len(m.BeginTime)
	copy(dAtA[i:], m.BeginTime)
	i = encodeVarintQot_GetOptionChain(dAtA, i, uint64(len(m.BeginTime)))
	i--
	dAtA[i] = 0x22
	i = encodeVarintQot_GetOptionChain(dAtA, i, uint64(m.Condition))
	i--
	dAtA[i] = 0x18
	i = encodeVarintQot_GetOptionChain(dAtA, i, uint64(m.Type))
	i--
	dAtA[i] = 0x10
	if m.Owner == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("owner")
	} else {
		{
			size, err := m.Owner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQot_GetOptionChain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OptionItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OptionItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OptionItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Put != nil {
		{
			size, err := m.Put.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQot_GetOptionChain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Call != nil {
		{
			size, err := m.Call.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQot_GetOptionChain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OptionChain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OptionChain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OptionChain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.StrikeTimestamp))))
	i--
	dAtA[i] = 0x19
	if len(m.Option) > 0 {
		for iNdEx := len(m.Option) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Option[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQot_GetOptionChain(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	i -= len(m.StrikeTime)
	copy(dAtA[i:], m.StrikeTime)
	i = encodeVarintQot_GetOptionChain(dAtA, i, uint64(len(m.StrikeTime)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *S2C) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OptionChain) > 0 {
		for iNdEx := len(m.OptionChain) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OptionChain[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQot_GetOptionChain(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.C2S == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("c2s")
	} else {
		{
			size, err := m.C2S.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQot_GetOptionChain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.S2C != nil {
		{
			size, err := m.S2C.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQot_GetOptionChain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	i = encodeVarintQot_GetOptionChain(dAtA, i, uint64(m.ErrCode))
	i--
	dAtA[i] = 0x18
	i -= len(m.RetMsg)
	copy(dAtA[i:], m.RetMsg)
	i = encodeVarintQot_GetOptionChain(dAtA, i, uint64(len(m.RetMsg)))
	i--
	dAtA[i] = 0x12
	if m.RetType == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("retType")
	} else {
		i = encodeVarintQot_GetOptionChain(dAtA, i, uint64(*m.RetType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQot_GetOptionChain(dAtA []byte, offset int, v uint64) int {
	offset -= sovQot_GetOptionChain(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DataFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 9
	n += 9
	n += 9
	n += 9
	n += 9
	n += 9
	n += 9
	n += 9
	n += 9
	n += 9
	n += 9
	n += 9
	n += 9
	n += 9
	n += 9
	n += 10
	n += 10
	n += 10
	return n
}

func (m *C2S) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Owner != nil {
		l = m.Owner.Size()
		n += 1 + l + sovQot_GetOptionChain(uint64(l))
	}
	n += 1 + sovQot_GetOptionChain(uint64(m.Type))
	n += 1 + sovQot_GetOptionChain(uint64(m.Condition))
	l = len(m.BeginTime)
	n += 1 + l + sovQot_GetOptionChain(uint64(l))
	l = len(m.EndTime)
	n += 1 + l + sovQot_GetOptionChain(uint64(l))
	n += 1 + sovQot_GetOptionChain(uint64(m.IndexOptionType))
	if m.DataFilter != nil {
		l = m.DataFilter.Size()
		n += 1 + l + sovQot_GetOptionChain(uint64(l))
	}
	return n
}

func (m *OptionItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Call != nil {
		l = m.Call.Size()
		n += 1 + l + sovQot_GetOptionChain(uint64(l))
	}
	if m.Put != nil {
		l = m.Put.Size()
		n += 1 + l + sovQot_GetOptionChain(uint64(l))
	}
	return n
}

func (m *OptionChain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StrikeTime)
	n += 1 + l + sovQot_GetOptionChain(uint64(l))
	if len(m.Option) > 0 {
		for _, e := range m.Option {
			l = e.Size()
			n += 1 + l + sovQot_GetOptionChain(uint64(l))
		}
	}
	n += 9
	return n
}

func (m *S2C) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OptionChain) > 0 {
		for _, e := range m.OptionChain {
			l = e.Size()
			n += 1 + l + sovQot_GetOptionChain(uint64(l))
		}
	}
	return n
}

func (m *Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.C2S != nil {
		l = m.C2S.Size()
		n += 1 + l + sovQot_GetOptionChain(uint64(l))
	}
	return n
}

func (m *Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetType != nil {
		n += 1 + sovQot_GetOptionChain(uint64(*m.RetType))
	}
	l = len(m.RetMsg)
	n += 1 + l + sovQot_GetOptionChain(uint64(l))
	n += 1 + sovQot_GetOptionChain(uint64(m.ErrCode))
	if m.S2C != nil {
		l = m.S2C.Size()
		n += 1 + l + sovQot_GetOptionChain(uint64(l))
	}
	return n
}

func sovQot_GetOptionChain(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQot_GetOptionChain(x uint64) (n int) {
	return sovQot_GetOptionChain(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DataFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_GetOptionChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImpliedVolatilityMin", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ImpliedVolatilityMin = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImpliedVolatilityMax", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ImpliedVolatilityMax = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeltaMin", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.DeltaMin = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeltaMax", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.DeltaMax = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field GammaMin", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.GammaMin = float64(math.Float64frombits(v))
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field GammaMax", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.GammaMax = float64(math.Float64frombits(v))
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field VegaMin", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.VegaMin = float64(math.Float64frombits(v))
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field VegaMax", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.VegaMax = float64(math.Float64frombits(v))
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThetaMin", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ThetaMin = float64(math.Float64frombits(v))
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThetaMax", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ThetaMax = float64(math.Float64frombits(v))
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field RhoMin", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.RhoMin = float64(math.Float64frombits(v))
		case 12:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field RhoMax", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.RhoMax = float64(math.Float64frombits(v))
		case 13:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetOpenInterestMin", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.NetOpenInterestMin = float64(math.Float64frombits(v))
		case 14:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetOpenInterestMax", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.NetOpenInterestMax = float64(math.Float64frombits(v))
		case 15:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenInterestMin", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.OpenInterestMin = float64(math.Float64frombits(v))
		case 16:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenInterestMax", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.OpenInterestMax = float64(math.Float64frombits(v))
		case 17:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolMin", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.VolMin = float64(math.Float64frombits(v))
		case 18:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolMax", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.VolMax = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipQot_GetOptionChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_GetOptionChain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_GetOptionChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_GetOptionChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetOptionChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_GetOptionChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetOptionChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Owner == nil {
				m.Owner = &qotcommon.Security{}
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetOptionChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Condition", wireType)
			}
			m.Condition = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetOptionChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Condition |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetOptionChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQot_GetOptionChain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetOptionChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BeginTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetOptionChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQot_GetOptionChain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetOptionChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexOptionType", wireType)
			}
			m.IndexOptionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetOptionChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IndexOptionType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetOptionChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_GetOptionChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetOptionChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DataFilter == nil {
				m.DataFilter = &DataFilter{}
			}
			if err := m.DataFilter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQot_GetOptionChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_GetOptionChain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_GetOptionChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("owner")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("beginTime")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("endTime")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OptionItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_GetOptionChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OptionItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OptionItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Call", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetOptionChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_GetOptionChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetOptionChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Call == nil {
				m.Call = &qotcommon.SecurityStaticInfo{}
			}
			if err := m.Call.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Put", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetOptionChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_GetOptionChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetOptionChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Put == nil {
				m.Put = &qotcommon.SecurityStaticInfo{}
			}
			if err := m.Put.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQot_GetOptionChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_GetOptionChain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_GetOptionChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OptionChain) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_GetOptionChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OptionChain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OptionChain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrikeTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetOptionChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQot_GetOptionChain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetOptionChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StrikeTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Option", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetOptionChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_GetOptionChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetOptionChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Option = append(m.Option, &OptionItem{})
			if err := m.Option[len(m.Option)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrikeTimestamp", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.StrikeTimestamp = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipQot_GetOptionChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_GetOptionChain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_GetOptionChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("strikeTime")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_GetOptionChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptionChain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetOptionChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_GetOptionChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetOptionChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OptionChain = append(m.OptionChain, &OptionChain{})
			if err := m.OptionChain[len(m.OptionChain)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQot_GetOptionChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_GetOptionChain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_GetOptionChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Request) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_GetOptionChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field C2S", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetOptionChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_GetOptionChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetOptionChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.C2S == nil {
				m.C2S = &C2S{}
			}
			if err := m.C2S.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipQot_GetOptionChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_GetOptionChain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_GetOptionChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("c2s")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_GetOptionChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetOptionChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetType = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetOptionChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQot_GetOptionChain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetOptionChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RetMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			m.ErrCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetOptionChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S2C", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetOptionChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_GetOptionChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetOptionChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.S2C == nil {
				m.S2C = &S2C{}
			}
			if err := m.S2C.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQot_GetOptionChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_GetOptionChain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_GetOptionChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("retType")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQot_GetOptionChain(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQot_GetOptionChain
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQot_GetOptionChain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQot_GetOptionChain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQot_GetOptionChain
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthQot_GetOptionChain
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowQot_GetOptionChain
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipQot_GetOptionChain(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthQot_GetOptionChain
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthQot_GetOptionChain = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQot_GetOptionChain   = fmt.Errorf("proto: integer overflow")
)
