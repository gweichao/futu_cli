// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: Qot_GetCodeChange.proto

package Qot_GetCodeChange

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	_ "pbgo/Common"
	Qot_Common "pbgo/Qot_Common"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CodeChangeType int32

const (
	CodeChangeType_CodeChangeType_Unkown     CodeChangeType = 0
	CodeChangeType_CodeChangeType_GemToMain  CodeChangeType = 1
	CodeChangeType_CodeChangeType_Unpaid     CodeChangeType = 2
	CodeChangeType_CodeChangeType_ChangeLot  CodeChangeType = 3
	CodeChangeType_CodeChangeType_Split      CodeChangeType = 4
	CodeChangeType_CodeChangeType_Joint      CodeChangeType = 5
	CodeChangeType_CodeChangeType_JointSplit CodeChangeType = 6
	CodeChangeType_CodeChangeType_SplitJoint CodeChangeType = 7
	CodeChangeType_CodeChangeType_Other      CodeChangeType = 8
)

var CodeChangeType_name = map[int32]string{
	0: "CodeChangeType_Unkown",
	1: "CodeChangeType_GemToMain",
	2: "CodeChangeType_Unpaid",
	3: "CodeChangeType_ChangeLot",
	4: "CodeChangeType_Split",
	5: "CodeChangeType_Joint",
	6: "CodeChangeType_JointSplit",
	7: "CodeChangeType_SplitJoint",
	8: "CodeChangeType_Other",
}

var CodeChangeType_value = map[string]int32{
	"CodeChangeType_Unkown":     0,
	"CodeChangeType_GemToMain":  1,
	"CodeChangeType_Unpaid":     2,
	"CodeChangeType_ChangeLot":  3,
	"CodeChangeType_Split":      4,
	"CodeChangeType_Joint":      5,
	"CodeChangeType_JointSplit": 6,
	"CodeChangeType_SplitJoint": 7,
	"CodeChangeType_Other":      8,
}

func (x CodeChangeType) Enum() *CodeChangeType {
	p := new(CodeChangeType)
	*p = x
	return p
}

func (x CodeChangeType) String() string {
	return proto.EnumName(CodeChangeType_name, int32(x))
}

func (x *CodeChangeType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CodeChangeType_value, data, "CodeChangeType")
	if err != nil {
		return err
	}
	*x = CodeChangeType(value)
	return nil
}

func (CodeChangeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4640949ab9051929, []int{0}
}

type TimeFilterType int32

const (
	TimeFilterType_TimeFilterType_Unknow    TimeFilterType = 0
	TimeFilterType_TimeFilterType_Public    TimeFilterType = 1
	TimeFilterType_TimeFilterType_Effective TimeFilterType = 2
	TimeFilterType_TimeFilterType_End       TimeFilterType = 3
)

var TimeFilterType_name = map[int32]string{
	0: "TimeFilterType_Unknow",
	1: "TimeFilterType_Public",
	2: "TimeFilterType_Effective",
	3: "TimeFilterType_End",
}

var TimeFilterType_value = map[string]int32{
	"TimeFilterType_Unknow":    0,
	"TimeFilterType_Public":    1,
	"TimeFilterType_Effective": 2,
	"TimeFilterType_End":       3,
}

func (x TimeFilterType) Enum() *TimeFilterType {
	p := new(TimeFilterType)
	*p = x
	return p
}

func (x TimeFilterType) String() string {
	return proto.EnumName(TimeFilterType_name, int32(x))
}

func (x *TimeFilterType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TimeFilterType_value, data, "TimeFilterType")
	if err != nil {
		return err
	}
	*x = TimeFilterType(value)
	return nil
}

func (TimeFilterType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4640949ab9051929, []int{1}
}

type CodeChangeInfo struct {
	Type               int32                `protobuf:"varint,1,req,name=type" json:"type"`
	Security           *Qot_Common.Security `protobuf:"bytes,2,req,name=security" json:"security,omitempty"`
	RelatedSecurity    *Qot_Common.Security `protobuf:"bytes,3,req,name=relatedSecurity" json:"relatedSecurity,omitempty"`
	PublicTime         string               `protobuf:"bytes,4,opt,name=publicTime" json:"publicTime"`
	PublicTimestamp    float64              `protobuf:"fixed64,5,opt,name=publicTimestamp" json:"publicTimestamp"`
	EffectiveTime      string               `protobuf:"bytes,6,opt,name=effectiveTime" json:"effectiveTime"`
	EffectiveTimestamp float64              `protobuf:"fixed64,7,opt,name=effectiveTimestamp" json:"effectiveTimestamp"`
	EndTime            string               `protobuf:"bytes,8,opt,name=endTime" json:"endTime"`
	EndTimestamp       float64              `protobuf:"fixed64,9,opt,name=endTimestamp" json:"endTimestamp"`
}

func (m *CodeChangeInfo) Reset()         { *m = CodeChangeInfo{} }
func (m *CodeChangeInfo) String() string { return proto.CompactTextString(m) }
func (*CodeChangeInfo) ProtoMessage()    {}
func (*CodeChangeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_4640949ab9051929, []int{0}
}
func (m *CodeChangeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CodeChangeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CodeChangeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CodeChangeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CodeChangeInfo.Merge(m, src)
}
func (m *CodeChangeInfo) XXX_Size() int {
	return m.Size()
}
func (m *CodeChangeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CodeChangeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CodeChangeInfo proto.InternalMessageInfo

func (m *CodeChangeInfo) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *CodeChangeInfo) GetSecurity() *Qot_Common.Security {
	if m != nil {
		return m.Security
	}
	return nil
}

func (m *CodeChangeInfo) GetRelatedSecurity() *Qot_Common.Security {
	if m != nil {
		return m.RelatedSecurity
	}
	return nil
}

func (m *CodeChangeInfo) GetPublicTime() string {
	if m != nil {
		return m.PublicTime
	}
	return ""
}

func (m *CodeChangeInfo) GetPublicTimestamp() float64 {
	if m != nil {
		return m.PublicTimestamp
	}
	return 0
}

func (m *CodeChangeInfo) GetEffectiveTime() string {
	if m != nil {
		return m.EffectiveTime
	}
	return ""
}

func (m *CodeChangeInfo) GetEffectiveTimestamp() float64 {
	if m != nil {
		return m.EffectiveTimestamp
	}
	return 0
}

func (m *CodeChangeInfo) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *CodeChangeInfo) GetEndTimestamp() float64 {
	if m != nil {
		return m.EndTimestamp
	}
	return 0
}

type TimeFilter struct {
	Type      int32  `protobuf:"varint,1,req,name=type" json:"type"`
	BeginTime string `protobuf:"bytes,2,opt,name=beginTime" json:"beginTime"`
	EndTime   string `protobuf:"bytes,3,opt,name=endTime" json:"endTime"`
}

func (m *TimeFilter) Reset()         { *m = TimeFilter{} }
func (m *TimeFilter) String() string { return proto.CompactTextString(m) }
func (*TimeFilter) ProtoMessage()    {}
func (*TimeFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_4640949ab9051929, []int{1}
}
func (m *TimeFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimeFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimeFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TimeFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeFilter.Merge(m, src)
}
func (m *TimeFilter) XXX_Size() int {
	return m.Size()
}
func (m *TimeFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeFilter.DiscardUnknown(m)
}

var xxx_messageInfo_TimeFilter proto.InternalMessageInfo

func (m *TimeFilter) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *TimeFilter) GetBeginTime() string {
	if m != nil {
		return m.BeginTime
	}
	return ""
}

func (m *TimeFilter) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

type C2S struct {
	PlaceHolder    int32                  `protobuf:"varint,1,opt,name=placeHolder" json:"placeHolder"`
	SecurityList   []*Qot_Common.Security `protobuf:"bytes,2,rep,name=securityList" json:"securityList,omitempty"`
	TimeFilterList []*TimeFilter          `protobuf:"bytes,3,rep,name=timeFilterList" json:"timeFilterList,omitempty"`
	TypeList       []int32                `protobuf:"varint,4,rep,name=typeList" json:"typeList,omitempty"`
}

func (m *C2S) Reset()         { *m = C2S{} }
func (m *C2S) String() string { return proto.CompactTextString(m) }
func (*C2S) ProtoMessage()    {}
func (*C2S) Descriptor() ([]byte, []int) {
	return fileDescriptor_4640949ab9051929, []int{2}
}
func (m *C2S) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S.Merge(m, src)
}
func (m *C2S) XXX_Size() int {
	return m.Size()
}
func (m *C2S) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S.DiscardUnknown(m)
}

var xxx_messageInfo_C2S proto.InternalMessageInfo

func (m *C2S) GetPlaceHolder() int32 {
	if m != nil {
		return m.PlaceHolder
	}
	return 0
}

func (m *C2S) GetSecurityList() []*Qot_Common.Security {
	if m != nil {
		return m.SecurityList
	}
	return nil
}

func (m *C2S) GetTimeFilterList() []*TimeFilter {
	if m != nil {
		return m.TimeFilterList
	}
	return nil
}

func (m *C2S) GetTypeList() []int32 {
	if m != nil {
		return m.TypeList
	}
	return nil
}

type S2C struct {
	CodeChangeList []*CodeChangeInfo `protobuf:"bytes,1,rep,name=codeChangeList" json:"codeChangeList,omitempty"`
}

func (m *S2C) Reset()         { *m = S2C{} }
func (m *S2C) String() string { return proto.CompactTextString(m) }
func (*S2C) ProtoMessage()    {}
func (*S2C) Descriptor() ([]byte, []int) {
	return fileDescriptor_4640949ab9051929, []int{3}
}
func (m *S2C) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C.Merge(m, src)
}
func (m *S2C) XXX_Size() int {
	return m.Size()
}
func (m *S2C) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C.DiscardUnknown(m)
}

var xxx_messageInfo_S2C proto.InternalMessageInfo

func (m *S2C) GetCodeChangeList() []*CodeChangeInfo {
	if m != nil {
		return m.CodeChangeList
	}
	return nil
}

type Request struct {
	C2S *C2S `protobuf:"bytes,1,req,name=c2s" json:"c2s,omitempty"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_4640949ab9051929, []int{4}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return m.Size()
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetC2S() *C2S {
	if m != nil {
		return m.C2S
	}
	return nil
}

type Response struct {
	RetType *int32 `protobuf:"varint,1,req,name=retType,def=-400" json:"retType,omitempty"`
	RetMsg  string `protobuf:"bytes,2,opt,name=retMsg" json:"retMsg"`
	ErrCode int32  `protobuf:"varint,3,opt,name=errCode" json:"errCode"`
	S2C     *S2C   `protobuf:"bytes,4,opt,name=s2c" json:"s2c,omitempty"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_4640949ab9051929, []int{5}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return m.Size()
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

const Default_Response_RetType int32 = -400

func (m *Response) GetRetType() int32 {
	if m != nil && m.RetType != nil {
		return *m.RetType
	}
	return Default_Response_RetType
}

func (m *Response) GetRetMsg() string {
	if m != nil {
		return m.RetMsg
	}
	return ""
}

func (m *Response) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *Response) GetS2C() *S2C {
	if m != nil {
		return m.S2C
	}
	return nil
}

func init() {
	proto.RegisterEnum("Qot_GetCodeChange.CodeChangeType", CodeChangeType_name, CodeChangeType_value)
	proto.RegisterEnum("Qot_GetCodeChange.TimeFilterType", TimeFilterType_name, TimeFilterType_value)
	proto.RegisterType((*CodeChangeInfo)(nil), "Qot_GetCodeChange.CodeChangeInfo")
	proto.RegisterType((*TimeFilter)(nil), "Qot_GetCodeChange.TimeFilter")
	proto.RegisterType((*C2S)(nil), "Qot_GetCodeChange.C2S")
	proto.RegisterType((*S2C)(nil), "Qot_GetCodeChange.S2C")
	proto.RegisterType((*Request)(nil), "Qot_GetCodeChange.Request")
	proto.RegisterType((*Response)(nil), "Qot_GetCodeChange.Response")
}

func init() { proto.RegisterFile("Qot_GetCodeChange.proto", fileDescriptor_4640949ab9051929) }

var fileDescriptor_4640949ab9051929 = []byte{
	// 669 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0x41, 0x6f, 0xd3, 0x30,
	0x18, 0xad, 0x93, 0x76, 0xed, 0xbe, 0x8d, 0x2e, 0x98, 0x31, 0xb2, 0x69, 0x0b, 0x21, 0x42, 0x28,
	0x9a, 0x44, 0x98, 0xc2, 0x0e, 0x88, 0x03, 0x87, 0x55, 0x63, 0x0c, 0x31, 0x31, 0xd2, 0x71, 0xe1,
	0x32, 0xa5, 0xa9, 0xdb, 0x05, 0x5a, 0x3b, 0x24, 0x2e, 0xd3, 0x24, 0x7e, 0x03, 0x42, 0xfc, 0x00,
	0x7e, 0xcf, 0xc4, 0x69, 0x47, 0x4e, 0x08, 0x6d, 0x7f, 0x04, 0xc5, 0x6d, 0xd3, 0x24, 0x33, 0xbb,
	0xc5, 0xef, 0xbd, 0xef, 0x7d, 0x9f, 0xfd, 0x62, 0xc3, 0xbd, 0x77, 0x8c, 0x1f, 0xef, 0x11, 0xde,
	0x62, 0x5d, 0xd2, 0x3a, 0xf1, 0x69, 0x9f, 0x38, 0x51, 0xcc, 0x38, 0xc3, 0xb7, 0xaf, 0x11, 0x6b,
	0x8b, 0x2d, 0x36, 0x1c, 0x32, 0x3a, 0x16, 0xac, 0x69, 0xa9, 0x20, 0x8f, 0x58, 0x3f, 0x55, 0x68,
	0xce, 0xe4, 0xfb, 0xb4, 0xc7, 0xb0, 0x0e, 0x55, 0x7e, 0x16, 0x11, 0x1d, 0x99, 0x8a, 0x5d, 0xdb,
	0xa9, 0x9e, 0xff, 0xb9, 0x5f, 0xf1, 0x04, 0x82, 0xb7, 0xa0, 0x91, 0x90, 0x60, 0x14, 0x87, 0xfc,
	0x4c, 0x57, 0x4c, 0xc5, 0x5e, 0x70, 0x97, 0x9d, 0x9c, 0x63, 0x7b, 0xc2, 0x79, 0x99, 0x0a, 0xbf,
	0x80, 0xa5, 0x98, 0x0c, 0x7c, 0x4e, 0xba, 0x53, 0x52, 0x57, 0x6f, 0x28, 0x2c, 0x8b, 0xf1, 0x43,
	0x80, 0x68, 0xd4, 0x19, 0x84, 0xc1, 0x51, 0x38, 0x24, 0x7a, 0xd5, 0x44, 0xf6, 0xfc, 0x64, 0xa2,
	0x1c, 0x8e, 0x1d, 0x58, 0x9a, 0xad, 0x12, 0xee, 0x0f, 0x23, 0xbd, 0x66, 0x22, 0x1b, 0x4d, 0xa4,
	0x65, 0x12, 0x6f, 0xc2, 0x2d, 0xd2, 0xeb, 0x91, 0x80, 0x87, 0x5f, 0x88, 0x30, 0x9e, 0xcb, 0x19,
	0x17, 0x29, 0xbc, 0x0d, 0xb8, 0x00, 0x8c, 0xed, 0xeb, 0x39, 0x7b, 0x09, 0x8f, 0x0d, 0xa8, 0x13,
	0xda, 0x15, 0xde, 0x8d, 0x9c, 0xf7, 0x14, 0xc4, 0x36, 0x2c, 0x4e, 0x3e, 0xc7, 0x7e, 0xf3, 0x39,
	0xbf, 0x02, 0x63, 0x7d, 0x04, 0x48, 0x17, 0x2f, 0xc3, 0x01, 0x27, 0xf1, 0x0d, 0xd9, 0x58, 0x30,
	0xdf, 0x21, 0xfd, 0x90, 0x8a, 0x9e, 0x4a, 0xae, 0xe7, 0x0c, 0xce, 0x4f, 0xa5, 0x4a, 0xa6, 0xb2,
	0x7e, 0x21, 0x50, 0x5b, 0x6e, 0x1b, 0x3f, 0x82, 0x85, 0x68, 0xe0, 0x07, 0xe4, 0x15, 0x1b, 0x74,
	0x49, 0xac, 0x23, 0x13, 0x65, 0xcd, 0xf2, 0x04, 0x7e, 0x06, 0x8b, 0xd3, 0xa4, 0xdf, 0x84, 0x09,
	0xd7, 0x15, 0x53, 0xfd, 0x6f, 0xb4, 0x05, 0x25, 0xde, 0x85, 0x26, 0xcf, 0x76, 0x25, 0x6a, 0x55,
	0x51, 0xbb, 0xe1, 0x5c, 0xff, 0xb7, 0x67, 0xdb, 0xf7, 0x4a, 0x45, 0x78, 0x0d, 0x1a, 0xe9, 0xe6,
	0x85, 0x41, 0xd5, 0x54, 0xed, 0x9a, 0x97, 0xad, 0xad, 0x43, 0x50, 0xdb, 0x6e, 0x0b, 0xef, 0x43,
	0x33, 0xc8, 0xbc, 0x84, 0x10, 0x89, 0x4e, 0x0f, 0x24, 0x9d, 0x8a, 0x17, 0xc1, 0x2b, 0x15, 0x5a,
	0x4f, 0xa1, 0xee, 0x91, 0xcf, 0x23, 0x92, 0x70, 0x6c, 0x83, 0x1a, 0xb8, 0x89, 0x88, 0x61, 0xc1,
	0x5d, 0x91, 0x59, 0xb9, 0x6d, 0x2f, 0x95, 0x58, 0x3f, 0x10, 0x34, 0x3c, 0x92, 0x44, 0x8c, 0x26,
	0x22, 0x80, 0x98, 0xf0, 0xa3, 0x2c, 0xc1, 0xe7, 0xd5, 0xc7, 0xdb, 0x5b, 0x5b, 0xde, 0x14, 0xc4,
	0xeb, 0x30, 0x17, 0x13, 0x7e, 0x90, 0xf4, 0x0b, 0x09, 0x4e, 0x30, 0x11, 0x5f, 0x1c, 0xa7, 0x4d,
	0x44, 0x7c, 0xb5, 0x2c, 0xbe, 0x31, 0x98, 0x0e, 0x95, 0xb8, 0x81, 0xb8, 0x25, 0xf2, 0xa1, 0xda,
	0x6e, 0xcb, 0x4b, 0x25, 0x9b, 0xdf, 0x94, 0xfc, 0xad, 0x17, 0xad, 0x57, 0xe1, 0x6e, 0x11, 0x39,
	0x7e, 0x4f, 0x3f, 0xb1, 0x53, 0xaa, 0x55, 0xf0, 0x3a, 0xe8, 0x25, 0x6a, 0x8f, 0x0c, 0x8f, 0xd8,
	0x81, 0x1f, 0x52, 0x0d, 0x49, 0x0b, 0x23, 0x3f, 0xec, 0x6a, 0x8a, 0xa4, 0x70, 0x72, 0x9a, 0x8c,
	0x6b, 0x2a, 0xd6, 0x61, 0xb9, 0xc4, 0xb6, 0xa3, 0x41, 0xc8, 0xb5, 0xaa, 0x84, 0x79, 0xcd, 0x42,
	0xca, 0xb5, 0x1a, 0xde, 0x80, 0x55, 0x19, 0x33, 0x2e, 0x9c, 0x93, 0xd0, 0x82, 0x19, 0x57, 0xd7,
	0x25, 0xbe, 0x6f, 0xf9, 0x09, 0x89, 0xb5, 0xc6, 0xe6, 0x57, 0x68, 0xce, 0x7e, 0xb3, 0xe9, 0x79,
	0x14, 0x91, 0xf4, 0x3c, 0x28, 0x3b, 0xd5, 0x2a, 0x12, 0xea, 0x50, 0x3c, 0x30, 0x1a, 0x4a, 0x77,
	0x5c, 0xa2, 0x76, 0xa7, 0x8f, 0x83, 0xa6, 0xe0, 0x15, 0xc0, 0x65, 0x96, 0x76, 0x35, 0x75, 0x67,
	0xf7, 0xfc, 0xd2, 0x40, 0x17, 0x97, 0x06, 0xfa, 0x7b, 0x69, 0xa0, 0xef, 0x57, 0x46, 0xe5, 0xe2,
	0xca, 0xa8, 0xfc, 0xbe, 0x32, 0x2a, 0x70, 0x27, 0x60, 0x43, 0xa7, 0x37, 0xe2, 0x23, 0x87, 0x45,
	0x84, 0xfa, 0x51, 0xe8, 0x44, 0x9d, 0x0f, 0x2b, 0x51, 0xa7, 0xcf, 0x9e, 0x5c, 0x8b, 0xf7, 0x5f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xb4, 0x51, 0xb8, 0x33, 0x18, 0x06, 0x00, 0x00,
}

func (m *CodeChangeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CodeChangeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CodeChangeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.EndTimestamp))))
	i--
	dAtA[i] = 0x49
	i -= len(m.EndTime)
	copy(dAtA[i:], m.EndTime)
	i = encodeVarintQot_GetCodeChange(dAtA, i, uint64(len(m.EndTime)))
	i--
	dAtA[i] = 0x42
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.EffectiveTimestamp))))
	i--
	dAtA[i] = 0x39
	i -= len(m.EffectiveTime)
	copy(dAtA[i:], m.EffectiveTime)
	i = encodeVarintQot_GetCodeChange(dAtA, i, uint64(len(m.EffectiveTime)))
	i--
	dAtA[i] = 0x32
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.PublicTimestamp))))
	i--
	dAtA[i] = 0x29
	i -= len(m.PublicTime)
	copy(dAtA[i:], m.PublicTime)
	i = encodeVarintQot_GetCodeChange(dAtA, i, uint64(len(m.PublicTime)))
	i--
	dAtA[i] = 0x22
	if m.RelatedSecurity == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("relatedSecurity")
	} else {
		{
			size, err := m.RelatedSecurity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQot_GetCodeChange(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Security == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("security")
	} else {
		{
			size, err := m.Security.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQot_GetCodeChange(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	i = encodeVarintQot_GetCodeChange(dAtA, i, uint64(m.Type))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *TimeFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimeFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimeFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.EndTime)
	copy(dAtA[i:], m.EndTime)
	i = encodeVarintQot_GetCodeChange(dAtA, i, uint64(len(m.EndTime)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.BeginTime)
	copy(dAtA[i:], m.BeginTime)
	i = encodeVarintQot_GetCodeChange(dAtA, i, uint64(len(m.BeginTime)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintQot_GetCodeChange(dAtA, i, uint64(m.Type))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *C2S) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TypeList) > 0 {
		for iNdEx := len(m.TypeList) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintQot_GetCodeChange(dAtA, i, uint64(m.TypeList[iNdEx]))
			i--
			dAtA[i] = 0x20
		}
	}
	if len(m.TimeFilterList) > 0 {
		for iNdEx := len(m.TimeFilterList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TimeFilterList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQot_GetCodeChange(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.SecurityList) > 0 {
		for iNdEx := len(m.SecurityList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SecurityList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQot_GetCodeChange(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	i = encodeVarintQot_GetCodeChange(dAtA, i, uint64(m.PlaceHolder))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *S2C) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CodeChangeList) > 0 {
		for iNdEx := len(m.CodeChangeList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CodeChangeList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQot_GetCodeChange(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.C2S == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("c2s")
	} else {
		{
			size, err := m.C2S.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQot_GetCodeChange(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.S2C != nil {
		{
			size, err := m.S2C.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQot_GetCodeChange(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	i = encodeVarintQot_GetCodeChange(dAtA, i, uint64(m.ErrCode))
	i--
	dAtA[i] = 0x18
	i -= len(m.RetMsg)
	copy(dAtA[i:], m.RetMsg)
	i = encodeVarintQot_GetCodeChange(dAtA, i, uint64(len(m.RetMsg)))
	i--
	dAtA[i] = 0x12
	if m.RetType == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("retType")
	} else {
		i = encodeVarintQot_GetCodeChange(dAtA, i, uint64(*m.RetType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQot_GetCodeChange(dAtA []byte, offset int, v uint64) int {
	offset -= sovQot_GetCodeChange(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CodeChangeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovQot_GetCodeChange(uint64(m.Type))
	if m.Security != nil {
		l = m.Security.Size()
		n += 1 + l + sovQot_GetCodeChange(uint64(l))
	}
	if m.RelatedSecurity != nil {
		l = m.RelatedSecurity.Size()
		n += 1 + l + sovQot_GetCodeChange(uint64(l))
	}
	l = len(m.PublicTime)
	n += 1 + l + sovQot_GetCodeChange(uint64(l))
	n += 9
	l = len(m.EffectiveTime)
	n += 1 + l + sovQot_GetCodeChange(uint64(l))
	n += 9
	l = len(m.EndTime)
	n += 1 + l + sovQot_GetCodeChange(uint64(l))
	n += 9
	return n
}

func (m *TimeFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovQot_GetCodeChange(uint64(m.Type))
	l = len(m.BeginTime)
	n += 1 + l + sovQot_GetCodeChange(uint64(l))
	l = len(m.EndTime)
	n += 1 + l + sovQot_GetCodeChange(uint64(l))
	return n
}

func (m *C2S) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovQot_GetCodeChange(uint64(m.PlaceHolder))
	if len(m.SecurityList) > 0 {
		for _, e := range m.SecurityList {
			l = e.Size()
			n += 1 + l + sovQot_GetCodeChange(uint64(l))
		}
	}
	if len(m.TimeFilterList) > 0 {
		for _, e := range m.TimeFilterList {
			l = e.Size()
			n += 1 + l + sovQot_GetCodeChange(uint64(l))
		}
	}
	if len(m.TypeList) > 0 {
		for _, e := range m.TypeList {
			n += 1 + sovQot_GetCodeChange(uint64(e))
		}
	}
	return n
}

func (m *S2C) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CodeChangeList) > 0 {
		for _, e := range m.CodeChangeList {
			l = e.Size()
			n += 1 + l + sovQot_GetCodeChange(uint64(l))
		}
	}
	return n
}

func (m *Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.C2S != nil {
		l = m.C2S.Size()
		n += 1 + l + sovQot_GetCodeChange(uint64(l))
	}
	return n
}

func (m *Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetType != nil {
		n += 1 + sovQot_GetCodeChange(uint64(*m.RetType))
	}
	l = len(m.RetMsg)
	n += 1 + l + sovQot_GetCodeChange(uint64(l))
	n += 1 + sovQot_GetCodeChange(uint64(m.ErrCode))
	if m.S2C != nil {
		l = m.S2C.Size()
		n += 1 + l + sovQot_GetCodeChange(uint64(l))
	}
	return n
}

func sovQot_GetCodeChange(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQot_GetCodeChange(x uint64) (n int) {
	return sovQot_GetCodeChange(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CodeChangeInfo) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_GetCodeChange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CodeChangeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CodeChangeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetCodeChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Security", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetCodeChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_GetCodeChange
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetCodeChange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Security == nil {
				m.Security = &Qot_Common.Security{}
			}
			if err := m.Security.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelatedSecurity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetCodeChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_GetCodeChange
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetCodeChange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RelatedSecurity == nil {
				m.RelatedSecurity = &Qot_Common.Security{}
			}
			if err := m.RelatedSecurity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetCodeChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQot_GetCodeChange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetCodeChange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicTimestamp", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.PublicTimestamp = float64(math.Float64frombits(v))
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetCodeChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQot_GetCodeChange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetCodeChange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EffectiveTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveTimestamp", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.EffectiveTimestamp = float64(math.Float64frombits(v))
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetCodeChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQot_GetCodeChange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetCodeChange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTimestamp", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.EndTimestamp = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipQot_GetCodeChange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_GetCodeChange
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_GetCodeChange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("type")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("security")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("relatedSecurity")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimeFilter) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_GetCodeChange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimeFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimeFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetCodeChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetCodeChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQot_GetCodeChange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetCodeChange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BeginTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetCodeChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQot_GetCodeChange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetCodeChange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQot_GetCodeChange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_GetCodeChange
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_GetCodeChange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("type")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_GetCodeChange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlaceHolder", wireType)
			}
			m.PlaceHolder = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetCodeChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlaceHolder |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetCodeChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_GetCodeChange
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetCodeChange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityList = append(m.SecurityList, &Qot_Common.Security{})
			if err := m.SecurityList[len(m.SecurityList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeFilterList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetCodeChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_GetCodeChange
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetCodeChange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimeFilterList = append(m.TimeFilterList, &TimeFilter{})
			if err := m.TimeFilterList[len(m.TimeFilterList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQot_GetCodeChange
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TypeList = append(m.TypeList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQot_GetCodeChange
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQot_GetCodeChange
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQot_GetCodeChange
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TypeList) == 0 {
					m.TypeList = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQot_GetCodeChange
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TypeList = append(m.TypeList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeList", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQot_GetCodeChange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_GetCodeChange
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_GetCodeChange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_GetCodeChange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeChangeList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetCodeChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_GetCodeChange
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetCodeChange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CodeChangeList = append(m.CodeChangeList, &CodeChangeInfo{})
			if err := m.CodeChangeList[len(m.CodeChangeList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQot_GetCodeChange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_GetCodeChange
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_GetCodeChange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Request) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_GetCodeChange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field C2S", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetCodeChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_GetCodeChange
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetCodeChange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.C2S == nil {
				m.C2S = &C2S{}
			}
			if err := m.C2S.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipQot_GetCodeChange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_GetCodeChange
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_GetCodeChange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("c2s")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_GetCodeChange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetCodeChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetType = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetCodeChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQot_GetCodeChange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetCodeChange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RetMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			m.ErrCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetCodeChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S2C", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetCodeChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_GetCodeChange
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetCodeChange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.S2C == nil {
				m.S2C = &S2C{}
			}
			if err := m.S2C.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQot_GetCodeChange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_GetCodeChange
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_GetCodeChange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("retType")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQot_GetCodeChange(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQot_GetCodeChange
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQot_GetCodeChange
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQot_GetCodeChange
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQot_GetCodeChange
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthQot_GetCodeChange
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowQot_GetCodeChange
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipQot_GetCodeChange(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthQot_GetCodeChange
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthQot_GetCodeChange = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQot_GetCodeChange   = fmt.Errorf("proto: integer overflow")
)
