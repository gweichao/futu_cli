// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: Qot_GetFutureInfo.proto

package Qot_GetFutureInfo

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	_ "pbgo/Common"
	Qot_Common "pbgo/Qot_Common"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//交易时间
type TradeTime struct {
	Begin float64 `protobuf:"fixed64,1,opt,name=begin" json:"begin"`
	End   float64 `protobuf:"fixed64,2,opt,name=end" json:"end"`
}

func (m *TradeTime) Reset()         { *m = TradeTime{} }
func (m *TradeTime) String() string { return proto.CompactTextString(m) }
func (*TradeTime) ProtoMessage()    {}
func (*TradeTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9fad9cc5a24f070, []int{0}
}
func (m *TradeTime) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TradeTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TradeTime.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TradeTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradeTime.Merge(m, src)
}
func (m *TradeTime) XXX_Size() int {
	return m.Size()
}
func (m *TradeTime) XXX_DiscardUnknown() {
	xxx_messageInfo_TradeTime.DiscardUnknown(m)
}

var xxx_messageInfo_TradeTime proto.InternalMessageInfo

func (m *TradeTime) GetBegin() float64 {
	if m != nil {
		return m.Begin
	}
	return 0
}

func (m *TradeTime) GetEnd() float64 {
	if m != nil {
		return m.End
	}
	return 0
}

//期货合约资料的列表
type FutureInfo struct {
	Name               string               `protobuf:"bytes,1,req,name=name" json:"name"`
	Security           *Qot_Common.Security `protobuf:"bytes,2,req,name=security" json:"security,omitempty"`
	LastTradeTime      string               `protobuf:"bytes,3,req,name=lastTradeTime" json:"lastTradeTime"`
	LastTradeTimestamp float64              `protobuf:"fixed64,4,opt,name=lastTradeTimestamp" json:"lastTradeTimestamp"`
	Owner              *Qot_Common.Security `protobuf:"bytes,5,opt,name=owner" json:"owner,omitempty"`
	OwnerOther         string               `protobuf:"bytes,6,req,name=ownerOther" json:"ownerOther"`
	Exchange           string               `protobuf:"bytes,7,req,name=exchange" json:"exchange"`
	ContractType       string               `protobuf:"bytes,8,req,name=contractType" json:"contractType"`
	ContractSize       float64              `protobuf:"fixed64,9,req,name=contractSize" json:"contractSize"`
	ContractSizeUnit   string               `protobuf:"bytes,10,req,name=contractSizeUnit" json:"contractSizeUnit"`
	QuoteCurrency      string               `protobuf:"bytes,11,req,name=quoteCurrency" json:"quoteCurrency"`
	MinVar             float64              `protobuf:"fixed64,12,req,name=minVar" json:"minVar"`
	MinVarUnit         string               `protobuf:"bytes,13,req,name=minVarUnit" json:"minVarUnit"`
	QuoteUnit          string               `protobuf:"bytes,14,opt,name=quoteUnit" json:"quoteUnit"`
	TradeTime          []*TradeTime         `protobuf:"bytes,15,rep,name=tradeTime" json:"tradeTime,omitempty"`
	TimeZone           string               `protobuf:"bytes,16,req,name=timeZone" json:"timeZone"`
	ExchangeFormatUrl  string               `protobuf:"bytes,17,req,name=exchangeFormatUrl" json:"exchangeFormatUrl"`
}

func (m *FutureInfo) Reset()         { *m = FutureInfo{} }
func (m *FutureInfo) String() string { return proto.CompactTextString(m) }
func (*FutureInfo) ProtoMessage()    {}
func (*FutureInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9fad9cc5a24f070, []int{1}
}
func (m *FutureInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FutureInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FutureInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FutureInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FutureInfo.Merge(m, src)
}
func (m *FutureInfo) XXX_Size() int {
	return m.Size()
}
func (m *FutureInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FutureInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FutureInfo proto.InternalMessageInfo

func (m *FutureInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FutureInfo) GetSecurity() *Qot_Common.Security {
	if m != nil {
		return m.Security
	}
	return nil
}

func (m *FutureInfo) GetLastTradeTime() string {
	if m != nil {
		return m.LastTradeTime
	}
	return ""
}

func (m *FutureInfo) GetLastTradeTimestamp() float64 {
	if m != nil {
		return m.LastTradeTimestamp
	}
	return 0
}

func (m *FutureInfo) GetOwner() *Qot_Common.Security {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *FutureInfo) GetOwnerOther() string {
	if m != nil {
		return m.OwnerOther
	}
	return ""
}

func (m *FutureInfo) GetExchange() string {
	if m != nil {
		return m.Exchange
	}
	return ""
}

func (m *FutureInfo) GetContractType() string {
	if m != nil {
		return m.ContractType
	}
	return ""
}

func (m *FutureInfo) GetContractSize() float64 {
	if m != nil {
		return m.ContractSize
	}
	return 0
}

func (m *FutureInfo) GetContractSizeUnit() string {
	if m != nil {
		return m.ContractSizeUnit
	}
	return ""
}

func (m *FutureInfo) GetQuoteCurrency() string {
	if m != nil {
		return m.QuoteCurrency
	}
	return ""
}

func (m *FutureInfo) GetMinVar() float64 {
	if m != nil {
		return m.MinVar
	}
	return 0
}

func (m *FutureInfo) GetMinVarUnit() string {
	if m != nil {
		return m.MinVarUnit
	}
	return ""
}

func (m *FutureInfo) GetQuoteUnit() string {
	if m != nil {
		return m.QuoteUnit
	}
	return ""
}

func (m *FutureInfo) GetTradeTime() []*TradeTime {
	if m != nil {
		return m.TradeTime
	}
	return nil
}

func (m *FutureInfo) GetTimeZone() string {
	if m != nil {
		return m.TimeZone
	}
	return ""
}

func (m *FutureInfo) GetExchangeFormatUrl() string {
	if m != nil {
		return m.ExchangeFormatUrl
	}
	return ""
}

type C2S struct {
	SecurityList []*Qot_Common.Security `protobuf:"bytes,1,rep,name=securityList" json:"securityList,omitempty"`
}

func (m *C2S) Reset()         { *m = C2S{} }
func (m *C2S) String() string { return proto.CompactTextString(m) }
func (*C2S) ProtoMessage()    {}
func (*C2S) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9fad9cc5a24f070, []int{2}
}
func (m *C2S) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S.Merge(m, src)
}
func (m *C2S) XXX_Size() int {
	return m.Size()
}
func (m *C2S) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S.DiscardUnknown(m)
}

var xxx_messageInfo_C2S proto.InternalMessageInfo

func (m *C2S) GetSecurityList() []*Qot_Common.Security {
	if m != nil {
		return m.SecurityList
	}
	return nil
}

type S2C struct {
	FutureInfoList []*FutureInfo `protobuf:"bytes,1,rep,name=futureInfoList" json:"futureInfoList,omitempty"`
}

func (m *S2C) Reset()         { *m = S2C{} }
func (m *S2C) String() string { return proto.CompactTextString(m) }
func (*S2C) ProtoMessage()    {}
func (*S2C) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9fad9cc5a24f070, []int{3}
}
func (m *S2C) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C.Merge(m, src)
}
func (m *S2C) XXX_Size() int {
	return m.Size()
}
func (m *S2C) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C.DiscardUnknown(m)
}

var xxx_messageInfo_S2C proto.InternalMessageInfo

func (m *S2C) GetFutureInfoList() []*FutureInfo {
	if m != nil {
		return m.FutureInfoList
	}
	return nil
}

type Request struct {
	C2S *C2S `protobuf:"bytes,1,req,name=c2s" json:"c2s,omitempty"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9fad9cc5a24f070, []int{4}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return m.Size()
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetC2S() *C2S {
	if m != nil {
		return m.C2S
	}
	return nil
}

type Response struct {
	RetType *int32 `protobuf:"varint,1,req,name=retType,def=-400" json:"retType,omitempty"`
	RetMsg  string `protobuf:"bytes,2,opt,name=retMsg" json:"retMsg"`
	ErrCode int32  `protobuf:"varint,3,opt,name=errCode" json:"errCode"`
	S2C     *S2C   `protobuf:"bytes,4,opt,name=s2c" json:"s2c,omitempty"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9fad9cc5a24f070, []int{5}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return m.Size()
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

const Default_Response_RetType int32 = -400

func (m *Response) GetRetType() int32 {
	if m != nil && m.RetType != nil {
		return *m.RetType
	}
	return Default_Response_RetType
}

func (m *Response) GetRetMsg() string {
	if m != nil {
		return m.RetMsg
	}
	return ""
}

func (m *Response) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *Response) GetS2C() *S2C {
	if m != nil {
		return m.S2C
	}
	return nil
}

func init() {
	proto.RegisterType((*TradeTime)(nil), "Qot_GetFutureInfo.TradeTime")
	proto.RegisterType((*FutureInfo)(nil), "Qot_GetFutureInfo.FutureInfo")
	proto.RegisterType((*C2S)(nil), "Qot_GetFutureInfo.C2S")
	proto.RegisterType((*S2C)(nil), "Qot_GetFutureInfo.S2C")
	proto.RegisterType((*Request)(nil), "Qot_GetFutureInfo.Request")
	proto.RegisterType((*Response)(nil), "Qot_GetFutureInfo.Response")
}

func init() { proto.RegisterFile("Qot_GetFutureInfo.proto", fileDescriptor_e9fad9cc5a24f070) }

var fileDescriptor_e9fad9cc5a24f070 = []byte{
	// 605 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x93, 0x4f, 0x4f, 0xd4, 0x40,
	0x18, 0xc6, 0x77, 0xf6, 0x0f, 0xec, 0xbe, 0xbb, 0x20, 0x8c, 0x06, 0x27, 0x04, 0x6b, 0xd3, 0x78,
	0x68, 0x48, 0x5c, 0x37, 0x95, 0x83, 0xe1, 0x42, 0x42, 0x03, 0xc6, 0x04, 0x63, 0xec, 0x82, 0x07,
	0x2e, 0xa6, 0x94, 0x97, 0xa5, 0x09, 0x9d, 0x29, 0xd3, 0xd9, 0x28, 0x7e, 0x0a, 0xe3, 0xa7, 0xe2,
	0xc8, 0xd1, 0x78, 0x30, 0x06, 0xbe, 0x88, 0x99, 0xee, 0xb6, 0x3b, 0x75, 0xd7, 0xdb, 0xf4, 0x79,
	0x7e, 0xf3, 0xf6, 0x99, 0x77, 0xe6, 0x85, 0xa7, 0x1f, 0x85, 0xfa, 0xfc, 0x16, 0xd5, 0xe1, 0x58,
	0x8d, 0x25, 0xbe, 0xe3, 0x17, 0xa2, 0x9f, 0x4a, 0xa1, 0x04, 0x5d, 0x9f, 0x33, 0x36, 0x7b, 0xbe,
	0x48, 0x12, 0xc1, 0x27, 0xc0, 0xe6, 0x9a, 0x06, 0x4c, 0xc5, 0xd9, 0x83, 0xce, 0xb1, 0x0c, 0xcf,
	0xf1, 0x38, 0x4e, 0x90, 0x6e, 0x42, 0xeb, 0x0c, 0x47, 0x31, 0x67, 0xc4, 0x26, 0x2e, 0xd9, 0x6f,
	0xde, 0xfe, 0x7e, 0x5e, 0x0b, 0x26, 0x12, 0xdd, 0x80, 0x06, 0xf2, 0x73, 0x56, 0x37, 0x1c, 0x2d,
	0x38, 0xbf, 0x5a, 0x00, 0xb3, 0xff, 0x51, 0x06, 0x4d, 0x1e, 0x26, 0xc8, 0x88, 0x5d, 0x77, 0x3b,
	0x53, 0x2e, 0x57, 0xe8, 0x00, 0xda, 0x19, 0x46, 0x63, 0x19, 0xab, 0x1b, 0x56, 0xb7, 0xeb, 0x6e,
	0xd7, 0x7b, 0xd2, 0x37, 0xe2, 0x0c, 0xa7, 0x5e, 0x50, 0x52, 0x74, 0x1b, 0x56, 0xae, 0xc2, 0x4c,
	0x95, 0xf9, 0x58, 0xc3, 0x28, 0x5a, 0xb5, 0xe8, 0x0e, 0xd0, 0x8a, 0x90, 0xa9, 0x30, 0x49, 0x59,
	0xd3, 0x48, 0xbb, 0xc0, 0xa7, 0xdb, 0xd0, 0x12, 0x5f, 0x38, 0x4a, 0xd6, 0xb2, 0xc9, 0x7f, 0x03,
	0x4d, 0x10, 0xfa, 0x02, 0x20, 0x5f, 0x7c, 0x50, 0x97, 0x28, 0xd9, 0x92, 0x11, 0xc5, 0xd0, 0xa9,
	0x0d, 0x6d, 0xfc, 0x1a, 0x5d, 0x86, 0x7c, 0x84, 0x6c, 0xd9, 0x60, 0x4a, 0x95, 0xba, 0xd0, 0x8b,
	0x04, 0x57, 0x32, 0x8c, 0xd4, 0xf1, 0x4d, 0x8a, 0xac, 0x6d, 0x50, 0x15, 0xc7, 0x24, 0x87, 0xf1,
	0x37, 0x64, 0x1d, 0xbb, 0x5e, 0x9e, 0xa6, 0xe2, 0xd0, 0x01, 0xac, 0x99, 0xdf, 0x27, 0x3c, 0x56,
	0x0c, 0x8c, 0xba, 0x73, 0xae, 0xee, 0xed, 0xf5, 0x58, 0x28, 0xf4, 0xc7, 0x52, 0x22, 0x8f, 0x6e,
	0x58, 0xd7, 0xec, 0x6d, 0xc5, 0xa2, 0x5b, 0xb0, 0x94, 0xc4, 0xfc, 0x53, 0x28, 0x59, 0xcf, 0x48,
	0x30, 0xd5, 0x74, 0x5f, 0x26, 0xab, 0xfc, 0xaf, 0x2b, 0x66, 0x5f, 0x66, 0x3a, 0x75, 0xa0, 0x93,
	0x17, 0xcd, 0xa1, 0x55, 0x9b, 0x94, 0xd0, 0x4c, 0xa6, 0xbb, 0xd0, 0x51, 0xe5, 0x5d, 0x3f, 0xb2,
	0x1b, 0x6e, 0xd7, 0xdb, 0xea, 0xcf, 0xbf, 0xf5, 0xf2, 0x0e, 0x83, 0x19, 0xae, 0xfb, 0xae, 0xe2,
	0x04, 0x4f, 0x05, 0x47, 0xb6, 0x66, 0xf6, 0xbd, 0x50, 0xa9, 0x07, 0xeb, 0xc5, 0x1d, 0x1c, 0x0a,
	0x99, 0x84, 0xea, 0x44, 0x5e, 0xb1, 0x75, 0x03, 0x9d, 0xb7, 0x9d, 0x3d, 0x68, 0xf8, 0xde, 0x90,
	0xbe, 0x81, 0x5e, 0xf1, 0x28, 0x8f, 0xe2, 0x4c, 0x31, 0x92, 0x67, 0x5b, 0xfc, 0x5a, 0x2a, 0xa4,
	0x73, 0x04, 0x8d, 0xa1, 0xe7, 0xd3, 0x03, 0x58, 0xbd, 0x28, 0x0f, 0x60, 0x94, 0x78, 0xb6, 0xe0,
	0x78, 0xb3, 0x65, 0xf0, 0xcf, 0x26, 0xe7, 0x35, 0x2c, 0x07, 0x78, 0x3d, 0xc6, 0x4c, 0x51, 0x17,
	0x1a, 0x91, 0x97, 0xe5, 0x63, 0xd6, 0xf5, 0x36, 0x16, 0x94, 0xf1, 0xbd, 0x61, 0xa0, 0x11, 0xe7,
	0x07, 0x81, 0x76, 0x80, 0x59, 0x2a, 0x78, 0x86, 0xd4, 0x82, 0x65, 0x89, 0x93, 0x77, 0xa7, 0xb7,
	0xb6, 0x76, 0x9b, 0x2f, 0x77, 0x06, 0x83, 0xa0, 0x10, 0xf5, 0x55, 0x4b, 0x54, 0xef, 0xb3, 0x51,
	0x3e, 0xe8, 0x45, 0x67, 0xa6, 0x9a, 0xde, 0x8d, 0x52, 0xfa, 0xe2, 0x5c, 0x8f, 0x22, 0x71, 0x5b,
	0x53, 0xbb, 0x10, 0x75, 0xa8, 0xcc, 0x8b, 0xf2, 0xa9, 0x5b, 0x1c, 0x6a, 0xe8, 0xf9, 0x81, 0x46,
	0xf6, 0x0f, 0x6e, 0xef, 0x2d, 0x72, 0x77, 0x6f, 0x91, 0x3f, 0xf7, 0x16, 0xf9, 0xfe, 0x60, 0xd5,
	0xee, 0x1e, 0xac, 0xda, 0xcf, 0x07, 0xab, 0x06, 0x8f, 0x23, 0x91, 0xf4, 0xf5, 0xb9, 0xfb, 0x22,
	0x45, 0x1e, 0xa6, 0x71, 0x3f, 0x3d, 0x3b, 0xdd, 0x48, 0xcf, 0x46, 0xe2, 0xd5, 0x5c, 0xbd, 0xbf,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x70, 0xf9, 0x20, 0x8f, 0x0a, 0x05, 0x00, 0x00,
}

func (m *TradeTime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TradeTime) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TradeTime) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.End))))
	i--
	dAtA[i] = 0x11
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Begin))))
	i--
	dAtA[i] = 0x9
	return len(dAtA) - i, nil
}

func (m *FutureInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FutureInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FutureInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.ExchangeFormatUrl)
	copy(dAtA[i:], m.ExchangeFormatUrl)
	i = encodeVarintQot_GetFutureInfo(dAtA, i, uint64(len(m.ExchangeFormatUrl)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x8a
	i -= len(m.TimeZone)
	copy(dAtA[i:], m.TimeZone)
	i = encodeVarintQot_GetFutureInfo(dAtA, i, uint64(len(m.TimeZone)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x82
	if len(m.TradeTime) > 0 {
		for iNdEx := len(m.TradeTime) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TradeTime[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQot_GetFutureInfo(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x7a
		}
	}
	i -= len(m.QuoteUnit)
	copy(dAtA[i:], m.QuoteUnit)
	i = encodeVarintQot_GetFutureInfo(dAtA, i, uint64(len(m.QuoteUnit)))
	i--
	dAtA[i] = 0x72
	i -= len(m.MinVarUnit)
	copy(dAtA[i:], m.MinVarUnit)
	i = encodeVarintQot_GetFutureInfo(dAtA, i, uint64(len(m.MinVarUnit)))
	i--
	dAtA[i] = 0x6a
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MinVar))))
	i--
	dAtA[i] = 0x61
	i -= len(m.QuoteCurrency)
	copy(dAtA[i:], m.QuoteCurrency)
	i = encodeVarintQot_GetFutureInfo(dAtA, i, uint64(len(m.QuoteCurrency)))
	i--
	dAtA[i] = 0x5a
	i -= len(m.ContractSizeUnit)
	copy(dAtA[i:], m.ContractSizeUnit)
	i = encodeVarintQot_GetFutureInfo(dAtA, i, uint64(len(m.ContractSizeUnit)))
	i--
	dAtA[i] = 0x52
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ContractSize))))
	i--
	dAtA[i] = 0x49
	i -= len(m.ContractType)
	copy(dAtA[i:], m.ContractType)
	i = encodeVarintQot_GetFutureInfo(dAtA, i, uint64(len(m.ContractType)))
	i--
	dAtA[i] = 0x42
	i -= len(m.Exchange)
	copy(dAtA[i:], m.Exchange)
	i = encodeVarintQot_GetFutureInfo(dAtA, i, uint64(len(m.Exchange)))
	i--
	dAtA[i] = 0x3a
	i -= len(m.OwnerOther)
	copy(dAtA[i:], m.OwnerOther)
	i = encodeVarintQot_GetFutureInfo(dAtA, i, uint64(len(m.OwnerOther)))
	i--
	dAtA[i] = 0x32
	if m.Owner != nil {
		{
			size, err := m.Owner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQot_GetFutureInfo(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.LastTradeTimestamp))))
	i--
	dAtA[i] = 0x21
	i -= len(m.LastTradeTime)
	copy(dAtA[i:], m.LastTradeTime)
	i = encodeVarintQot_GetFutureInfo(dAtA, i, uint64(len(m.LastTradeTime)))
	i--
	dAtA[i] = 0x1a
	if m.Security == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("security")
	} else {
		{
			size, err := m.Security.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQot_GetFutureInfo(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintQot_GetFutureInfo(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *C2S) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SecurityList) > 0 {
		for iNdEx := len(m.SecurityList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SecurityList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQot_GetFutureInfo(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *S2C) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FutureInfoList) > 0 {
		for iNdEx := len(m.FutureInfoList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FutureInfoList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQot_GetFutureInfo(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.C2S == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("c2s")
	} else {
		{
			size, err := m.C2S.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQot_GetFutureInfo(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.S2C != nil {
		{
			size, err := m.S2C.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQot_GetFutureInfo(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	i = encodeVarintQot_GetFutureInfo(dAtA, i, uint64(m.ErrCode))
	i--
	dAtA[i] = 0x18
	i -= len(m.RetMsg)
	copy(dAtA[i:], m.RetMsg)
	i = encodeVarintQot_GetFutureInfo(dAtA, i, uint64(len(m.RetMsg)))
	i--
	dAtA[i] = 0x12
	if m.RetType == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("retType")
	} else {
		i = encodeVarintQot_GetFutureInfo(dAtA, i, uint64(*m.RetType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQot_GetFutureInfo(dAtA []byte, offset int, v uint64) int {
	offset -= sovQot_GetFutureInfo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TradeTime) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 9
	n += 9
	return n
}

func (m *FutureInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovQot_GetFutureInfo(uint64(l))
	if m.Security != nil {
		l = m.Security.Size()
		n += 1 + l + sovQot_GetFutureInfo(uint64(l))
	}
	l = len(m.LastTradeTime)
	n += 1 + l + sovQot_GetFutureInfo(uint64(l))
	n += 9
	if m.Owner != nil {
		l = m.Owner.Size()
		n += 1 + l + sovQot_GetFutureInfo(uint64(l))
	}
	l = len(m.OwnerOther)
	n += 1 + l + sovQot_GetFutureInfo(uint64(l))
	l = len(m.Exchange)
	n += 1 + l + sovQot_GetFutureInfo(uint64(l))
	l = len(m.ContractType)
	n += 1 + l + sovQot_GetFutureInfo(uint64(l))
	n += 9
	l = len(m.ContractSizeUnit)
	n += 1 + l + sovQot_GetFutureInfo(uint64(l))
	l = len(m.QuoteCurrency)
	n += 1 + l + sovQot_GetFutureInfo(uint64(l))
	n += 9
	l = len(m.MinVarUnit)
	n += 1 + l + sovQot_GetFutureInfo(uint64(l))
	l = len(m.QuoteUnit)
	n += 1 + l + sovQot_GetFutureInfo(uint64(l))
	if len(m.TradeTime) > 0 {
		for _, e := range m.TradeTime {
			l = e.Size()
			n += 1 + l + sovQot_GetFutureInfo(uint64(l))
		}
	}
	l = len(m.TimeZone)
	n += 2 + l + sovQot_GetFutureInfo(uint64(l))
	l = len(m.ExchangeFormatUrl)
	n += 2 + l + sovQot_GetFutureInfo(uint64(l))
	return n
}

func (m *C2S) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SecurityList) > 0 {
		for _, e := range m.SecurityList {
			l = e.Size()
			n += 1 + l + sovQot_GetFutureInfo(uint64(l))
		}
	}
	return n
}

func (m *S2C) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FutureInfoList) > 0 {
		for _, e := range m.FutureInfoList {
			l = e.Size()
			n += 1 + l + sovQot_GetFutureInfo(uint64(l))
		}
	}
	return n
}

func (m *Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.C2S != nil {
		l = m.C2S.Size()
		n += 1 + l + sovQot_GetFutureInfo(uint64(l))
	}
	return n
}

func (m *Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetType != nil {
		n += 1 + sovQot_GetFutureInfo(uint64(*m.RetType))
	}
	l = len(m.RetMsg)
	n += 1 + l + sovQot_GetFutureInfo(uint64(l))
	n += 1 + sovQot_GetFutureInfo(uint64(m.ErrCode))
	if m.S2C != nil {
		l = m.S2C.Size()
		n += 1 + l + sovQot_GetFutureInfo(uint64(l))
	}
	return n
}

func sovQot_GetFutureInfo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQot_GetFutureInfo(x uint64) (n int) {
	return sovQot_GetFutureInfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TradeTime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_GetFutureInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TradeTime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TradeTime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Begin", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Begin = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.End = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipQot_GetFutureInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_GetFutureInfo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_GetFutureInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FutureInfo) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_GetFutureInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FutureInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FutureInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetFutureInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQot_GetFutureInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetFutureInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Security", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetFutureInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_GetFutureInfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetFutureInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Security == nil {
				m.Security = &Qot_Common.Security{}
			}
			if err := m.Security.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTradeTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetFutureInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQot_GetFutureInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetFutureInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastTradeTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTradeTimestamp", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.LastTradeTimestamp = float64(math.Float64frombits(v))
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetFutureInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_GetFutureInfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetFutureInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Owner == nil {
				m.Owner = &Qot_Common.Security{}
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerOther", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetFutureInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQot_GetFutureInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetFutureInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerOther = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exchange", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetFutureInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQot_GetFutureInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetFutureInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Exchange = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000010)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetFutureInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQot_GetFutureInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetFutureInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000020)
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractSize", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ContractSize = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000040)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractSizeUnit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetFutureInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQot_GetFutureInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetFutureInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractSizeUnit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000080)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteCurrency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetFutureInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQot_GetFutureInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetFutureInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuoteCurrency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000100)
		case 12:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinVar", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MinVar = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000200)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinVarUnit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetFutureInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQot_GetFutureInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetFutureInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinVarUnit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000400)
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteUnit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetFutureInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQot_GetFutureInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetFutureInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuoteUnit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetFutureInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_GetFutureInfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetFutureInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradeTime = append(m.TradeTime, &TradeTime{})
			if err := m.TradeTime[len(m.TradeTime)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeZone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetFutureInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQot_GetFutureInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetFutureInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimeZone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000800)
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeFormatUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetFutureInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQot_GetFutureInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetFutureInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExchangeFormatUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00001000)
		default:
			iNdEx = preIndex
			skippy, err := skipQot_GetFutureInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_GetFutureInfo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_GetFutureInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("name")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("security")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("lastTradeTime")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ownerOther")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("exchange")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("contractType")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("contractSize")
	}
	if hasFields[0]&uint64(0x00000080) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("contractSizeUnit")
	}
	if hasFields[0]&uint64(0x00000100) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("quoteCurrency")
	}
	if hasFields[0]&uint64(0x00000200) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("minVar")
	}
	if hasFields[0]&uint64(0x00000400) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("minVarUnit")
	}
	if hasFields[0]&uint64(0x00000800) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("timeZone")
	}
	if hasFields[0]&uint64(0x00001000) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("exchangeFormatUrl")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_GetFutureInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetFutureInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_GetFutureInfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetFutureInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityList = append(m.SecurityList, &Qot_Common.Security{})
			if err := m.SecurityList[len(m.SecurityList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQot_GetFutureInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_GetFutureInfo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_GetFutureInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_GetFutureInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FutureInfoList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetFutureInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_GetFutureInfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetFutureInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FutureInfoList = append(m.FutureInfoList, &FutureInfo{})
			if err := m.FutureInfoList[len(m.FutureInfoList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQot_GetFutureInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_GetFutureInfo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_GetFutureInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Request) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_GetFutureInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field C2S", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetFutureInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_GetFutureInfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetFutureInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.C2S == nil {
				m.C2S = &C2S{}
			}
			if err := m.C2S.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipQot_GetFutureInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_GetFutureInfo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_GetFutureInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("c2s")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_GetFutureInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetFutureInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetType = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetFutureInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQot_GetFutureInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetFutureInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RetMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			m.ErrCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetFutureInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S2C", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetFutureInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_GetFutureInfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetFutureInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.S2C == nil {
				m.S2C = &S2C{}
			}
			if err := m.S2C.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQot_GetFutureInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_GetFutureInfo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_GetFutureInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("retType")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQot_GetFutureInfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQot_GetFutureInfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQot_GetFutureInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQot_GetFutureInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQot_GetFutureInfo
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthQot_GetFutureInfo
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowQot_GetFutureInfo
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipQot_GetFutureInfo(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthQot_GetFutureInfo
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthQot_GetFutureInfo = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQot_GetFutureInfo   = fmt.Errorf("proto: integer overflow")
)
