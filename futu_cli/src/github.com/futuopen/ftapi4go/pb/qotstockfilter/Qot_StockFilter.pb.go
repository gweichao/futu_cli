// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: Qot_StockFilter.proto

package qotstockfilter

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/futuopen/ftapi4go/pb/common"
	qotcommon "github.com/futuopen/ftapi4go/pb/qotcommon"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// 简单属性
type StockField int32

const (
	StockField_StockField_Unknown                        StockField = 0
	StockField_StockField_StockCode                      StockField = 1
	StockField_StockField_StockName                      StockField = 2
	StockField_StockField_CurPrice                       StockField = 3
	StockField_StockField_CurPriceToHighest52WeeksRatio  StockField = 4
	StockField_StockField_CurPriceToLowest52WeeksRatio   StockField = 5
	StockField_StockField_HighPriceToHighest52WeeksRatio StockField = 6
	StockField_StockField_LowPriceToLowest52WeeksRatio   StockField = 7
	StockField_StockField_VolumeRatio                    StockField = 8
	StockField_StockField_BidAskRatio                    StockField = 9
	StockField_StockField_LotPrice                       StockField = 10
	StockField_StockField_MarketVal                      StockField = 11
	StockField_StockField_PeAnnual                       StockField = 12
	StockField_StockField_PeTTM                          StockField = 13
	StockField_StockField_PbRate                         StockField = 14
	StockField_StockField_ChangeRate5min                 StockField = 15
	StockField_StockField_ChangeRateBeginYear            StockField = 16
)

var StockField_name = map[int32]string{
	0:  "StockField_Unknown",
	1:  "StockField_StockCode",
	2:  "StockField_StockName",
	3:  "StockField_CurPrice",
	4:  "StockField_CurPriceToHighest52WeeksRatio",
	5:  "StockField_CurPriceToLowest52WeeksRatio",
	6:  "StockField_HighPriceToHighest52WeeksRatio",
	7:  "StockField_LowPriceToLowest52WeeksRatio",
	8:  "StockField_VolumeRatio",
	9:  "StockField_BidAskRatio",
	10: "StockField_LotPrice",
	11: "StockField_MarketVal",
	12: "StockField_PeAnnual",
	13: "StockField_PeTTM",
	14: "StockField_PbRate",
	15: "StockField_ChangeRate5min",
	16: "StockField_ChangeRateBeginYear",
}

var StockField_value = map[string]int32{
	"StockField_Unknown":                        0,
	"StockField_StockCode":                      1,
	"StockField_StockName":                      2,
	"StockField_CurPrice":                       3,
	"StockField_CurPriceToHighest52WeeksRatio":  4,
	"StockField_CurPriceToLowest52WeeksRatio":   5,
	"StockField_HighPriceToHighest52WeeksRatio": 6,
	"StockField_LowPriceToLowest52WeeksRatio":   7,
	"StockField_VolumeRatio":                    8,
	"StockField_BidAskRatio":                    9,
	"StockField_LotPrice":                       10,
	"StockField_MarketVal":                      11,
	"StockField_PeAnnual":                       12,
	"StockField_PeTTM":                          13,
	"StockField_PbRate":                         14,
	"StockField_ChangeRate5min":                 15,
	"StockField_ChangeRateBeginYear":            16,
}

func (x StockField) Enum() *StockField {
	p := new(StockField)
	*p = x
	return p
}

func (x StockField) String() string {
	return proto.EnumName(StockField_name, int32(x))
}

func (x *StockField) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(StockField_value, data, "StockField")
	if err != nil {
		return err
	}
	*x = StockField(value)
	return nil
}

func (StockField) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_80f94a4d81b79e29, []int{0}
}

// 累积属性
type AccumulateField int32

const (
	AccumulateField_AccumulateField_Unknown      AccumulateField = 0
	AccumulateField_AccumulateField_ChangeRate   AccumulateField = 1
	AccumulateField_AccumulateField_Amplitude    AccumulateField = 2
	AccumulateField_AccumulateField_Volume       AccumulateField = 3
	AccumulateField_AccumulateField_Turnover     AccumulateField = 4
	AccumulateField_AccumulateField_TurnoverRate AccumulateField = 5
)

var AccumulateField_name = map[int32]string{
	0: "AccumulateField_Unknown",
	1: "AccumulateField_ChangeRate",
	2: "AccumulateField_Amplitude",
	3: "AccumulateField_Volume",
	4: "AccumulateField_Turnover",
	5: "AccumulateField_TurnoverRate",
}

var AccumulateField_value = map[string]int32{
	"AccumulateField_Unknown":      0,
	"AccumulateField_ChangeRate":   1,
	"AccumulateField_Amplitude":    2,
	"AccumulateField_Volume":       3,
	"AccumulateField_Turnover":     4,
	"AccumulateField_TurnoverRate": 5,
}

func (x AccumulateField) Enum() *AccumulateField {
	p := new(AccumulateField)
	*p = x
	return p
}

func (x AccumulateField) String() string {
	return proto.EnumName(AccumulateField_name, int32(x))
}

func (x *AccumulateField) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AccumulateField_value, data, "AccumulateField")
	if err != nil {
		return err
	}
	*x = AccumulateField(value)
	return nil
}

func (AccumulateField) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_80f94a4d81b79e29, []int{1}
}

// 财务属性
type FinancialField int32

const (
	FinancialField_FinancialField_Unknown             FinancialField = 0
	FinancialField_FinancialField_NetProfit           FinancialField = 1
	FinancialField_FinancialField_NetProfitGrowth     FinancialField = 2
	FinancialField_FinancialField_SumOfBusiness       FinancialField = 3
	FinancialField_FinancialField_SumOfBusinessGrowth FinancialField = 4
	FinancialField_FinancialField_NetProfitRate       FinancialField = 5
	FinancialField_FinancialField_GrossProfitRate     FinancialField = 6
	FinancialField_FinancialField_DebtAssetRate       FinancialField = 7
	FinancialField_FinancialField_ReturnOnEquityRate  FinancialField = 8
)

var FinancialField_name = map[int32]string{
	0: "FinancialField_Unknown",
	1: "FinancialField_NetProfit",
	2: "FinancialField_NetProfitGrowth",
	3: "FinancialField_SumOfBusiness",
	4: "FinancialField_SumOfBusinessGrowth",
	5: "FinancialField_NetProfitRate",
	6: "FinancialField_GrossProfitRate",
	7: "FinancialField_DebtAssetRate",
	8: "FinancialField_ReturnOnEquityRate",
}

var FinancialField_value = map[string]int32{
	"FinancialField_Unknown":             0,
	"FinancialField_NetProfit":           1,
	"FinancialField_NetProfitGrowth":     2,
	"FinancialField_SumOfBusiness":       3,
	"FinancialField_SumOfBusinessGrowth": 4,
	"FinancialField_NetProfitRate":       5,
	"FinancialField_GrossProfitRate":     6,
	"FinancialField_DebtAssetRate":       7,
	"FinancialField_ReturnOnEquityRate":  8,
}

func (x FinancialField) Enum() *FinancialField {
	p := new(FinancialField)
	*p = x
	return p
}

func (x FinancialField) String() string {
	return proto.EnumName(FinancialField_name, int32(x))
}

func (x *FinancialField) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FinancialField_value, data, "FinancialField")
	if err != nil {
		return err
	}
	*x = FinancialField(value)
	return nil
}

func (FinancialField) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_80f94a4d81b79e29, []int{2}
}

// 财报时间
type FinancialQuarter int32

const (
	FinancialQuarter_FinancialQuarter_Unknown           FinancialQuarter = 0
	FinancialQuarter_FinancialQuarter_Annual            FinancialQuarter = 1
	FinancialQuarter_FinancialQuarter_FirstQuarter      FinancialQuarter = 2
	FinancialQuarter_FinancialQuarter_Interim           FinancialQuarter = 3
	FinancialQuarter_FinancialQuarter_ThirdQuarter      FinancialQuarter = 4
	FinancialQuarter_FinancialQuarter_MostRecentQuarter FinancialQuarter = 5
)

var FinancialQuarter_name = map[int32]string{
	0: "FinancialQuarter_Unknown",
	1: "FinancialQuarter_Annual",
	2: "FinancialQuarter_FirstQuarter",
	3: "FinancialQuarter_Interim",
	4: "FinancialQuarter_ThirdQuarter",
	5: "FinancialQuarter_MostRecentQuarter",
}

var FinancialQuarter_value = map[string]int32{
	"FinancialQuarter_Unknown":           0,
	"FinancialQuarter_Annual":            1,
	"FinancialQuarter_FirstQuarter":      2,
	"FinancialQuarter_Interim":           3,
	"FinancialQuarter_ThirdQuarter":      4,
	"FinancialQuarter_MostRecentQuarter": 5,
}

func (x FinancialQuarter) Enum() *FinancialQuarter {
	p := new(FinancialQuarter)
	*p = x
	return p
}

func (x FinancialQuarter) String() string {
	return proto.EnumName(FinancialQuarter_name, int32(x))
}

func (x *FinancialQuarter) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FinancialQuarter_value, data, "FinancialQuarter")
	if err != nil {
		return err
	}
	*x = FinancialQuarter(value)
	return nil
}

func (FinancialQuarter) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_80f94a4d81b79e29, []int{3}
}

// 排序方向
type SortDir int32

const (
	SortDir_SortDir_No      SortDir = 0
	SortDir_SortDir_Ascend  SortDir = 1
	SortDir_SortDir_Descend SortDir = 2
)

var SortDir_name = map[int32]string{
	0: "SortDir_No",
	1: "SortDir_Ascend",
	2: "SortDir_Descend",
}

var SortDir_value = map[string]int32{
	"SortDir_No":      0,
	"SortDir_Ascend":  1,
	"SortDir_Descend": 2,
}

func (x SortDir) Enum() *SortDir {
	p := new(SortDir)
	*p = x
	return p
}

func (x SortDir) String() string {
	return proto.EnumName(SortDir_name, int32(x))
}

func (x *SortDir) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SortDir_value, data, "SortDir")
	if err != nil {
		return err
	}
	*x = SortDir(value)
	return nil
}

func (SortDir) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_80f94a4d81b79e29, []int{4}
}

// 简单属性筛选
type BaseFilter struct {
	FieldName  int32   `protobuf:"varint,1,req,name=fieldName" json:"fieldName"`
	FilterMin  float64 `protobuf:"fixed64,2,opt,name=filterMin" json:"filterMin"`
	FilterMax  float64 `protobuf:"fixed64,3,opt,name=filterMax" json:"filterMax"`
	IsNoFilter bool    `protobuf:"varint,4,opt,name=isNoFilter" json:"isNoFilter"`
	SortDir    int32   `protobuf:"varint,5,opt,name=sortDir" json:"sortDir"`
}

func (m *BaseFilter) Reset()         { *m = BaseFilter{} }
func (m *BaseFilter) String() string { return proto.CompactTextString(m) }
func (*BaseFilter) ProtoMessage()    {}
func (*BaseFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_80f94a4d81b79e29, []int{0}
}
func (m *BaseFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaseFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaseFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BaseFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseFilter.Merge(m, src)
}
func (m *BaseFilter) XXX_Size() int {
	return m.Size()
}
func (m *BaseFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseFilter.DiscardUnknown(m)
}

var xxx_messageInfo_BaseFilter proto.InternalMessageInfo

func (m *BaseFilter) GetFieldName() int32 {
	if m != nil {
		return m.FieldName
	}
	return 0
}

func (m *BaseFilter) GetFilterMin() float64 {
	if m != nil {
		return m.FilterMin
	}
	return 0
}

func (m *BaseFilter) GetFilterMax() float64 {
	if m != nil {
		return m.FilterMax
	}
	return 0
}

func (m *BaseFilter) GetIsNoFilter() bool {
	if m != nil {
		return m.IsNoFilter
	}
	return false
}

func (m *BaseFilter) GetSortDir() int32 {
	if m != nil {
		return m.SortDir
	}
	return 0
}

// 累积属性筛选
type AccumulateFilter struct {
	FieldName  int32   `protobuf:"varint,1,req,name=fieldName" json:"fieldName"`
	FilterMin  float64 `protobuf:"fixed64,2,opt,name=filterMin" json:"filterMin"`
	FilterMax  float64 `protobuf:"fixed64,3,opt,name=filterMax" json:"filterMax"`
	IsNoFilter bool    `protobuf:"varint,4,opt,name=isNoFilter" json:"isNoFilter"`
	SortDir    int32   `protobuf:"varint,5,opt,name=sortDir" json:"sortDir"`
	Days       int32   `protobuf:"varint,6,req,name=days" json:"days"`
}

func (m *AccumulateFilter) Reset()         { *m = AccumulateFilter{} }
func (m *AccumulateFilter) String() string { return proto.CompactTextString(m) }
func (*AccumulateFilter) ProtoMessage()    {}
func (*AccumulateFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_80f94a4d81b79e29, []int{1}
}
func (m *AccumulateFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccumulateFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccumulateFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccumulateFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccumulateFilter.Merge(m, src)
}
func (m *AccumulateFilter) XXX_Size() int {
	return m.Size()
}
func (m *AccumulateFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_AccumulateFilter.DiscardUnknown(m)
}

var xxx_messageInfo_AccumulateFilter proto.InternalMessageInfo

func (m *AccumulateFilter) GetFieldName() int32 {
	if m != nil {
		return m.FieldName
	}
	return 0
}

func (m *AccumulateFilter) GetFilterMin() float64 {
	if m != nil {
		return m.FilterMin
	}
	return 0
}

func (m *AccumulateFilter) GetFilterMax() float64 {
	if m != nil {
		return m.FilterMax
	}
	return 0
}

func (m *AccumulateFilter) GetIsNoFilter() bool {
	if m != nil {
		return m.IsNoFilter
	}
	return false
}

func (m *AccumulateFilter) GetSortDir() int32 {
	if m != nil {
		return m.SortDir
	}
	return 0
}

func (m *AccumulateFilter) GetDays() int32 {
	if m != nil {
		return m.Days
	}
	return 0
}

// 财务属性筛选
type FinancialFilter struct {
	FieldName  int32   `protobuf:"varint,1,req,name=fieldName" json:"fieldName"`
	FilterMin  float64 `protobuf:"fixed64,2,opt,name=filterMin" json:"filterMin"`
	FilterMax  float64 `protobuf:"fixed64,3,opt,name=filterMax" json:"filterMax"`
	IsNoFilter bool    `protobuf:"varint,4,opt,name=isNoFilter" json:"isNoFilter"`
	SortDir    int32   `protobuf:"varint,5,opt,name=sortDir" json:"sortDir"`
	Quarter    int32   `protobuf:"varint,6,req,name=quarter" json:"quarter"`
}

func (m *FinancialFilter) Reset()         { *m = FinancialFilter{} }
func (m *FinancialFilter) String() string { return proto.CompactTextString(m) }
func (*FinancialFilter) ProtoMessage()    {}
func (*FinancialFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_80f94a4d81b79e29, []int{2}
}
func (m *FinancialFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FinancialFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FinancialFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FinancialFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FinancialFilter.Merge(m, src)
}
func (m *FinancialFilter) XXX_Size() int {
	return m.Size()
}
func (m *FinancialFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_FinancialFilter.DiscardUnknown(m)
}

var xxx_messageInfo_FinancialFilter proto.InternalMessageInfo

func (m *FinancialFilter) GetFieldName() int32 {
	if m != nil {
		return m.FieldName
	}
	return 0
}

func (m *FinancialFilter) GetFilterMin() float64 {
	if m != nil {
		return m.FilterMin
	}
	return 0
}

func (m *FinancialFilter) GetFilterMax() float64 {
	if m != nil {
		return m.FilterMax
	}
	return 0
}

func (m *FinancialFilter) GetIsNoFilter() bool {
	if m != nil {
		return m.IsNoFilter
	}
	return false
}

func (m *FinancialFilter) GetSortDir() int32 {
	if m != nil {
		return m.SortDir
	}
	return 0
}

func (m *FinancialFilter) GetQuarter() int32 {
	if m != nil {
		return m.Quarter
	}
	return 0
}

// 简单属性数据
type BaseData struct {
	FieldName int32   `protobuf:"varint,1,req,name=fieldName" json:"fieldName"`
	Value     float64 `protobuf:"fixed64,2,req,name=value" json:"value"`
}

func (m *BaseData) Reset()         { *m = BaseData{} }
func (m *BaseData) String() string { return proto.CompactTextString(m) }
func (*BaseData) ProtoMessage()    {}
func (*BaseData) Descriptor() ([]byte, []int) {
	return fileDescriptor_80f94a4d81b79e29, []int{3}
}
func (m *BaseData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaseData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaseData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BaseData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseData.Merge(m, src)
}
func (m *BaseData) XXX_Size() int {
	return m.Size()
}
func (m *BaseData) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseData.DiscardUnknown(m)
}

var xxx_messageInfo_BaseData proto.InternalMessageInfo

func (m *BaseData) GetFieldName() int32 {
	if m != nil {
		return m.FieldName
	}
	return 0
}

func (m *BaseData) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

// 累积指标数据
type AccumulateData struct {
	FieldName int32   `protobuf:"varint,1,req,name=fieldName" json:"fieldName"`
	Value     float64 `protobuf:"fixed64,2,req,name=value" json:"value"`
	Days      int32   `protobuf:"varint,3,req,name=days" json:"days"`
}

func (m *AccumulateData) Reset()         { *m = AccumulateData{} }
func (m *AccumulateData) String() string { return proto.CompactTextString(m) }
func (*AccumulateData) ProtoMessage()    {}
func (*AccumulateData) Descriptor() ([]byte, []int) {
	return fileDescriptor_80f94a4d81b79e29, []int{4}
}
func (m *AccumulateData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccumulateData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccumulateData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccumulateData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccumulateData.Merge(m, src)
}
func (m *AccumulateData) XXX_Size() int {
	return m.Size()
}
func (m *AccumulateData) XXX_DiscardUnknown() {
	xxx_messageInfo_AccumulateData.DiscardUnknown(m)
}

var xxx_messageInfo_AccumulateData proto.InternalMessageInfo

func (m *AccumulateData) GetFieldName() int32 {
	if m != nil {
		return m.FieldName
	}
	return 0
}

func (m *AccumulateData) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *AccumulateData) GetDays() int32 {
	if m != nil {
		return m.Days
	}
	return 0
}

// 财务属性数据
type FinancialData struct {
	FieldName int32   `protobuf:"varint,1,req,name=fieldName" json:"fieldName"`
	Value     float64 `protobuf:"fixed64,2,req,name=value" json:"value"`
	Quarter   int32   `protobuf:"varint,3,req,name=quarter" json:"quarter"`
}

func (m *FinancialData) Reset()         { *m = FinancialData{} }
func (m *FinancialData) String() string { return proto.CompactTextString(m) }
func (*FinancialData) ProtoMessage()    {}
func (*FinancialData) Descriptor() ([]byte, []int) {
	return fileDescriptor_80f94a4d81b79e29, []int{5}
}
func (m *FinancialData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FinancialData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FinancialData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FinancialData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FinancialData.Merge(m, src)
}
func (m *FinancialData) XXX_Size() int {
	return m.Size()
}
func (m *FinancialData) XXX_DiscardUnknown() {
	xxx_messageInfo_FinancialData.DiscardUnknown(m)
}

var xxx_messageInfo_FinancialData proto.InternalMessageInfo

func (m *FinancialData) GetFieldName() int32 {
	if m != nil {
		return m.FieldName
	}
	return 0
}

func (m *FinancialData) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *FinancialData) GetQuarter() int32 {
	if m != nil {
		return m.Quarter
	}
	return 0
}

// 返回的股票数据
type StockData struct {
	Security           *qotcommon.Security `protobuf:"bytes,1,req,name=security" json:"security,omitempty"`
	Name               string              `protobuf:"bytes,2,req,name=name" json:"name"`
	BaseDataList       []*BaseData         `protobuf:"bytes,3,rep,name=baseDataList" json:"baseDataList,omitempty"`
	AccumulateDataList []*AccumulateData   `protobuf:"bytes,4,rep,name=accumulateDataList" json:"accumulateDataList,omitempty"`
	FinancialDataList  []*FinancialData    `protobuf:"bytes,5,rep,name=financialDataList" json:"financialDataList,omitempty"`
}

func (m *StockData) Reset()         { *m = StockData{} }
func (m *StockData) String() string { return proto.CompactTextString(m) }
func (*StockData) ProtoMessage()    {}
func (*StockData) Descriptor() ([]byte, []int) {
	return fileDescriptor_80f94a4d81b79e29, []int{6}
}
func (m *StockData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StockData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StockData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StockData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StockData.Merge(m, src)
}
func (m *StockData) XXX_Size() int {
	return m.Size()
}
func (m *StockData) XXX_DiscardUnknown() {
	xxx_messageInfo_StockData.DiscardUnknown(m)
}

var xxx_messageInfo_StockData proto.InternalMessageInfo

func (m *StockData) GetSecurity() *qotcommon.Security {
	if m != nil {
		return m.Security
	}
	return nil
}

func (m *StockData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StockData) GetBaseDataList() []*BaseData {
	if m != nil {
		return m.BaseDataList
	}
	return nil
}

func (m *StockData) GetAccumulateDataList() []*AccumulateData {
	if m != nil {
		return m.AccumulateDataList
	}
	return nil
}

func (m *StockData) GetFinancialDataList() []*FinancialData {
	if m != nil {
		return m.FinancialDataList
	}
	return nil
}

type C2S struct {
	Begin  int32 `protobuf:"varint,1,req,name=begin" json:"begin"`
	Num    int32 `protobuf:"varint,2,req,name=num" json:"num"`
	Market int32 `protobuf:"varint,3,req,name=market" json:"market"`
	// 以下为筛选条件，可选字段，不填表示不过滤
	Plate                *qotcommon.Security `protobuf:"bytes,4,opt,name=plate" json:"plate,omitempty"`
	BaseFilterList       []*BaseFilter       `protobuf:"bytes,5,rep,name=baseFilterList" json:"baseFilterList,omitempty"`
	AccumulateFilterList []*AccumulateFilter `protobuf:"bytes,6,rep,name=accumulateFilterList" json:"accumulateFilterList,omitempty"`
	FinancialFilterList  []*FinancialFilter  `protobuf:"bytes,7,rep,name=financialFilterList" json:"financialFilterList,omitempty"`
}

func (m *C2S) Reset()         { *m = C2S{} }
func (m *C2S) String() string { return proto.CompactTextString(m) }
func (*C2S) ProtoMessage()    {}
func (*C2S) Descriptor() ([]byte, []int) {
	return fileDescriptor_80f94a4d81b79e29, []int{7}
}
func (m *C2S) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S.Merge(m, src)
}
func (m *C2S) XXX_Size() int {
	return m.Size()
}
func (m *C2S) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S.DiscardUnknown(m)
}

var xxx_messageInfo_C2S proto.InternalMessageInfo

func (m *C2S) GetBegin() int32 {
	if m != nil {
		return m.Begin
	}
	return 0
}

func (m *C2S) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *C2S) GetMarket() int32 {
	if m != nil {
		return m.Market
	}
	return 0
}

func (m *C2S) GetPlate() *qotcommon.Security {
	if m != nil {
		return m.Plate
	}
	return nil
}

func (m *C2S) GetBaseFilterList() []*BaseFilter {
	if m != nil {
		return m.BaseFilterList
	}
	return nil
}

func (m *C2S) GetAccumulateFilterList() []*AccumulateFilter {
	if m != nil {
		return m.AccumulateFilterList
	}
	return nil
}

func (m *C2S) GetFinancialFilterList() []*FinancialFilter {
	if m != nil {
		return m.FinancialFilterList
	}
	return nil
}

type S2C struct {
	LastPage bool         `protobuf:"varint,1,req,name=lastPage" json:"lastPage"`
	AllCount int32        `protobuf:"varint,2,req,name=allCount" json:"allCount"`
	DataList []*StockData `protobuf:"bytes,3,rep,name=dataList" json:"dataList,omitempty"`
}

func (m *S2C) Reset()         { *m = S2C{} }
func (m *S2C) String() string { return proto.CompactTextString(m) }
func (*S2C) ProtoMessage()    {}
func (*S2C) Descriptor() ([]byte, []int) {
	return fileDescriptor_80f94a4d81b79e29, []int{8}
}
func (m *S2C) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C.Merge(m, src)
}
func (m *S2C) XXX_Size() int {
	return m.Size()
}
func (m *S2C) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C.DiscardUnknown(m)
}

var xxx_messageInfo_S2C proto.InternalMessageInfo

func (m *S2C) GetLastPage() bool {
	if m != nil {
		return m.LastPage
	}
	return false
}

func (m *S2C) GetAllCount() int32 {
	if m != nil {
		return m.AllCount
	}
	return 0
}

func (m *S2C) GetDataList() []*StockData {
	if m != nil {
		return m.DataList
	}
	return nil
}

type Request struct {
	C2S *C2S `protobuf:"bytes,1,req,name=c2s" json:"c2s,omitempty"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_80f94a4d81b79e29, []int{9}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return m.Size()
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetC2S() *C2S {
	if m != nil {
		return m.C2S
	}
	return nil
}

type Response struct {
	RetType *int32 `protobuf:"varint,1,req,name=retType,def=-400" json:"retType,omitempty"`
	RetMsg  string `protobuf:"bytes,2,opt,name=retMsg" json:"retMsg"`
	ErrCode int32  `protobuf:"varint,3,opt,name=errCode" json:"errCode"`
	S2C     *S2C   `protobuf:"bytes,4,opt,name=s2c" json:"s2c,omitempty"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_80f94a4d81b79e29, []int{10}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return m.Size()
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

const Default_Response_RetType int32 = -400

func (m *Response) GetRetType() int32 {
	if m != nil && m.RetType != nil {
		return *m.RetType
	}
	return Default_Response_RetType
}

func (m *Response) GetRetMsg() string {
	if m != nil {
		return m.RetMsg
	}
	return ""
}

func (m *Response) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *Response) GetS2C() *S2C {
	if m != nil {
		return m.S2C
	}
	return nil
}

func init() {
	proto.RegisterEnum("Qot_StockFilter.StockField", StockField_name, StockField_value)
	proto.RegisterEnum("Qot_StockFilter.AccumulateField", AccumulateField_name, AccumulateField_value)
	proto.RegisterEnum("Qot_StockFilter.FinancialField", FinancialField_name, FinancialField_value)
	proto.RegisterEnum("Qot_StockFilter.FinancialQuarter", FinancialQuarter_name, FinancialQuarter_value)
	proto.RegisterEnum("Qot_StockFilter.SortDir", SortDir_name, SortDir_value)
	proto.RegisterType((*BaseFilter)(nil), "Qot_StockFilter.BaseFilter")
	proto.RegisterType((*AccumulateFilter)(nil), "Qot_StockFilter.AccumulateFilter")
	proto.RegisterType((*FinancialFilter)(nil), "Qot_StockFilter.FinancialFilter")
	proto.RegisterType((*BaseData)(nil), "Qot_StockFilter.BaseData")
	proto.RegisterType((*AccumulateData)(nil), "Qot_StockFilter.AccumulateData")
	proto.RegisterType((*FinancialData)(nil), "Qot_StockFilter.FinancialData")
	proto.RegisterType((*StockData)(nil), "Qot_StockFilter.StockData")
	proto.RegisterType((*C2S)(nil), "Qot_StockFilter.C2S")
	proto.RegisterType((*S2C)(nil), "Qot_StockFilter.S2C")
	proto.RegisterType((*Request)(nil), "Qot_StockFilter.Request")
	proto.RegisterType((*Response)(nil), "Qot_StockFilter.Response")
}

func init() { proto.RegisterFile("Qot_StockFilter.proto", fileDescriptor_80f94a4d81b79e29) }

var fileDescriptor_80f94a4d81b79e29 = []byte{
	// 1214 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x56, 0xcd, 0x72, 0x13, 0x47,
	0x17, 0xf5, 0x68, 0x24, 0x4b, 0xbe, 0x80, 0xdd, 0xb4, 0x8d, 0x11, 0xc2, 0x08, 0xa1, 0xfa, 0x3e,
	0xe2, 0x38, 0x41, 0x26, 0x2a, 0xc8, 0x22, 0x55, 0x59, 0x58, 0x72, 0x20, 0x49, 0xd9, 0xc6, 0x8c,
	0x04, 0xa9, 0xa4, 0x2a, 0x45, 0xb5, 0xa4, 0x96, 0xdc, 0xf1, 0x4c, 0xb7, 0x3c, 0xdd, 0x83, 0x61,
	0x99, 0x37, 0xe0, 0x01, 0xf2, 0x1a, 0xd9, 0x66, 0x1b, 0xb2, 0x63, 0x99, 0x6c, 0xa8, 0x14, 0x7e,
	0x84, 0xbc, 0x40, 0xaa, 0xe7, 0xcf, 0x33, 0xa3, 0xb1, 0x2b, 0x0b, 0x36, 0xec, 0xa4, 0x73, 0x4e,
	0x9f, 0xbe, 0x3f, 0x7d, 0xaf, 0x04, 0x57, 0x1e, 0x0b, 0xf5, 0xac, 0xa7, 0xc4, 0xf0, 0xf0, 0x01,
	0xb3, 0x15, 0x75, 0x5b, 0x53, 0x57, 0x28, 0x81, 0x97, 0x32, 0x70, 0xed, 0x62, 0x57, 0x38, 0x8e,
	0xe0, 0x01, 0x5d, 0x43, 0x9a, 0x4e, 0x22, 0xcd, 0xdf, 0x0c, 0x80, 0x0e, 0x91, 0x34, 0x90, 0xe3,
	0x26, 0x2c, 0x8c, 0x19, 0xb5, 0x47, 0x7b, 0xc4, 0xa1, 0x55, 0xa3, 0x51, 0x58, 0x2f, 0x75, 0x8a,
	0xaf, 0xdf, 0xde, 0x9c, 0xb3, 0x4e, 0xe1, 0x40, 0xa3, 0xd5, 0xbb, 0x8c, 0x57, 0x0b, 0x0d, 0x63,
	0xdd, 0x38, 0xd5, 0x84, 0x70, 0x42, 0x43, 0x5e, 0x54, 0xcd, 0x1c, 0x0d, 0x79, 0x81, 0xff, 0x07,
	0xc0, 0xe4, 0x9e, 0x08, 0x6e, 0xae, 0x16, 0x1b, 0xc6, 0x7a, 0x25, 0x14, 0x25, 0x70, 0x5c, 0x87,
	0xb2, 0x14, 0xae, 0xda, 0x66, 0x6e, 0xb5, 0xd4, 0x30, 0xe2, 0x78, 0x22, 0xb0, 0xf9, 0xd6, 0x00,
	0xb4, 0x35, 0x1c, 0x7a, 0x8e, 0x67, 0x13, 0xf5, 0xc1, 0xa6, 0x81, 0xab, 0x50, 0x1c, 0x91, 0x97,
	0xb2, 0x3a, 0x9f, 0x08, 0xd6, 0x47, 0x9a, 0x27, 0x06, 0x2c, 0x3d, 0x60, 0x9c, 0xf0, 0x21, 0x23,
	0xf6, 0x07, 0x9b, 0x5f, 0x1d, 0xca, 0x47, 0x1e, 0x71, 0xb5, 0x45, 0x32, 0xc5, 0x08, 0x6c, 0x7e,
	0x0b, 0x15, 0xfd, 0x0c, 0xb7, 0x89, 0x22, 0xff, 0x29, 0xbb, 0x1a, 0x94, 0x9e, 0x13, 0xdb, 0xa3,
	0xd5, 0x42, 0xa3, 0x10, 0x47, 0x1d, 0x40, 0xcd, 0x9f, 0x60, 0xf1, 0xf4, 0x45, 0xbc, 0x0f, 0xc7,
	0xb8, 0x3b, 0xe6, 0x4c, 0x77, 0x04, 0x5c, 0x8a, 0x9b, 0xf3, 0x5e, 0xae, 0x4a, 0x14, 0xca, 0xcc,
	0x2b, 0xd4, 0xaf, 0x05, 0x58, 0xf0, 0x07, 0xdc, 0xbf, 0xed, 0x2e, 0x54, 0x24, 0x1d, 0x7a, 0x2e,
	0x53, 0x2f, 0xfd, 0xcb, 0x2e, 0xb4, 0x57, 0x5a, 0x89, 0x19, 0xef, 0x85, 0x9c, 0x15, 0xab, 0x74,
	0x2a, 0x5c, 0x87, 0xa6, 0xaf, 0x5e, 0x88, 0x52, 0xd1, 0x08, 0xfe, 0x12, 0x2e, 0x0e, 0xc2, 0x16,
	0xec, 0x30, 0xa9, 0xaa, 0x66, 0xc3, 0x5c, 0xbf, 0xd0, 0xbe, 0xd6, 0xca, 0x6e, 0x9a, 0xa8, 0x4f,
	0x56, 0x4a, 0x8e, 0x1f, 0x01, 0x26, 0xa9, 0xaa, 0xfb, 0x26, 0x45, 0xdf, 0xe4, 0xe6, 0x8c, 0x49,
	0xba, 0x41, 0x56, 0xce, 0x51, 0xbc, 0x03, 0x97, 0xc7, 0xc9, 0xd2, 0xfa, 0x7e, 0x25, 0xdf, 0xaf,
	0x3e, 0xe3, 0x97, 0x6a, 0x82, 0x35, 0x7b, 0xb0, 0xf9, 0x4f, 0x01, 0xcc, 0x6e, 0xbb, 0xa7, 0x6b,
	0x3f, 0xa0, 0x13, 0xc6, 0x53, 0xbd, 0x09, 0x20, 0xbc, 0x0a, 0x26, 0xf7, 0x1c, 0xbf, 0x34, 0x11,
	0xa3, 0x01, 0xbc, 0x06, 0xf3, 0x0e, 0x71, 0x0f, 0xa9, 0x4a, 0xb5, 0x24, 0xc4, 0xf0, 0x06, 0x94,
	0xa6, 0x3a, 0x70, 0x7f, 0x36, 0xce, 0x6a, 0x40, 0x20, 0xc1, 0x5d, 0x58, 0x1c, 0xc4, 0xdb, 0x36,
	0x91, 0xd0, 0xf5, 0xdc, 0x2a, 0x07, 0x1f, 0xad, 0xcc, 0x11, 0xfc, 0x04, 0x56, 0x48, 0x66, 0xe3,
	0xf9, 0x56, 0xf3, 0xbe, 0xd5, 0xad, 0x73, 0x6a, 0x1d, 0x1a, 0xe6, 0x1e, 0xc7, 0x16, 0x2c, 0x8f,
	0xd3, 0x7b, 0xc6, 0x77, 0x2d, 0xfb, 0xae, 0x8d, 0xb3, 0x2b, 0x1e, 0x9a, 0xe6, 0x1d, 0x6e, 0xfe,
	0x6c, 0x80, 0xd9, 0x6b, 0x77, 0x71, 0x03, 0x2a, 0x36, 0x91, 0x6a, 0x9f, 0x4c, 0x82, 0xa1, 0x88,
	0x56, 0x48, 0x8c, 0x6a, 0x05, 0xb1, 0xed, 0xae, 0xf0, 0xb8, 0x4a, 0x35, 0x20, 0x46, 0xf1, 0xe7,
	0x50, 0x19, 0xa5, 0xdf, 0x66, 0x6d, 0x26, 0xa8, 0x78, 0x32, 0xac, 0x58, 0xdb, 0xfc, 0x0c, 0xca,
	0x16, 0x3d, 0xf2, 0xa8, 0x54, 0xf8, 0x36, 0x98, 0xc3, 0xb6, 0x4c, 0x4d, 0x4a, 0xf2, 0x74, 0xb7,
	0xdd, 0xb3, 0xb4, 0xa0, 0xf9, 0xca, 0x80, 0x8a, 0x45, 0xe5, 0x54, 0x70, 0xe9, 0x4f, 0xa4, 0x4b,
	0x55, 0xff, 0xe5, 0x34, 0x9c, 0xe7, 0x2f, 0x8a, 0x77, 0xee, 0xdd, 0xbd, 0x6b, 0x45, 0xa0, 0x7e,
	0x1d, 0x2e, 0x55, 0xbb, 0x72, 0xe2, 0x6f, 0xd9, 0x68, 0xa6, 0x42, 0x4c, 0x9f, 0xa6, 0xae, 0xdb,
	0x15, 0x23, 0xea, 0x2f, 0xd8, 0x78, 0x9e, 0x43, 0x50, 0x87, 0x24, 0xdb, 0xc3, 0xd4, 0xdb, 0x49,
	0x25, 0xd4, 0xee, 0x5a, 0x5a, 0xb0, 0xf1, 0x4b, 0x11, 0x20, 0x24, 0xa8, 0x3d, 0xc2, 0xab, 0x80,
	0x4f, 0xbf, 0x3d, 0x7b, 0xc2, 0x0f, 0xb9, 0x38, 0xe6, 0x68, 0x0e, 0x57, 0x61, 0x25, 0x81, 0xfb,
	0x1f, 0xf5, 0x35, 0xc8, 0xc8, 0x63, 0xf4, 0x32, 0x42, 0x05, 0x7c, 0x15, 0x96, 0x13, 0x4c, 0xd7,
	0x73, 0xf7, 0x5d, 0x36, 0xa4, 0xc8, 0xc4, 0x9f, 0xc2, 0x7a, 0x0e, 0xd1, 0x17, 0x5f, 0xb3, 0xc9,
	0x01, 0x95, 0xea, 0x7e, 0xfb, 0x3b, 0x4a, 0x0f, 0xa5, 0x45, 0x14, 0x13, 0xa8, 0x88, 0x3f, 0x81,
	0x8f, 0x72, 0xd5, 0x3b, 0xe2, 0x38, 0x2b, 0x2e, 0xe1, 0x3b, 0xf0, 0x71, 0x42, 0xac, 0x0d, 0xcf,
	0xf1, 0x9e, 0xcf, 0x78, 0xef, 0x88, 0xe3, 0xb3, 0xbd, 0xcb, 0xb8, 0x06, 0xab, 0x09, 0xf1, 0x53,
	0x61, 0x7b, 0x0e, 0x0d, 0xb8, 0x4a, 0x86, 0xeb, 0xb0, 0xd1, 0x96, 0x3c, 0x0c, 0xb8, 0x85, 0x4c,
	0x1d, 0x76, 0x84, 0x0a, 0xea, 0x00, 0x99, 0xd2, 0xed, 0xfa, 0x63, 0xff, 0x94, 0xd8, 0xe8, 0x42,
	0xe6, 0xc8, 0x3e, 0xdd, 0xe2, 0xdc, 0x23, 0x36, 0xba, 0x88, 0x57, 0x00, 0xa5, 0x88, 0x7e, 0x7f,
	0x17, 0x5d, 0xc2, 0x57, 0xe0, 0x72, 0x12, 0x1d, 0x58, 0x44, 0x51, 0xb4, 0x88, 0x6f, 0xc0, 0xb5,
	0x64, 0xe5, 0x0e, 0x08, 0x9f, 0xe8, 0x80, 0xe9, 0x7d, 0x87, 0x71, 0xb4, 0x84, 0x9b, 0x50, 0xcf,
	0xa5, 0x3b, 0x7a, 0x69, 0x7d, 0x4f, 0x89, 0x8b, 0xd0, 0xc6, 0x1f, 0x06, 0x2c, 0x25, 0xe7, 0x5c,
	0xbf, 0x91, 0xeb, 0x70, 0x35, 0x03, 0x25, 0x1e, 0x4a, 0x1d, 0x6a, 0x59, 0xf2, 0xd4, 0x19, 0x19,
	0x3a, 0xa6, 0x2c, 0xbf, 0xe5, 0x4c, 0x6d, 0xa6, 0xbc, 0x91, 0x7e, 0x33, 0x35, 0x58, 0xcd, 0xd2,
	0x41, 0xa1, 0x91, 0x89, 0xd7, 0xa0, 0x9a, 0xe5, 0xfa, 0x9e, 0xcb, 0xc5, 0x73, 0xea, 0xa2, 0x22,
	0x6e, 0xc0, 0xda, 0x59, 0xac, 0x7f, 0x75, 0x69, 0xe3, 0xf7, 0x02, 0x2c, 0x26, 0xb6, 0x8b, 0x4e,
	0xa5, 0x06, 0xab, 0x69, 0x24, 0x91, 0xc9, 0x1a, 0x54, 0x33, 0xdc, 0x1e, 0x55, 0xfb, 0xae, 0x18,
	0x33, 0x85, 0x0c, 0x5d, 0xbc, 0xb3, 0xd8, 0x87, 0xae, 0x38, 0x56, 0x07, 0xa8, 0xa0, 0x43, 0xca,
	0x68, 0x7a, 0x9e, 0xf3, 0x68, 0xdc, 0xf1, 0x24, 0xe3, 0x54, 0x4a, 0x64, 0xe2, 0xdb, 0xd0, 0x3c,
	0x4f, 0x11, 0x3a, 0x15, 0x73, 0x9c, 0xe2, 0xdb, 0x82, 0xe4, 0x72, 0xe2, 0x79, 0xe8, 0x0a, 0x29,
	0x13, 0x9a, 0xf9, 0x1c, 0x97, 0x6d, 0x3a, 0x50, 0x5b, 0x52, 0xd2, 0x40, 0x51, 0xc6, 0xff, 0x87,
	0x5b, 0x19, 0x85, 0x45, 0x95, 0xe7, 0xf2, 0x47, 0xfc, 0xab, 0x23, 0x4f, 0xff, 0xde, 0x68, 0x59,
	0x65, 0xe3, 0x2f, 0x03, 0x50, 0xac, 0x7b, 0x1c, 0xfc, 0x83, 0x48, 0xd5, 0x2b, 0xc4, 0x12, 0xd5,
	0xbc, 0x0e, 0x57, 0x67, 0xd8, 0xf0, 0x55, 0x1b, 0xf8, 0x16, 0xdc, 0x98, 0x21, 0x1f, 0x30, 0x57,
	0xaa, 0xf0, 0x0b, 0x2a, 0xe4, 0xba, 0x7f, 0xc3, 0x15, 0x75, 0x99, 0x83, 0xcc, 0x5c, 0x83, 0xfe,
	0x01, 0x73, 0x47, 0x91, 0x41, 0x31, 0x55, 0xea, 0x48, 0xb2, 0x2b, 0xa4, 0xb2, 0xe8, 0x90, 0xf2,
	0xf8, 0xa2, 0xd2, 0x46, 0x07, 0xca, 0xbd, 0xf0, 0xcf, 0xe5, 0x22, 0x40, 0xf8, 0xf1, 0xd9, 0x9e,
	0x40, 0x73, 0x18, 0xc3, 0x62, 0xf4, 0x7d, 0x4b, 0x0e, 0x29, 0x1f, 0x21, 0x03, 0x2f, 0xc3, 0x52,
	0x84, 0x6d, 0xd3, 0x00, 0x2c, 0x74, 0x7e, 0x7c, 0xfd, 0xae, 0x6e, 0xbc, 0x79, 0x57, 0x37, 0xfe,
	0x7e, 0x57, 0x37, 0x5e, 0x9d, 0xd4, 0xe7, 0xde, 0x9c, 0xd4, 0xe7, 0xfe, 0x3c, 0xa9, 0xcf, 0xc1,
	0xf2, 0x50, 0x38, 0xad, 0xb1, 0xa7, 0xbc, 0x96, 0x98, 0x52, 0x4e, 0xa6, 0xac, 0x35, 0x1d, 0xfc,
	0xd0, 0x9a, 0x30, 0x75, 0xe0, 0x0d, 0x5a, 0x43, 0xe1, 0x6c, 0x6a, 0x4e, 0x53, 0x9b, 0x63, 0x45,
	0xa6, 0xec, 0xde, 0x44, 0x6c, 0x4e, 0x07, 0x9b, 0x47, 0x42, 0x49, 0x3d, 0xa9, 0xc1, 0xbf, 0xe7,
	0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xa8, 0x36, 0xb8, 0x04, 0xa5, 0x0d, 0x00, 0x00,
}

func (m *BaseFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaseFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BaseFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintQot_StockFilter(dAtA, i, uint64(m.SortDir))
	i--
	dAtA[i] = 0x28
	i--
	if m.IsNoFilter {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x20
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.FilterMax))))
	i--
	dAtA[i] = 0x19
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.FilterMin))))
	i--
	dAtA[i] = 0x11
	i = encodeVarintQot_StockFilter(dAtA, i, uint64(m.FieldName))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *AccumulateFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccumulateFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccumulateFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintQot_StockFilter(dAtA, i, uint64(m.Days))
	i--
	dAtA[i] = 0x30
	i = encodeVarintQot_StockFilter(dAtA, i, uint64(m.SortDir))
	i--
	dAtA[i] = 0x28
	i--
	if m.IsNoFilter {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x20
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.FilterMax))))
	i--
	dAtA[i] = 0x19
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.FilterMin))))
	i--
	dAtA[i] = 0x11
	i = encodeVarintQot_StockFilter(dAtA, i, uint64(m.FieldName))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *FinancialFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FinancialFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FinancialFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintQot_StockFilter(dAtA, i, uint64(m.Quarter))
	i--
	dAtA[i] = 0x30
	i = encodeVarintQot_StockFilter(dAtA, i, uint64(m.SortDir))
	i--
	dAtA[i] = 0x28
	i--
	if m.IsNoFilter {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x20
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.FilterMax))))
	i--
	dAtA[i] = 0x19
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.FilterMin))))
	i--
	dAtA[i] = 0x11
	i = encodeVarintQot_StockFilter(dAtA, i, uint64(m.FieldName))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *BaseData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaseData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BaseData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Value))))
	i--
	dAtA[i] = 0x11
	i = encodeVarintQot_StockFilter(dAtA, i, uint64(m.FieldName))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *AccumulateData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccumulateData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccumulateData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintQot_StockFilter(dAtA, i, uint64(m.Days))
	i--
	dAtA[i] = 0x18
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Value))))
	i--
	dAtA[i] = 0x11
	i = encodeVarintQot_StockFilter(dAtA, i, uint64(m.FieldName))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *FinancialData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FinancialData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FinancialData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintQot_StockFilter(dAtA, i, uint64(m.Quarter))
	i--
	dAtA[i] = 0x18
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Value))))
	i--
	dAtA[i] = 0x11
	i = encodeVarintQot_StockFilter(dAtA, i, uint64(m.FieldName))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *StockData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StockData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StockData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FinancialDataList) > 0 {
		for iNdEx := len(m.FinancialDataList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FinancialDataList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQot_StockFilter(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.AccumulateDataList) > 0 {
		for iNdEx := len(m.AccumulateDataList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AccumulateDataList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQot_StockFilter(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.BaseDataList) > 0 {
		for iNdEx := len(m.BaseDataList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BaseDataList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQot_StockFilter(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintQot_StockFilter(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0x12
	if m.Security == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("security")
	} else {
		{
			size, err := m.Security.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQot_StockFilter(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *C2S) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FinancialFilterList) > 0 {
		for iNdEx := len(m.FinancialFilterList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FinancialFilterList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQot_StockFilter(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.AccumulateFilterList) > 0 {
		for iNdEx := len(m.AccumulateFilterList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AccumulateFilterList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQot_StockFilter(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.BaseFilterList) > 0 {
		for iNdEx := len(m.BaseFilterList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BaseFilterList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQot_StockFilter(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Plate != nil {
		{
			size, err := m.Plate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQot_StockFilter(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	i = encodeVarintQot_StockFilter(dAtA, i, uint64(m.Market))
	i--
	dAtA[i] = 0x18
	i = encodeVarintQot_StockFilter(dAtA, i, uint64(m.Num))
	i--
	dAtA[i] = 0x10
	i = encodeVarintQot_StockFilter(dAtA, i, uint64(m.Begin))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *S2C) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DataList) > 0 {
		for iNdEx := len(m.DataList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQot_StockFilter(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	i = encodeVarintQot_StockFilter(dAtA, i, uint64(m.AllCount))
	i--
	dAtA[i] = 0x10
	i--
	if m.LastPage {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.C2S == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("c2s")
	} else {
		{
			size, err := m.C2S.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQot_StockFilter(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.S2C != nil {
		{
			size, err := m.S2C.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQot_StockFilter(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	i = encodeVarintQot_StockFilter(dAtA, i, uint64(m.ErrCode))
	i--
	dAtA[i] = 0x18
	i -= len(m.RetMsg)
	copy(dAtA[i:], m.RetMsg)
	i = encodeVarintQot_StockFilter(dAtA, i, uint64(len(m.RetMsg)))
	i--
	dAtA[i] = 0x12
	if m.RetType == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("retType")
	} else {
		i = encodeVarintQot_StockFilter(dAtA, i, uint64(*m.RetType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQot_StockFilter(dAtA []byte, offset int, v uint64) int {
	offset -= sovQot_StockFilter(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BaseFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovQot_StockFilter(uint64(m.FieldName))
	n += 9
	n += 9
	n += 2
	n += 1 + sovQot_StockFilter(uint64(m.SortDir))
	return n
}

func (m *AccumulateFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovQot_StockFilter(uint64(m.FieldName))
	n += 9
	n += 9
	n += 2
	n += 1 + sovQot_StockFilter(uint64(m.SortDir))
	n += 1 + sovQot_StockFilter(uint64(m.Days))
	return n
}

func (m *FinancialFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovQot_StockFilter(uint64(m.FieldName))
	n += 9
	n += 9
	n += 2
	n += 1 + sovQot_StockFilter(uint64(m.SortDir))
	n += 1 + sovQot_StockFilter(uint64(m.Quarter))
	return n
}

func (m *BaseData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovQot_StockFilter(uint64(m.FieldName))
	n += 9
	return n
}

func (m *AccumulateData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovQot_StockFilter(uint64(m.FieldName))
	n += 9
	n += 1 + sovQot_StockFilter(uint64(m.Days))
	return n
}

func (m *FinancialData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovQot_StockFilter(uint64(m.FieldName))
	n += 9
	n += 1 + sovQot_StockFilter(uint64(m.Quarter))
	return n
}

func (m *StockData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Security != nil {
		l = m.Security.Size()
		n += 1 + l + sovQot_StockFilter(uint64(l))
	}
	l = len(m.Name)
	n += 1 + l + sovQot_StockFilter(uint64(l))
	if len(m.BaseDataList) > 0 {
		for _, e := range m.BaseDataList {
			l = e.Size()
			n += 1 + l + sovQot_StockFilter(uint64(l))
		}
	}
	if len(m.AccumulateDataList) > 0 {
		for _, e := range m.AccumulateDataList {
			l = e.Size()
			n += 1 + l + sovQot_StockFilter(uint64(l))
		}
	}
	if len(m.FinancialDataList) > 0 {
		for _, e := range m.FinancialDataList {
			l = e.Size()
			n += 1 + l + sovQot_StockFilter(uint64(l))
		}
	}
	return n
}

func (m *C2S) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovQot_StockFilter(uint64(m.Begin))
	n += 1 + sovQot_StockFilter(uint64(m.Num))
	n += 1 + sovQot_StockFilter(uint64(m.Market))
	if m.Plate != nil {
		l = m.Plate.Size()
		n += 1 + l + sovQot_StockFilter(uint64(l))
	}
	if len(m.BaseFilterList) > 0 {
		for _, e := range m.BaseFilterList {
			l = e.Size()
			n += 1 + l + sovQot_StockFilter(uint64(l))
		}
	}
	if len(m.AccumulateFilterList) > 0 {
		for _, e := range m.AccumulateFilterList {
			l = e.Size()
			n += 1 + l + sovQot_StockFilter(uint64(l))
		}
	}
	if len(m.FinancialFilterList) > 0 {
		for _, e := range m.FinancialFilterList {
			l = e.Size()
			n += 1 + l + sovQot_StockFilter(uint64(l))
		}
	}
	return n
}

func (m *S2C) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	n += 1 + sovQot_StockFilter(uint64(m.AllCount))
	if len(m.DataList) > 0 {
		for _, e := range m.DataList {
			l = e.Size()
			n += 1 + l + sovQot_StockFilter(uint64(l))
		}
	}
	return n
}

func (m *Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.C2S != nil {
		l = m.C2S.Size()
		n += 1 + l + sovQot_StockFilter(uint64(l))
	}
	return n
}

func (m *Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetType != nil {
		n += 1 + sovQot_StockFilter(uint64(*m.RetType))
	}
	l = len(m.RetMsg)
	n += 1 + l + sovQot_StockFilter(uint64(l))
	n += 1 + sovQot_StockFilter(uint64(m.ErrCode))
	if m.S2C != nil {
		l = m.S2C.Size()
		n += 1 + l + sovQot_StockFilter(uint64(l))
	}
	return n
}

func sovQot_StockFilter(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQot_StockFilter(x uint64) (n int) {
	return sovQot_StockFilter(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BaseFilter) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_StockFilter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaseFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaseFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldName", wireType)
			}
			m.FieldName = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_StockFilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FieldName |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilterMin", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.FilterMin = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilterMax", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.FilterMax = float64(math.Float64frombits(v))
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsNoFilter", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_StockFilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsNoFilter = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortDir", wireType)
			}
			m.SortDir = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_StockFilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SortDir |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQot_StockFilter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_StockFilter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_StockFilter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("fieldName")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccumulateFilter) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_StockFilter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccumulateFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccumulateFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldName", wireType)
			}
			m.FieldName = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_StockFilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FieldName |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilterMin", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.FilterMin = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilterMax", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.FilterMax = float64(math.Float64frombits(v))
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsNoFilter", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_StockFilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsNoFilter = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortDir", wireType)
			}
			m.SortDir = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_StockFilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SortDir |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Days", wireType)
			}
			m.Days = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_StockFilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Days |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipQot_StockFilter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_StockFilter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_StockFilter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("fieldName")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("days")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FinancialFilter) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_StockFilter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FinancialFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FinancialFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldName", wireType)
			}
			m.FieldName = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_StockFilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FieldName |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilterMin", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.FilterMin = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilterMax", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.FilterMax = float64(math.Float64frombits(v))
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsNoFilter", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_StockFilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsNoFilter = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortDir", wireType)
			}
			m.SortDir = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_StockFilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SortDir |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quarter", wireType)
			}
			m.Quarter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_StockFilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quarter |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipQot_StockFilter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_StockFilter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_StockFilter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("fieldName")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("quarter")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BaseData) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_StockFilter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaseData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaseData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldName", wireType)
			}
			m.FieldName = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_StockFilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FieldName |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Value = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipQot_StockFilter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_StockFilter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_StockFilter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("fieldName")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("value")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccumulateData) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_StockFilter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccumulateData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccumulateData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldName", wireType)
			}
			m.FieldName = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_StockFilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FieldName |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Value = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Days", wireType)
			}
			m.Days = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_StockFilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Days |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipQot_StockFilter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_StockFilter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_StockFilter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("fieldName")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("value")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("days")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FinancialData) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_StockFilter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FinancialData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FinancialData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldName", wireType)
			}
			m.FieldName = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_StockFilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FieldName |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Value = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quarter", wireType)
			}
			m.Quarter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_StockFilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quarter |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipQot_StockFilter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_StockFilter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_StockFilter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("fieldName")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("value")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("quarter")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StockData) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_StockFilter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StockData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StockData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Security", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_StockFilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_StockFilter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_StockFilter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Security == nil {
				m.Security = &qotcommon.Security{}
			}
			if err := m.Security.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_StockFilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQot_StockFilter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQot_StockFilter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseDataList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_StockFilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_StockFilter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_StockFilter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseDataList = append(m.BaseDataList, &BaseData{})
			if err := m.BaseDataList[len(m.BaseDataList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccumulateDataList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_StockFilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_StockFilter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_StockFilter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccumulateDataList = append(m.AccumulateDataList, &AccumulateData{})
			if err := m.AccumulateDataList[len(m.AccumulateDataList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinancialDataList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_StockFilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_StockFilter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_StockFilter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FinancialDataList = append(m.FinancialDataList, &FinancialData{})
			if err := m.FinancialDataList[len(m.FinancialDataList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQot_StockFilter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_StockFilter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_StockFilter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("security")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("name")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_StockFilter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Begin", wireType)
			}
			m.Begin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_StockFilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Begin |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_StockFilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Market", wireType)
			}
			m.Market = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_StockFilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Market |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_StockFilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_StockFilter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_StockFilter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Plate == nil {
				m.Plate = &qotcommon.Security{}
			}
			if err := m.Plate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseFilterList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_StockFilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_StockFilter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_StockFilter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseFilterList = append(m.BaseFilterList, &BaseFilter{})
			if err := m.BaseFilterList[len(m.BaseFilterList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccumulateFilterList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_StockFilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_StockFilter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_StockFilter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccumulateFilterList = append(m.AccumulateFilterList, &AccumulateFilter{})
			if err := m.AccumulateFilterList[len(m.AccumulateFilterList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinancialFilterList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_StockFilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_StockFilter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_StockFilter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FinancialFilterList = append(m.FinancialFilterList, &FinancialFilter{})
			if err := m.FinancialFilterList[len(m.FinancialFilterList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQot_StockFilter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_StockFilter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_StockFilter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("begin")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("num")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("market")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_StockFilter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPage", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_StockFilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LastPage = bool(v != 0)
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllCount", wireType)
			}
			m.AllCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_StockFilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AllCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_StockFilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_StockFilter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_StockFilter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataList = append(m.DataList, &StockData{})
			if err := m.DataList[len(m.DataList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQot_StockFilter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_StockFilter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_StockFilter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("lastPage")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("allCount")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Request) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_StockFilter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field C2S", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_StockFilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_StockFilter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_StockFilter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.C2S == nil {
				m.C2S = &C2S{}
			}
			if err := m.C2S.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipQot_StockFilter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_StockFilter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_StockFilter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("c2s")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_StockFilter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_StockFilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetType = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_StockFilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQot_StockFilter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQot_StockFilter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RetMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			m.ErrCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_StockFilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S2C", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_StockFilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_StockFilter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_StockFilter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.S2C == nil {
				m.S2C = &S2C{}
			}
			if err := m.S2C.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQot_StockFilter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_StockFilter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_StockFilter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("retType")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQot_StockFilter(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQot_StockFilter
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQot_StockFilter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQot_StockFilter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQot_StockFilter
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthQot_StockFilter
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowQot_StockFilter
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipQot_StockFilter(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthQot_StockFilter
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthQot_StockFilter = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQot_StockFilter   = fmt.Errorf("proto: integer overflow")
)
