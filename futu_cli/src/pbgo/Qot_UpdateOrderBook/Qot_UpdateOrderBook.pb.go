// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: Qot_UpdateOrderBook.proto

package Qot_UpdateOrderBook

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	_ "pbgo/Common"
	Qot_Common "pbgo/Qot_Common"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type S2C struct {
	Security                *Qot_Common.Security    `protobuf:"bytes,1,req,name=security" json:"security,omitempty"`
	OrderBookAskList        []*Qot_Common.OrderBook `protobuf:"bytes,2,rep,name=orderBookAskList" json:"orderBookAskList,omitempty"`
	OrderBookBidList        []*Qot_Common.OrderBook `protobuf:"bytes,3,rep,name=orderBookBidList" json:"orderBookBidList,omitempty"`
	SvrRecvTimeBid          string                  `protobuf:"bytes,4,opt,name=svrRecvTimeBid" json:"svrRecvTimeBid"`
	SvrRecvTimeBidTimestamp float64                 `protobuf:"fixed64,5,opt,name=svrRecvTimeBidTimestamp" json:"svrRecvTimeBidTimestamp"`
	SvrRecvTimeAsk          string                  `protobuf:"bytes,6,opt,name=svrRecvTimeAsk" json:"svrRecvTimeAsk"`
	SvrRecvTimeAskTimestamp float64                 `protobuf:"fixed64,7,opt,name=svrRecvTimeAskTimestamp" json:"svrRecvTimeAskTimestamp"`
}

func (m *S2C) Reset()         { *m = S2C{} }
func (m *S2C) String() string { return proto.CompactTextString(m) }
func (*S2C) ProtoMessage()    {}
func (*S2C) Descriptor() ([]byte, []int) {
	return fileDescriptor_2eb6eb95eb88e215, []int{0}
}
func (m *S2C) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C.Merge(m, src)
}
func (m *S2C) XXX_Size() int {
	return m.Size()
}
func (m *S2C) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C.DiscardUnknown(m)
}

var xxx_messageInfo_S2C proto.InternalMessageInfo

func (m *S2C) GetSecurity() *Qot_Common.Security {
	if m != nil {
		return m.Security
	}
	return nil
}

func (m *S2C) GetOrderBookAskList() []*Qot_Common.OrderBook {
	if m != nil {
		return m.OrderBookAskList
	}
	return nil
}

func (m *S2C) GetOrderBookBidList() []*Qot_Common.OrderBook {
	if m != nil {
		return m.OrderBookBidList
	}
	return nil
}

func (m *S2C) GetSvrRecvTimeBid() string {
	if m != nil {
		return m.SvrRecvTimeBid
	}
	return ""
}

func (m *S2C) GetSvrRecvTimeBidTimestamp() float64 {
	if m != nil {
		return m.SvrRecvTimeBidTimestamp
	}
	return 0
}

func (m *S2C) GetSvrRecvTimeAsk() string {
	if m != nil {
		return m.SvrRecvTimeAsk
	}
	return ""
}

func (m *S2C) GetSvrRecvTimeAskTimestamp() float64 {
	if m != nil {
		return m.SvrRecvTimeAskTimestamp
	}
	return 0
}

type Response struct {
	RetType *int32 `protobuf:"varint,1,req,name=retType,def=-400" json:"retType,omitempty"`
	RetMsg  string `protobuf:"bytes,2,opt,name=retMsg" json:"retMsg"`
	ErrCode int32  `protobuf:"varint,3,opt,name=errCode" json:"errCode"`
	S2C     *S2C   `protobuf:"bytes,4,opt,name=s2c" json:"s2c,omitempty"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_2eb6eb95eb88e215, []int{1}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return m.Size()
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

const Default_Response_RetType int32 = -400

func (m *Response) GetRetType() int32 {
	if m != nil && m.RetType != nil {
		return *m.RetType
	}
	return Default_Response_RetType
}

func (m *Response) GetRetMsg() string {
	if m != nil {
		return m.RetMsg
	}
	return ""
}

func (m *Response) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *Response) GetS2C() *S2C {
	if m != nil {
		return m.S2C
	}
	return nil
}

func init() {
	proto.RegisterType((*S2C)(nil), "Qot_UpdateOrderBook.S2C")
	proto.RegisterType((*Response)(nil), "Qot_UpdateOrderBook.Response")
}

func init() { proto.RegisterFile("Qot_UpdateOrderBook.proto", fileDescriptor_2eb6eb95eb88e215) }

var fileDescriptor_2eb6eb95eb88e215 = []byte{
	// 375 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x4f, 0x4b, 0xc3, 0x30,
	0x18, 0xc6, 0x9b, 0x75, 0xff, 0xcc, 0x44, 0x46, 0xa6, 0x18, 0x87, 0xd4, 0xb2, 0x53, 0x11, 0xad,
	0xa3, 0x78, 0xf2, 0x20, 0xb4, 0x3d, 0x78, 0x51, 0xc4, 0x6e, 0x5e, 0xbc, 0xc8, 0xd6, 0xc6, 0x51,
	0x4a, 0x97, 0x90, 0x64, 0x83, 0x7d, 0x0b, 0x0f, 0x5e, 0xfc, 0x46, 0x3b, 0xee, 0xe8, 0x49, 0x64,
	0xfb, 0x22, 0xd2, 0xd9, 0xcd, 0x6e, 0x6e, 0xe0, 0x29, 0xf0, 0x3c, 0xbf, 0xf7, 0x79, 0x5e, 0x92,
	0xc0, 0xa3, 0x07, 0x2a, 0x9f, 0x1f, 0x59, 0xd0, 0x91, 0xe4, 0x9e, 0x07, 0x84, 0x3b, 0x94, 0x46,
	0x26, 0xe3, 0x54, 0x52, 0x54, 0xdb, 0x60, 0xd5, 0x77, 0x5d, 0x1a, 0xc7, 0xb4, 0xff, 0x83, 0xd4,
	0xab, 0x09, 0x92, 0x55, 0x1a, 0xef, 0x2a, 0x54, 0x5b, 0x96, 0x8b, 0x9a, 0xb0, 0x2c, 0x88, 0x3f,
	0xe0, 0xa1, 0x1c, 0x61, 0xa0, 0xe7, 0x8c, 0x8a, 0xb5, 0x6f, 0x66, 0xe0, 0x56, 0xea, 0x79, 0x4b,
	0x0a, 0xd9, 0xb0, 0x4a, 0x17, 0x35, 0xb6, 0x88, 0x6e, 0x43, 0x21, 0x71, 0x4e, 0x57, 0x8d, 0x8a,
	0x75, 0x90, 0x9d, 0x5c, 0xae, 0xe2, 0xfd, 0xc1, 0x57, 0x22, 0x9c, 0x30, 0x98, 0x47, 0xa8, 0xff,
	0x8b, 0x48, 0x71, 0x74, 0x06, 0xf7, 0xc4, 0x90, 0x7b, 0xc4, 0x1f, 0xb6, 0xc3, 0x98, 0x38, 0x61,
	0x80, 0xf3, 0x3a, 0x30, 0x76, 0x9c, 0xfc, 0xf8, 0xf3, 0x44, 0xf1, 0xd6, 0x3c, 0x74, 0x0d, 0x0f,
	0x57, 0x95, 0xe4, 0x10, 0xb2, 0x13, 0x33, 0x5c, 0xd0, 0x81, 0x01, 0xd2, 0xb1, 0x6d, 0xd0, 0x5a,
	0x9b, 0x2d, 0x22, 0x5c, 0xdc, 0xd2, 0x66, 0x8b, 0x68, 0xad, 0xcd, 0x16, 0xd1, 0x6f, 0x5b, 0x69,
	0x4b, 0x5b, 0x16, 0x6a, 0xbc, 0x01, 0x58, 0xf6, 0x88, 0x60, 0xb4, 0x2f, 0x08, 0xd2, 0x60, 0x89,
	0x13, 0xd9, 0x1e, 0x31, 0x32, 0x7f, 0x9f, 0xc2, 0x55, 0xfe, 0xfc, 0xb2, 0xd9, 0xf4, 0x16, 0x22,
	0x3a, 0x86, 0x45, 0x4e, 0xe4, 0x9d, 0xe8, 0xe1, 0x5c, 0x66, 0xa5, 0x54, 0x4b, 0xa6, 0x09, 0xe7,
	0x2e, 0x0d, 0x08, 0x56, 0x75, 0x60, 0x14, 0x52, 0x7b, 0x21, 0xa2, 0x53, 0xa8, 0x0a, 0xcb, 0x9f,
	0xdf, 0x5d, 0xc5, 0xc2, 0xe6, 0xa6, 0x4f, 0xd6, 0xb2, 0x5c, 0x2f, 0x81, 0x9c, 0x9b, 0xf1, 0x54,
	0x03, 0x93, 0xa9, 0x06, 0xbe, 0xa6, 0x1a, 0x78, 0x9d, 0x69, 0xca, 0x64, 0xa6, 0x29, 0x1f, 0x33,
	0x4d, 0x81, 0x35, 0x9f, 0xc6, 0xe6, 0xcb, 0x40, 0x0e, 0x4c, 0xca, 0x48, 0xbf, 0xc3, 0x42, 0x93,
	0x75, 0x9f, 0x30, 0xeb, 0xf6, 0xe8, 0xc5, 0x86, 0xc4, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfe,
	0xea, 0x61, 0x1f, 0xcc, 0x02, 0x00, 0x00,
}

func (m *S2C) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.SvrRecvTimeAskTimestamp))))
	i--
	dAtA[i] = 0x39
	i -= len(m.SvrRecvTimeAsk)
	copy(dAtA[i:], m.SvrRecvTimeAsk)
	i = encodeVarintQot_UpdateOrderBook(dAtA, i, uint64(len(m.SvrRecvTimeAsk)))
	i--
	dAtA[i] = 0x32
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.SvrRecvTimeBidTimestamp))))
	i--
	dAtA[i] = 0x29
	i -= len(m.SvrRecvTimeBid)
	copy(dAtA[i:], m.SvrRecvTimeBid)
	i = encodeVarintQot_UpdateOrderBook(dAtA, i, uint64(len(m.SvrRecvTimeBid)))
	i--
	dAtA[i] = 0x22
	if len(m.OrderBookBidList) > 0 {
		for iNdEx := len(m.OrderBookBidList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OrderBookBidList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQot_UpdateOrderBook(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.OrderBookAskList) > 0 {
		for iNdEx := len(m.OrderBookAskList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OrderBookAskList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQot_UpdateOrderBook(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Security == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("security")
	} else {
		{
			size, err := m.Security.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQot_UpdateOrderBook(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.S2C != nil {
		{
			size, err := m.S2C.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQot_UpdateOrderBook(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	i = encodeVarintQot_UpdateOrderBook(dAtA, i, uint64(m.ErrCode))
	i--
	dAtA[i] = 0x18
	i -= len(m.RetMsg)
	copy(dAtA[i:], m.RetMsg)
	i = encodeVarintQot_UpdateOrderBook(dAtA, i, uint64(len(m.RetMsg)))
	i--
	dAtA[i] = 0x12
	if m.RetType == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("retType")
	} else {
		i = encodeVarintQot_UpdateOrderBook(dAtA, i, uint64(*m.RetType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQot_UpdateOrderBook(dAtA []byte, offset int, v uint64) int {
	offset -= sovQot_UpdateOrderBook(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *S2C) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Security != nil {
		l = m.Security.Size()
		n += 1 + l + sovQot_UpdateOrderBook(uint64(l))
	}
	if len(m.OrderBookAskList) > 0 {
		for _, e := range m.OrderBookAskList {
			l = e.Size()
			n += 1 + l + sovQot_UpdateOrderBook(uint64(l))
		}
	}
	if len(m.OrderBookBidList) > 0 {
		for _, e := range m.OrderBookBidList {
			l = e.Size()
			n += 1 + l + sovQot_UpdateOrderBook(uint64(l))
		}
	}
	l = len(m.SvrRecvTimeBid)
	n += 1 + l + sovQot_UpdateOrderBook(uint64(l))
	n += 9
	l = len(m.SvrRecvTimeAsk)
	n += 1 + l + sovQot_UpdateOrderBook(uint64(l))
	n += 9
	return n
}

func (m *Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetType != nil {
		n += 1 + sovQot_UpdateOrderBook(uint64(*m.RetType))
	}
	l = len(m.RetMsg)
	n += 1 + l + sovQot_UpdateOrderBook(uint64(l))
	n += 1 + sovQot_UpdateOrderBook(uint64(m.ErrCode))
	if m.S2C != nil {
		l = m.S2C.Size()
		n += 1 + l + sovQot_UpdateOrderBook(uint64(l))
	}
	return n
}

func sovQot_UpdateOrderBook(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQot_UpdateOrderBook(x uint64) (n int) {
	return sovQot_UpdateOrderBook(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *S2C) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_UpdateOrderBook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Security", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_UpdateOrderBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_UpdateOrderBook
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_UpdateOrderBook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Security == nil {
				m.Security = &Qot_Common.Security{}
			}
			if err := m.Security.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderBookAskList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_UpdateOrderBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_UpdateOrderBook
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_UpdateOrderBook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderBookAskList = append(m.OrderBookAskList, &Qot_Common.OrderBook{})
			if err := m.OrderBookAskList[len(m.OrderBookAskList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderBookBidList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_UpdateOrderBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_UpdateOrderBook
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_UpdateOrderBook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderBookBidList = append(m.OrderBookBidList, &Qot_Common.OrderBook{})
			if err := m.OrderBookBidList[len(m.OrderBookBidList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvrRecvTimeBid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_UpdateOrderBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQot_UpdateOrderBook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQot_UpdateOrderBook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SvrRecvTimeBid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvrRecvTimeBidTimestamp", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.SvrRecvTimeBidTimestamp = float64(math.Float64frombits(v))
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvrRecvTimeAsk", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_UpdateOrderBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQot_UpdateOrderBook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQot_UpdateOrderBook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SvrRecvTimeAsk = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvrRecvTimeAskTimestamp", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.SvrRecvTimeAskTimestamp = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipQot_UpdateOrderBook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_UpdateOrderBook
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_UpdateOrderBook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("security")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_UpdateOrderBook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_UpdateOrderBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetType = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_UpdateOrderBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQot_UpdateOrderBook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQot_UpdateOrderBook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RetMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			m.ErrCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_UpdateOrderBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S2C", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_UpdateOrderBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_UpdateOrderBook
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_UpdateOrderBook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.S2C == nil {
				m.S2C = &S2C{}
			}
			if err := m.S2C.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQot_UpdateOrderBook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_UpdateOrderBook
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_UpdateOrderBook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("retType")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQot_UpdateOrderBook(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQot_UpdateOrderBook
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQot_UpdateOrderBook
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQot_UpdateOrderBook
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQot_UpdateOrderBook
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthQot_UpdateOrderBook
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowQot_UpdateOrderBook
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipQot_UpdateOrderBook(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthQot_UpdateOrderBook
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthQot_UpdateOrderBook = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQot_UpdateOrderBook   = fmt.Errorf("proto: integer overflow")
)
