// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: GetDelayStatistics.proto

package getdelaystatistics

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/futuopen/ftapi4go/pb/common"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DelayStatisticsType int32

const (
	DelayStatisticsType_DelayStatisticsType_Unkonw     DelayStatisticsType = 0
	DelayStatisticsType_DelayStatisticsType_QotPush    DelayStatisticsType = 1
	DelayStatisticsType_DelayStatisticsType_ReqReply   DelayStatisticsType = 2
	DelayStatisticsType_DelayStatisticsType_PlaceOrder DelayStatisticsType = 3
)

var DelayStatisticsType_name = map[int32]string{
	0: "DelayStatisticsType_Unkonw",
	1: "DelayStatisticsType_QotPush",
	2: "DelayStatisticsType_ReqReply",
	3: "DelayStatisticsType_PlaceOrder",
}

var DelayStatisticsType_value = map[string]int32{
	"DelayStatisticsType_Unkonw":     0,
	"DelayStatisticsType_QotPush":    1,
	"DelayStatisticsType_ReqReply":   2,
	"DelayStatisticsType_PlaceOrder": 3,
}

func (x DelayStatisticsType) Enum() *DelayStatisticsType {
	p := new(DelayStatisticsType)
	*p = x
	return p
}

func (x DelayStatisticsType) String() string {
	return proto.EnumName(DelayStatisticsType_name, int32(x))
}

func (x *DelayStatisticsType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DelayStatisticsType_value, data, "DelayStatisticsType")
	if err != nil {
		return err
	}
	*x = DelayStatisticsType(value)
	return nil
}

func (DelayStatisticsType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_eeaa8da07c101f70, []int{0}
}

//某段时间的统计数据
//SR表示服务器收到数据，目前只有港股支持SR字段，SS表示服务器发出数据
//CR表示OpenD收到数据，CS表示OpenD发出数据
type QotPushStage int32

const (
	QotPushStage_QotPushStage_Unkonw QotPushStage = 0
	QotPushStage_QotPushStage_SR2SS  QotPushStage = 1
	QotPushStage_QotPushStage_SS2CR  QotPushStage = 2
	QotPushStage_QotPushStage_CR2CS  QotPushStage = 3
	QotPushStage_QotPushStage_SS2CS  QotPushStage = 4
	QotPushStage_QotPushStage_SR2CS  QotPushStage = 5
)

var QotPushStage_name = map[int32]string{
	0: "QotPushStage_Unkonw",
	1: "QotPushStage_SR2SS",
	2: "QotPushStage_SS2CR",
	3: "QotPushStage_CR2CS",
	4: "QotPushStage_SS2CS",
	5: "QotPushStage_SR2CS",
}

var QotPushStage_value = map[string]int32{
	"QotPushStage_Unkonw": 0,
	"QotPushStage_SR2SS":  1,
	"QotPushStage_SS2CR":  2,
	"QotPushStage_CR2CS":  3,
	"QotPushStage_SS2CS":  4,
	"QotPushStage_SR2CS":  5,
}

func (x QotPushStage) Enum() *QotPushStage {
	p := new(QotPushStage)
	*p = x
	return p
}

func (x QotPushStage) String() string {
	return proto.EnumName(QotPushStage_name, int32(x))
}

func (x *QotPushStage) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(QotPushStage_value, data, "QotPushStage")
	if err != nil {
		return err
	}
	*x = QotPushStage(value)
	return nil
}

func (QotPushStage) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_eeaa8da07c101f70, []int{1}
}

//行情推送类型
type QotPushType int32

const (
	QotPushType_QotPushType_Unkonw    QotPushType = 0
	QotPushType_QotPushType_Price     QotPushType = 1
	QotPushType_QotPushType_Ticker    QotPushType = 2
	QotPushType_QotPushType_OrderBook QotPushType = 3
	QotPushType_QotPushType_Broker    QotPushType = 4
)

var QotPushType_name = map[int32]string{
	0: "QotPushType_Unkonw",
	1: "QotPushType_Price",
	2: "QotPushType_Ticker",
	3: "QotPushType_OrderBook",
	4: "QotPushType_Broker",
}

var QotPushType_value = map[string]int32{
	"QotPushType_Unkonw":    0,
	"QotPushType_Price":     1,
	"QotPushType_Ticker":    2,
	"QotPushType_OrderBook": 3,
	"QotPushType_Broker":    4,
}

func (x QotPushType) Enum() *QotPushType {
	p := new(QotPushType)
	*p = x
	return p
}

func (x QotPushType) String() string {
	return proto.EnumName(QotPushType_name, int32(x))
}

func (x *QotPushType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(QotPushType_value, data, "QotPushType")
	if err != nil {
		return err
	}
	*x = QotPushType(value)
	return nil
}

func (QotPushType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_eeaa8da07c101f70, []int{2}
}

type C2S struct {
	TypeList     []int32 `protobuf:"varint,1,rep,name=typeList" json:"typeList,omitempty"`
	QotPushStage int32   `protobuf:"varint,2,opt,name=qotPushStage" json:"qotPushStage"`
	SegmentList  []int32 `protobuf:"varint,3,rep,name=segmentList" json:"segmentList,omitempty"`
}

func (m *C2S) Reset()         { *m = C2S{} }
func (m *C2S) String() string { return proto.CompactTextString(m) }
func (*C2S) ProtoMessage()    {}
func (*C2S) Descriptor() ([]byte, []int) {
	return fileDescriptor_eeaa8da07c101f70, []int{0}
}
func (m *C2S) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S.Merge(m, src)
}
func (m *C2S) XXX_Size() int {
	return m.Size()
}
func (m *C2S) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S.DiscardUnknown(m)
}

var xxx_messageInfo_C2S proto.InternalMessageInfo

func (m *C2S) GetTypeList() []int32 {
	if m != nil {
		return m.TypeList
	}
	return nil
}

func (m *C2S) GetQotPushStage() int32 {
	if m != nil {
		return m.QotPushStage
	}
	return 0
}

func (m *C2S) GetSegmentList() []int32 {
	if m != nil {
		return m.SegmentList
	}
	return nil
}

type DelayStatisticsItem struct {
	//范围左闭右开，[begin,end)
	Begin           int32   `protobuf:"varint,1,req,name=begin" json:"begin"`
	End             int32   `protobuf:"varint,2,req,name=end" json:"end"`
	Count           int32   `protobuf:"varint,3,req,name=count" json:"count"`
	Proportion      float32 `protobuf:"fixed32,4,req,name=proportion" json:"proportion"`
	CumulativeRatio float32 `protobuf:"fixed32,5,req,name=cumulativeRatio" json:"cumulativeRatio"`
}

func (m *DelayStatisticsItem) Reset()         { *m = DelayStatisticsItem{} }
func (m *DelayStatisticsItem) String() string { return proto.CompactTextString(m) }
func (*DelayStatisticsItem) ProtoMessage()    {}
func (*DelayStatisticsItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_eeaa8da07c101f70, []int{1}
}
func (m *DelayStatisticsItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelayStatisticsItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelayStatisticsItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelayStatisticsItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelayStatisticsItem.Merge(m, src)
}
func (m *DelayStatisticsItem) XXX_Size() int {
	return m.Size()
}
func (m *DelayStatisticsItem) XXX_DiscardUnknown() {
	xxx_messageInfo_DelayStatisticsItem.DiscardUnknown(m)
}

var xxx_messageInfo_DelayStatisticsItem proto.InternalMessageInfo

func (m *DelayStatisticsItem) GetBegin() int32 {
	if m != nil {
		return m.Begin
	}
	return 0
}

func (m *DelayStatisticsItem) GetEnd() int32 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *DelayStatisticsItem) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *DelayStatisticsItem) GetProportion() float32 {
	if m != nil {
		return m.Proportion
	}
	return 0
}

func (m *DelayStatisticsItem) GetCumulativeRatio() float32 {
	if m != nil {
		return m.CumulativeRatio
	}
	return 0
}

type DelayStatistics struct {
	QotPushType int32                  `protobuf:"varint,1,req,name=qotPushType" json:"qotPushType"`
	ItemList    []*DelayStatisticsItem `protobuf:"bytes,2,rep,name=itemList" json:"itemList,omitempty"`
	DelayAvg    float32                `protobuf:"fixed32,3,req,name=delayAvg" json:"delayAvg"`
	Count       int32                  `protobuf:"varint,4,req,name=count" json:"count"`
}

func (m *DelayStatistics) Reset()         { *m = DelayStatistics{} }
func (m *DelayStatistics) String() string { return proto.CompactTextString(m) }
func (*DelayStatistics) ProtoMessage()    {}
func (*DelayStatistics) Descriptor() ([]byte, []int) {
	return fileDescriptor_eeaa8da07c101f70, []int{2}
}
func (m *DelayStatistics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelayStatistics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelayStatistics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelayStatistics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelayStatistics.Merge(m, src)
}
func (m *DelayStatistics) XXX_Size() int {
	return m.Size()
}
func (m *DelayStatistics) XXX_DiscardUnknown() {
	xxx_messageInfo_DelayStatistics.DiscardUnknown(m)
}

var xxx_messageInfo_DelayStatistics proto.InternalMessageInfo

func (m *DelayStatistics) GetQotPushType() int32 {
	if m != nil {
		return m.QotPushType
	}
	return 0
}

func (m *DelayStatistics) GetItemList() []*DelayStatisticsItem {
	if m != nil {
		return m.ItemList
	}
	return nil
}

func (m *DelayStatistics) GetDelayAvg() float32 {
	if m != nil {
		return m.DelayAvg
	}
	return 0
}

func (m *DelayStatistics) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type ReqReplyStatisticsItem struct {
	ProtoID      int32   `protobuf:"varint,1,req,name=protoID" json:"protoID"`
	Count        int32   `protobuf:"varint,2,req,name=count" json:"count"`
	TotalCostAvg float32 `protobuf:"fixed32,3,req,name=totalCostAvg" json:"totalCostAvg"`
	OpenDCostAvg float32 `protobuf:"fixed32,4,req,name=openDCostAvg" json:"openDCostAvg"`
	NetDelayAvg  float32 `protobuf:"fixed32,5,req,name=netDelayAvg" json:"netDelayAvg"`
	IsLocalReply bool    `protobuf:"varint,6,req,name=isLocalReply" json:"isLocalReply"`
}

func (m *ReqReplyStatisticsItem) Reset()         { *m = ReqReplyStatisticsItem{} }
func (m *ReqReplyStatisticsItem) String() string { return proto.CompactTextString(m) }
func (*ReqReplyStatisticsItem) ProtoMessage()    {}
func (*ReqReplyStatisticsItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_eeaa8da07c101f70, []int{3}
}
func (m *ReqReplyStatisticsItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqReplyStatisticsItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqReplyStatisticsItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqReplyStatisticsItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqReplyStatisticsItem.Merge(m, src)
}
func (m *ReqReplyStatisticsItem) XXX_Size() int {
	return m.Size()
}
func (m *ReqReplyStatisticsItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqReplyStatisticsItem.DiscardUnknown(m)
}

var xxx_messageInfo_ReqReplyStatisticsItem proto.InternalMessageInfo

func (m *ReqReplyStatisticsItem) GetProtoID() int32 {
	if m != nil {
		return m.ProtoID
	}
	return 0
}

func (m *ReqReplyStatisticsItem) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ReqReplyStatisticsItem) GetTotalCostAvg() float32 {
	if m != nil {
		return m.TotalCostAvg
	}
	return 0
}

func (m *ReqReplyStatisticsItem) GetOpenDCostAvg() float32 {
	if m != nil {
		return m.OpenDCostAvg
	}
	return 0
}

func (m *ReqReplyStatisticsItem) GetNetDelayAvg() float32 {
	if m != nil {
		return m.NetDelayAvg
	}
	return 0
}

func (m *ReqReplyStatisticsItem) GetIsLocalReply() bool {
	if m != nil {
		return m.IsLocalReply
	}
	return false
}

type PlaceOrderStatisticsItem struct {
	OrderID    string  `protobuf:"bytes,1,req,name=orderID" json:"orderID"`
	TotalCost  float32 `protobuf:"fixed32,2,req,name=totalCost" json:"totalCost"`
	OpenDCost  float32 `protobuf:"fixed32,3,req,name=openDCost" json:"openDCost"`
	NetDelay   float32 `protobuf:"fixed32,4,req,name=netDelay" json:"netDelay"`
	UpdateCost float32 `protobuf:"fixed32,5,req,name=updateCost" json:"updateCost"`
}

func (m *PlaceOrderStatisticsItem) Reset()         { *m = PlaceOrderStatisticsItem{} }
func (m *PlaceOrderStatisticsItem) String() string { return proto.CompactTextString(m) }
func (*PlaceOrderStatisticsItem) ProtoMessage()    {}
func (*PlaceOrderStatisticsItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_eeaa8da07c101f70, []int{4}
}
func (m *PlaceOrderStatisticsItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlaceOrderStatisticsItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlaceOrderStatisticsItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlaceOrderStatisticsItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlaceOrderStatisticsItem.Merge(m, src)
}
func (m *PlaceOrderStatisticsItem) XXX_Size() int {
	return m.Size()
}
func (m *PlaceOrderStatisticsItem) XXX_DiscardUnknown() {
	xxx_messageInfo_PlaceOrderStatisticsItem.DiscardUnknown(m)
}

var xxx_messageInfo_PlaceOrderStatisticsItem proto.InternalMessageInfo

func (m *PlaceOrderStatisticsItem) GetOrderID() string {
	if m != nil {
		return m.OrderID
	}
	return ""
}

func (m *PlaceOrderStatisticsItem) GetTotalCost() float32 {
	if m != nil {
		return m.TotalCost
	}
	return 0
}

func (m *PlaceOrderStatisticsItem) GetOpenDCost() float32 {
	if m != nil {
		return m.OpenDCost
	}
	return 0
}

func (m *PlaceOrderStatisticsItem) GetNetDelay() float32 {
	if m != nil {
		return m.NetDelay
	}
	return 0
}

func (m *PlaceOrderStatisticsItem) GetUpdateCost() float32 {
	if m != nil {
		return m.UpdateCost
	}
	return 0
}

type S2C struct {
	QotPushStatisticsList    []*DelayStatistics          `protobuf:"bytes,1,rep,name=qotPushStatisticsList" json:"qotPushStatisticsList,omitempty"`
	ReqReplyStatisticsList   []*ReqReplyStatisticsItem   `protobuf:"bytes,2,rep,name=reqReplyStatisticsList" json:"reqReplyStatisticsList,omitempty"`
	PlaceOrderStatisticsList []*PlaceOrderStatisticsItem `protobuf:"bytes,3,rep,name=placeOrderStatisticsList" json:"placeOrderStatisticsList,omitempty"`
}

func (m *S2C) Reset()         { *m = S2C{} }
func (m *S2C) String() string { return proto.CompactTextString(m) }
func (*S2C) ProtoMessage()    {}
func (*S2C) Descriptor() ([]byte, []int) {
	return fileDescriptor_eeaa8da07c101f70, []int{5}
}
func (m *S2C) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C.Merge(m, src)
}
func (m *S2C) XXX_Size() int {
	return m.Size()
}
func (m *S2C) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C.DiscardUnknown(m)
}

var xxx_messageInfo_S2C proto.InternalMessageInfo

func (m *S2C) GetQotPushStatisticsList() []*DelayStatistics {
	if m != nil {
		return m.QotPushStatisticsList
	}
	return nil
}

func (m *S2C) GetReqReplyStatisticsList() []*ReqReplyStatisticsItem {
	if m != nil {
		return m.ReqReplyStatisticsList
	}
	return nil
}

func (m *S2C) GetPlaceOrderStatisticsList() []*PlaceOrderStatisticsItem {
	if m != nil {
		return m.PlaceOrderStatisticsList
	}
	return nil
}

type Request struct {
	C2S *C2S `protobuf:"bytes,1,req,name=c2s" json:"c2s,omitempty"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_eeaa8da07c101f70, []int{6}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return m.Size()
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetC2S() *C2S {
	if m != nil {
		return m.C2S
	}
	return nil
}

type Response struct {
	RetType *int32 `protobuf:"varint,1,req,name=retType,def=-400" json:"retType,omitempty"`
	RetMsg  string `protobuf:"bytes,2,opt,name=retMsg" json:"retMsg"`
	ErrCode int32  `protobuf:"varint,3,opt,name=errCode" json:"errCode"`
	S2C     *S2C   `protobuf:"bytes,4,opt,name=s2c" json:"s2c,omitempty"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_eeaa8da07c101f70, []int{7}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return m.Size()
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

const Default_Response_RetType int32 = -400

func (m *Response) GetRetType() int32 {
	if m != nil && m.RetType != nil {
		return *m.RetType
	}
	return Default_Response_RetType
}

func (m *Response) GetRetMsg() string {
	if m != nil {
		return m.RetMsg
	}
	return ""
}

func (m *Response) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *Response) GetS2C() *S2C {
	if m != nil {
		return m.S2C
	}
	return nil
}

func init() {
	proto.RegisterEnum("GetDelayStatistics.DelayStatisticsType", DelayStatisticsType_name, DelayStatisticsType_value)
	proto.RegisterEnum("GetDelayStatistics.QotPushStage", QotPushStage_name, QotPushStage_value)
	proto.RegisterEnum("GetDelayStatistics.QotPushType", QotPushType_name, QotPushType_value)
	proto.RegisterType((*C2S)(nil), "GetDelayStatistics.C2S")
	proto.RegisterType((*DelayStatisticsItem)(nil), "GetDelayStatistics.DelayStatisticsItem")
	proto.RegisterType((*DelayStatistics)(nil), "GetDelayStatistics.DelayStatistics")
	proto.RegisterType((*ReqReplyStatisticsItem)(nil), "GetDelayStatistics.ReqReplyStatisticsItem")
	proto.RegisterType((*PlaceOrderStatisticsItem)(nil), "GetDelayStatistics.PlaceOrderStatisticsItem")
	proto.RegisterType((*S2C)(nil), "GetDelayStatistics.S2C")
	proto.RegisterType((*Request)(nil), "GetDelayStatistics.Request")
	proto.RegisterType((*Response)(nil), "GetDelayStatistics.Response")
}

func init() { proto.RegisterFile("GetDelayStatistics.proto", fileDescriptor_eeaa8da07c101f70) }

var fileDescriptor_eeaa8da07c101f70 = []byte{
	// 836 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0xc1, 0x6e, 0xdc, 0x44,
	0x18, 0xde, 0xb1, 0x77, 0xdb, 0xed, 0xbf, 0x91, 0x6a, 0x26, 0x4a, 0x6a, 0x42, 0xe5, 0x5a, 0x06,
	0xc1, 0x12, 0xc1, 0x6e, 0x65, 0xe5, 0xc4, 0x8d, 0x75, 0x24, 0x54, 0xa9, 0x88, 0x64, 0x5c, 0x0e,
	0x70, 0x41, 0x5e, 0xef, 0xd4, 0xb1, 0xb2, 0xf6, 0x38, 0xf6, 0xb8, 0x28, 0x4f, 0xc0, 0x15, 0x89,
	0x2b, 0x12, 0x6f, 0xc0, 0x0b, 0xc0, 0x03, 0x54, 0x9c, 0x72, 0xe4, 0x84, 0x50, 0xf2, 0x16, 0x9c,
	0xd0, 0x4c, 0xd6, 0xf6, 0x78, 0xed, 0x95, 0x7a, 0xf4, 0xf7, 0x7d, 0xf3, 0xfb, 0xfb, 0xbf, 0xff,
	0xf7, 0x18, 0xcc, 0xaf, 0x28, 0x3f, 0xa5, 0xeb, 0xe0, 0xda, 0xe7, 0x01, 0x8f, 0x0b, 0x1e, 0x87,
	0xc5, 0x2c, 0xcb, 0x19, 0x67, 0x18, 0x77, 0x99, 0xa3, 0x3d, 0x8f, 0x25, 0x09, 0x4b, 0xef, 0x15,
	0x4e, 0x02, 0xba, 0xe7, 0xfa, 0xf8, 0x08, 0xc6, 0xfc, 0x3a, 0xa3, 0x2f, 0xe3, 0x82, 0x9b, 0xc8,
	0xd6, 0xa7, 0x23, 0x52, 0x3f, 0xe3, 0x29, 0xec, 0x5d, 0x31, 0x7e, 0x56, 0x16, 0x17, 0x3e, 0x0f,
	0x22, 0x6a, 0x6a, 0x36, 0x9a, 0x8e, 0x16, 0xc3, 0xb7, 0xff, 0x3c, 0x1b, 0x90, 0x16, 0x83, 0x6d,
	0x98, 0x14, 0x34, 0x4a, 0x68, 0xca, 0x65, 0x21, 0x5d, 0x16, 0x52, 0x21, 0xe7, 0x0f, 0x04, 0xfb,
	0x5b, 0x86, 0x5e, 0x70, 0x9a, 0xe0, 0x23, 0x18, 0x2d, 0x69, 0x14, 0xa7, 0x26, 0xb2, 0xb5, 0xba,
	0xf8, 0x3d, 0x84, 0x0f, 0x41, 0xa7, 0xe9, 0xca, 0xd4, 0x14, 0x46, 0x00, 0xe2, 0x4c, 0xc8, 0xca,
	0x54, 0xbc, 0x47, 0x39, 0x23, 0x21, 0xfc, 0x11, 0x40, 0x96, 0xb3, 0x8c, 0xe5, 0x3c, 0x66, 0xa9,
	0x39, 0xb4, 0xb5, 0xa9, 0xb6, 0x11, 0x28, 0x38, 0x9e, 0xc1, 0xe3, 0xb0, 0x4c, 0xca, 0x75, 0xc0,
	0xe3, 0x37, 0x94, 0x04, 0x3c, 0x66, 0xe6, 0x48, 0x91, 0x6e, 0x93, 0xce, 0x9f, 0x08, 0x1e, 0x6f,
	0xb9, 0xc7, 0x1f, 0xc3, 0x64, 0x93, 0xc1, 0xab, 0xeb, 0x8c, 0xb6, 0xfc, 0xab, 0x04, 0xf6, 0x60,
	0x1c, 0x73, 0x9a, 0xc8, 0x60, 0x34, 0x5b, 0x9f, 0x4e, 0xdc, 0x4f, 0x66, 0x3d, 0x73, 0xeb, 0x09,
	0x87, 0xd4, 0x07, 0xb1, 0x0d, 0xe3, 0x95, 0x10, 0x7c, 0xf9, 0x26, 0x92, 0x5d, 0x57, 0x4e, 0x6b,
	0xb4, 0x09, 0x65, 0xd8, 0x09, 0xc5, 0xf9, 0x0f, 0xc1, 0x21, 0xa1, 0x57, 0x84, 0x66, 0xeb, 0xed,
	0xfc, 0x2d, 0x78, 0x28, 0xf7, 0xe1, 0xc5, 0x69, 0xab, 0x83, 0x0a, 0x6c, 0xca, 0x6a, 0xdd, 0xac,
	0xa7, 0xb0, 0xc7, 0x19, 0x0f, 0xd6, 0x1e, 0x2b, 0xf8, 0xb6, 0xb1, 0x16, 0x23, 0x94, 0x2c, 0xa3,
	0xe9, 0x69, 0xa5, 0x54, 0xe7, 0xd2, 0x62, 0x44, 0xaa, 0xe9, 0x26, 0x1c, 0x21, 0x54, 0xa7, 0xa2,
	0x12, 0xa2, 0x62, 0x5c, 0xbc, 0x64, 0x61, 0xb0, 0x96, 0x5d, 0x99, 0x0f, 0x6c, 0x6d, 0x3a, 0xae,
	0x2a, 0xaa, 0x8c, 0xf3, 0x17, 0x02, 0xf3, 0x6c, 0x1d, 0x84, 0xf4, 0x9b, 0x7c, 0x45, 0xf3, 0x6e,
	0xfb, 0x4c, 0xc0, 0x9b, 0xf6, 0x1f, 0x55, 0xed, 0x6f, 0x40, 0xec, 0xc0, 0xa3, 0xba, 0x11, 0x19,
	0x41, 0x65, 0xa6, 0x81, 0x85, 0xa6, 0x6e, 0xa1, 0x95, 0x41, 0x03, 0x8b, 0xf9, 0x55, 0xee, 0x5b,
	0xcd, 0xd7, 0xa8, 0x58, 0xdc, 0x32, 0x5b, 0x05, 0x9c, 0xca, 0x32, 0x6a, 0xdf, 0x0a, 0xee, 0xfc,
	0xae, 0x81, 0xee, 0xbb, 0x1e, 0xfe, 0x0e, 0x0e, 0x9a, 0x0f, 0x70, 0xd3, 0x50, 0xfd, 0x0d, 0x4f,
	0xdc, 0x0f, 0xdf, 0x61, 0xc3, 0x48, 0x7f, 0x05, 0xbc, 0x84, 0xc3, 0xbc, 0xb3, 0x2b, 0xca, 0xf6,
	0x1e, 0xf7, 0xd5, 0xee, 0xdf, 0x2e, 0xb2, 0xa3, 0x12, 0xbe, 0x00, 0x33, 0xeb, 0x19, 0x49, 0x7d,
	0x79, 0x4c, 0xdc, 0xcf, 0xfa, 0xde, 0xb2, 0x6b, 0x8c, 0x64, 0x67, 0x35, 0xe7, 0x04, 0x1e, 0x12,
	0x7a, 0x55, 0xd2, 0x82, 0xe3, 0x4f, 0x41, 0x0f, 0xdd, 0x42, 0xce, 0x79, 0xe2, 0x3e, 0xe9, 0xab,
	0xef, 0xb9, 0x3e, 0x11, 0x1a, 0xe7, 0x17, 0x04, 0x63, 0x42, 0x8b, 0x8c, 0xa5, 0x05, 0x15, 0x3b,
	0x92, 0x53, 0xde, 0x7c, 0xe4, 0x5f, 0x0c, 0x3f, 0x3f, 0x79, 0xfe, 0x9c, 0x54, 0x20, 0x7e, 0x0a,
	0x0f, 0x72, 0xca, 0xbf, 0x2e, 0x22, 0x79, 0x41, 0x56, 0x2b, 0xb4, 0xc1, 0xc4, 0x69, 0x9a, 0xe7,
	0x1e, 0x5b, 0x51, 0x53, 0x57, 0xee, 0xcf, 0x0a, 0x14, 0xae, 0x0a, 0x37, 0x34, 0x87, 0x36, 0xda,
	0xe5, 0xca, 0x77, 0x3d, 0x22, 0x34, 0xc7, 0xbf, 0x76, 0xef, 0x50, 0x69, 0xc0, 0x82, 0xa3, 0x1e,
	0xf8, 0x87, 0x6f, 0xd3, 0x4b, 0x96, 0xfe, 0x68, 0x0c, 0xf0, 0x33, 0xf8, 0xa0, 0x8f, 0x3f, 0xbf,
	0x1f, 0xbf, 0x81, 0xb0, 0x0d, 0x4f, 0xfb, 0x04, 0xd5, 0x50, 0x0d, 0x0d, 0x3b, 0x60, 0xf5, 0x29,
	0x9a, 0x81, 0x18, 0xfa, 0xf1, 0x6f, 0x08, 0xf6, 0xce, 0xd5, 0xbf, 0xc2, 0x13, 0xd8, 0x57, 0x9f,
	0x1b, 0x43, 0x87, 0x80, 0x5b, 0x84, 0x4f, 0x5c, 0xdf, 0x37, 0x50, 0x17, 0x17, 0xad, 0x1b, 0x5a,
	0x07, 0xf7, 0x88, 0xeb, 0xf9, 0x86, 0xde, 0xab, 0xf7, 0x8d, 0x61, 0x5f, 0x7d, 0xcf, 0x37, 0x46,
	0xc7, 0x3f, 0x21, 0x98, 0x9c, 0x2b, 0x57, 0x73, 0xa3, 0x6b, 0x07, 0x76, 0x00, 0xef, 0xa9, 0xf8,
	0x59, 0x1e, 0x87, 0xb4, 0x65, 0x4f, 0xc2, 0xaf, 0xe2, 0xf0, 0x92, 0xe6, 0x86, 0x86, 0xdf, 0x87,
	0x03, 0x15, 0x97, 0x79, 0x2c, 0x18, 0xbb, 0x6c, 0x39, 0x94, 0xd4, 0x22, 0x67, 0xe2, 0xc8, 0x70,
	0x11, 0xbc, 0xbd, 0xb5, 0xd0, 0xcd, 0xad, 0x85, 0xfe, 0xbd, 0xb5, 0xd0, 0xcf, 0x77, 0xd6, 0xe0,
	0xe6, 0xce, 0x1a, 0xfc, 0x7d, 0x67, 0x0d, 0x60, 0x3f, 0x64, 0xc9, 0xec, 0x75, 0xc9, 0xcb, 0x99,
	0xb8, 0x3d, 0x82, 0x2c, 0x9e, 0x65, 0xcb, 0xef, 0xdd, 0x28, 0xe6, 0x17, 0xe5, 0x72, 0x16, 0xb2,
	0x64, 0x2e, 0x38, 0x41, 0xcd, 0x5f, 0xf3, 0x20, 0x8b, 0x4f, 0x22, 0x36, 0xcf, 0x96, 0xf3, 0x88,
	0x72, 0xf9, 0x27, 0x28, 0xea, 0xf9, 0xfc, 0x1f, 0x00, 0x00, 0xff, 0xff, 0xe6, 0x8f, 0x17, 0x1a,
	0x1d, 0x08, 0x00, 0x00,
}

func (m *C2S) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SegmentList) > 0 {
		for iNdEx := len(m.SegmentList) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintGetDelayStatistics(dAtA, i, uint64(m.SegmentList[iNdEx]))
			i--
			dAtA[i] = 0x18
		}
	}
	i = encodeVarintGetDelayStatistics(dAtA, i, uint64(m.QotPushStage))
	i--
	dAtA[i] = 0x10
	if len(m.TypeList) > 0 {
		for iNdEx := len(m.TypeList) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintGetDelayStatistics(dAtA, i, uint64(m.TypeList[iNdEx]))
			i--
			dAtA[i] = 0x8
		}
	}
	return len(dAtA) - i, nil
}

func (m *DelayStatisticsItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelayStatisticsItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelayStatisticsItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.CumulativeRatio))))
	i--
	dAtA[i] = 0x2d
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Proportion))))
	i--
	dAtA[i] = 0x25
	i = encodeVarintGetDelayStatistics(dAtA, i, uint64(m.Count))
	i--
	dAtA[i] = 0x18
	i = encodeVarintGetDelayStatistics(dAtA, i, uint64(m.End))
	i--
	dAtA[i] = 0x10
	i = encodeVarintGetDelayStatistics(dAtA, i, uint64(m.Begin))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *DelayStatistics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelayStatistics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelayStatistics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGetDelayStatistics(dAtA, i, uint64(m.Count))
	i--
	dAtA[i] = 0x20
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.DelayAvg))))
	i--
	dAtA[i] = 0x1d
	if len(m.ItemList) > 0 {
		for iNdEx := len(m.ItemList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ItemList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGetDelayStatistics(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	i = encodeVarintGetDelayStatistics(dAtA, i, uint64(m.QotPushType))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *ReqReplyStatisticsItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqReplyStatisticsItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqReplyStatisticsItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.IsLocalReply {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x30
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.NetDelayAvg))))
	i--
	dAtA[i] = 0x2d
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.OpenDCostAvg))))
	i--
	dAtA[i] = 0x25
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.TotalCostAvg))))
	i--
	dAtA[i] = 0x1d
	i = encodeVarintGetDelayStatistics(dAtA, i, uint64(m.Count))
	i--
	dAtA[i] = 0x10
	i = encodeVarintGetDelayStatistics(dAtA, i, uint64(m.ProtoID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *PlaceOrderStatisticsItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlaceOrderStatisticsItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlaceOrderStatisticsItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.UpdateCost))))
	i--
	dAtA[i] = 0x2d
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.NetDelay))))
	i--
	dAtA[i] = 0x25
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.OpenDCost))))
	i--
	dAtA[i] = 0x1d
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.TotalCost))))
	i--
	dAtA[i] = 0x15
	i -= len(m.OrderID)
	copy(dAtA[i:], m.OrderID)
	i = encodeVarintGetDelayStatistics(dAtA, i, uint64(len(m.OrderID)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *S2C) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PlaceOrderStatisticsList) > 0 {
		for iNdEx := len(m.PlaceOrderStatisticsList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PlaceOrderStatisticsList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGetDelayStatistics(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ReqReplyStatisticsList) > 0 {
		for iNdEx := len(m.ReqReplyStatisticsList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReqReplyStatisticsList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGetDelayStatistics(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.QotPushStatisticsList) > 0 {
		for iNdEx := len(m.QotPushStatisticsList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.QotPushStatisticsList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGetDelayStatistics(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.C2S == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("c2s")
	} else {
		{
			size, err := m.C2S.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGetDelayStatistics(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.S2C != nil {
		{
			size, err := m.S2C.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGetDelayStatistics(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	i = encodeVarintGetDelayStatistics(dAtA, i, uint64(m.ErrCode))
	i--
	dAtA[i] = 0x18
	i -= len(m.RetMsg)
	copy(dAtA[i:], m.RetMsg)
	i = encodeVarintGetDelayStatistics(dAtA, i, uint64(len(m.RetMsg)))
	i--
	dAtA[i] = 0x12
	if m.RetType == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("retType")
	} else {
		i = encodeVarintGetDelayStatistics(dAtA, i, uint64(*m.RetType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGetDelayStatistics(dAtA []byte, offset int, v uint64) int {
	offset -= sovGetDelayStatistics(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *C2S) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TypeList) > 0 {
		for _, e := range m.TypeList {
			n += 1 + sovGetDelayStatistics(uint64(e))
		}
	}
	n += 1 + sovGetDelayStatistics(uint64(m.QotPushStage))
	if len(m.SegmentList) > 0 {
		for _, e := range m.SegmentList {
			n += 1 + sovGetDelayStatistics(uint64(e))
		}
	}
	return n
}

func (m *DelayStatisticsItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGetDelayStatistics(uint64(m.Begin))
	n += 1 + sovGetDelayStatistics(uint64(m.End))
	n += 1 + sovGetDelayStatistics(uint64(m.Count))
	n += 5
	n += 5
	return n
}

func (m *DelayStatistics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGetDelayStatistics(uint64(m.QotPushType))
	if len(m.ItemList) > 0 {
		for _, e := range m.ItemList {
			l = e.Size()
			n += 1 + l + sovGetDelayStatistics(uint64(l))
		}
	}
	n += 5
	n += 1 + sovGetDelayStatistics(uint64(m.Count))
	return n
}

func (m *ReqReplyStatisticsItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGetDelayStatistics(uint64(m.ProtoID))
	n += 1 + sovGetDelayStatistics(uint64(m.Count))
	n += 5
	n += 5
	n += 5
	n += 2
	return n
}

func (m *PlaceOrderStatisticsItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrderID)
	n += 1 + l + sovGetDelayStatistics(uint64(l))
	n += 5
	n += 5
	n += 5
	n += 5
	return n
}

func (m *S2C) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.QotPushStatisticsList) > 0 {
		for _, e := range m.QotPushStatisticsList {
			l = e.Size()
			n += 1 + l + sovGetDelayStatistics(uint64(l))
		}
	}
	if len(m.ReqReplyStatisticsList) > 0 {
		for _, e := range m.ReqReplyStatisticsList {
			l = e.Size()
			n += 1 + l + sovGetDelayStatistics(uint64(l))
		}
	}
	if len(m.PlaceOrderStatisticsList) > 0 {
		for _, e := range m.PlaceOrderStatisticsList {
			l = e.Size()
			n += 1 + l + sovGetDelayStatistics(uint64(l))
		}
	}
	return n
}

func (m *Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.C2S != nil {
		l = m.C2S.Size()
		n += 1 + l + sovGetDelayStatistics(uint64(l))
	}
	return n
}

func (m *Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetType != nil {
		n += 1 + sovGetDelayStatistics(uint64(*m.RetType))
	}
	l = len(m.RetMsg)
	n += 1 + l + sovGetDelayStatistics(uint64(l))
	n += 1 + sovGetDelayStatistics(uint64(m.ErrCode))
	if m.S2C != nil {
		l = m.S2C.Size()
		n += 1 + l + sovGetDelayStatistics(uint64(l))
	}
	return n
}

func sovGetDelayStatistics(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGetDelayStatistics(x uint64) (n int) {
	return sovGetDelayStatistics(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *C2S) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGetDelayStatistics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGetDelayStatistics
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TypeList = append(m.TypeList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGetDelayStatistics
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGetDelayStatistics
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthGetDelayStatistics
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TypeList) == 0 {
					m.TypeList = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGetDelayStatistics
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TypeList = append(m.TypeList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeList", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QotPushStage", wireType)
			}
			m.QotPushStage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetDelayStatistics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QotPushStage |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGetDelayStatistics
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SegmentList = append(m.SegmentList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGetDelayStatistics
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGetDelayStatistics
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthGetDelayStatistics
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SegmentList) == 0 {
					m.SegmentList = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGetDelayStatistics
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SegmentList = append(m.SegmentList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentList", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGetDelayStatistics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGetDelayStatistics
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGetDelayStatistics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelayStatisticsItem) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGetDelayStatistics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelayStatisticsItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelayStatisticsItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Begin", wireType)
			}
			m.Begin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetDelayStatistics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Begin |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			m.End = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetDelayStatistics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.End |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetDelayStatistics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proportion", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Proportion = float32(math.Float32frombits(v))
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field CumulativeRatio", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.CumulativeRatio = float32(math.Float32frombits(v))
			hasFields[0] |= uint64(0x00000010)
		default:
			iNdEx = preIndex
			skippy, err := skipGetDelayStatistics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGetDelayStatistics
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGetDelayStatistics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("begin")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("end")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("count")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("proportion")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("cumulativeRatio")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelayStatistics) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGetDelayStatistics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelayStatistics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelayStatistics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QotPushType", wireType)
			}
			m.QotPushType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetDelayStatistics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QotPushType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetDelayStatistics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGetDelayStatistics
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGetDelayStatistics
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemList = append(m.ItemList, &DelayStatisticsItem{})
			if err := m.ItemList[len(m.ItemList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelayAvg", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.DelayAvg = float32(math.Float32frombits(v))
			hasFields[0] |= uint64(0x00000002)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetDelayStatistics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipGetDelayStatistics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGetDelayStatistics
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGetDelayStatistics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("qotPushType")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("delayAvg")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("count")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqReplyStatisticsItem) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGetDelayStatistics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqReplyStatisticsItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqReplyStatisticsItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtoID", wireType)
			}
			m.ProtoID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetDelayStatistics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProtoID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetDelayStatistics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCostAvg", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.TotalCostAvg = float32(math.Float32frombits(v))
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenDCostAvg", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.OpenDCostAvg = float32(math.Float32frombits(v))
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetDelayAvg", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.NetDelayAvg = float32(math.Float32frombits(v))
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLocalReply", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetDelayStatistics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLocalReply = bool(v != 0)
			hasFields[0] |= uint64(0x00000020)
		default:
			iNdEx = preIndex
			skippy, err := skipGetDelayStatistics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGetDelayStatistics
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGetDelayStatistics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("protoID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("count")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("totalCostAvg")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("openDCostAvg")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("netDelayAvg")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("isLocalReply")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlaceOrderStatisticsItem) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGetDelayStatistics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlaceOrderStatisticsItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlaceOrderStatisticsItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetDelayStatistics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGetDelayStatistics
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGetDelayStatistics
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCost", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.TotalCost = float32(math.Float32frombits(v))
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenDCost", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.OpenDCost = float32(math.Float32frombits(v))
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetDelay", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.NetDelay = float32(math.Float32frombits(v))
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateCost", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.UpdateCost = float32(math.Float32frombits(v))
			hasFields[0] |= uint64(0x00000010)
		default:
			iNdEx = preIndex
			skippy, err := skipGetDelayStatistics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGetDelayStatistics
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGetDelayStatistics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("orderID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("totalCost")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("openDCost")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("netDelay")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("updateCost")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGetDelayStatistics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QotPushStatisticsList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetDelayStatistics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGetDelayStatistics
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGetDelayStatistics
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QotPushStatisticsList = append(m.QotPushStatisticsList, &DelayStatistics{})
			if err := m.QotPushStatisticsList[len(m.QotPushStatisticsList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqReplyStatisticsList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetDelayStatistics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGetDelayStatistics
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGetDelayStatistics
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReqReplyStatisticsList = append(m.ReqReplyStatisticsList, &ReqReplyStatisticsItem{})
			if err := m.ReqReplyStatisticsList[len(m.ReqReplyStatisticsList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlaceOrderStatisticsList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetDelayStatistics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGetDelayStatistics
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGetDelayStatistics
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlaceOrderStatisticsList = append(m.PlaceOrderStatisticsList, &PlaceOrderStatisticsItem{})
			if err := m.PlaceOrderStatisticsList[len(m.PlaceOrderStatisticsList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGetDelayStatistics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGetDelayStatistics
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGetDelayStatistics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Request) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGetDelayStatistics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field C2S", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetDelayStatistics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGetDelayStatistics
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGetDelayStatistics
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.C2S == nil {
				m.C2S = &C2S{}
			}
			if err := m.C2S.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipGetDelayStatistics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGetDelayStatistics
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGetDelayStatistics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("c2s")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGetDelayStatistics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetDelayStatistics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetType = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetDelayStatistics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGetDelayStatistics
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGetDelayStatistics
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RetMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			m.ErrCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetDelayStatistics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S2C", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetDelayStatistics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGetDelayStatistics
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGetDelayStatistics
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.S2C == nil {
				m.S2C = &S2C{}
			}
			if err := m.S2C.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGetDelayStatistics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGetDelayStatistics
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGetDelayStatistics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("retType")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGetDelayStatistics(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGetDelayStatistics
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGetDelayStatistics
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGetDelayStatistics
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGetDelayStatistics
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthGetDelayStatistics
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGetDelayStatistics
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGetDelayStatistics(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthGetDelayStatistics
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGetDelayStatistics = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGetDelayStatistics   = fmt.Errorf("proto: integer overflow")
)
