// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: Qot_GetWarrant.proto

package qotgetwarrant

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/futuopen/ftapi4go/pb/common"
	qotcommon "github.com/futuopen/ftapi4go/pb/qotcommon"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type C2S struct {
	Begin     int32 `protobuf:"varint,1,req,name=begin" json:"begin"`
	Num       int32 `protobuf:"varint,2,req,name=num" json:"num"`
	SortField int32 `protobuf:"varint,3,req,name=sortField" json:"sortField"`
	Ascend    bool  `protobuf:"varint,4,req,name=ascend" json:"ascend"`
	//以下为筛选条件，可选字段，不填表示不过滤
	Owner                 *qotcommon.Security `protobuf:"bytes,5,opt,name=owner" json:"owner,omitempty"`
	TypeList              []int32             `protobuf:"varint,6,rep,name=typeList" json:"typeList,omitempty"`
	IssuerList            []int32             `protobuf:"varint,7,rep,name=issuerList" json:"issuerList,omitempty"`
	MaturityTimeMin       string              `protobuf:"bytes,8,opt,name=maturityTimeMin" json:"maturityTimeMin"`
	MaturityTimeMax       string              `protobuf:"bytes,9,opt,name=maturityTimeMax" json:"maturityTimeMax"`
	IpoPeriod             int32               `protobuf:"varint,10,opt,name=ipoPeriod" json:"ipoPeriod"`
	PriceType             int32               `protobuf:"varint,11,opt,name=priceType" json:"priceType"`
	Status                int32               `protobuf:"varint,12,opt,name=status" json:"status"`
	CurPriceMin           float64             `protobuf:"fixed64,13,opt,name=curPriceMin" json:"curPriceMin"`
	CurPriceMax           float64             `protobuf:"fixed64,14,opt,name=curPriceMax" json:"curPriceMax"`
	StrikePriceMin        float64             `protobuf:"fixed64,15,opt,name=strikePriceMin" json:"strikePriceMin"`
	StrikePriceMax        float64             `protobuf:"fixed64,16,opt,name=strikePriceMax" json:"strikePriceMax"`
	StreetMin             float64             `protobuf:"fixed64,17,opt,name=streetMin" json:"streetMin"`
	StreetMax             float64             `protobuf:"fixed64,18,opt,name=streetMax" json:"streetMax"`
	ConversionMin         float64             `protobuf:"fixed64,19,opt,name=conversionMin" json:"conversionMin"`
	ConversionMax         float64             `protobuf:"fixed64,20,opt,name=conversionMax" json:"conversionMax"`
	VolMin                uint64              `protobuf:"varint,21,opt,name=volMin" json:"volMin"`
	VolMax                uint64              `protobuf:"varint,22,opt,name=volMax" json:"volMax"`
	PremiumMin            float64             `protobuf:"fixed64,23,opt,name=premiumMin" json:"premiumMin"`
	PremiumMax            float64             `protobuf:"fixed64,24,opt,name=premiumMax" json:"premiumMax"`
	LeverageRatioMin      float64             `protobuf:"fixed64,25,opt,name=leverageRatioMin" json:"leverageRatioMin"`
	LeverageRatioMax      float64             `protobuf:"fixed64,26,opt,name=leverageRatioMax" json:"leverageRatioMax"`
	DeltaMin              float64             `protobuf:"fixed64,27,opt,name=deltaMin" json:"deltaMin"`
	DeltaMax              float64             `protobuf:"fixed64,28,opt,name=deltaMax" json:"deltaMax"`
	ImpliedMin            float64             `protobuf:"fixed64,29,opt,name=impliedMin" json:"impliedMin"`
	ImpliedMax            float64             `protobuf:"fixed64,30,opt,name=impliedMax" json:"impliedMax"`
	RecoveryPriceMin      float64             `protobuf:"fixed64,31,opt,name=recoveryPriceMin" json:"recoveryPriceMin"`
	RecoveryPriceMax      float64             `protobuf:"fixed64,32,opt,name=recoveryPriceMax" json:"recoveryPriceMax"`
	PriceRecoveryRatioMin float64             `protobuf:"fixed64,33,opt,name=priceRecoveryRatioMin" json:"priceRecoveryRatioMin"`
	PriceRecoveryRatioMax float64             `protobuf:"fixed64,34,opt,name=priceRecoveryRatioMax" json:"priceRecoveryRatioMax"`
}

func (m *C2S) Reset()         { *m = C2S{} }
func (m *C2S) String() string { return proto.CompactTextString(m) }
func (*C2S) ProtoMessage()    {}
func (*C2S) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a92bbe5a0ce691f, []int{0}
}
func (m *C2S) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S.Merge(m, src)
}
func (m *C2S) XXX_Size() int {
	return m.Size()
}
func (m *C2S) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S.DiscardUnknown(m)
}

var xxx_messageInfo_C2S proto.InternalMessageInfo

func (m *C2S) GetBegin() int32 {
	if m != nil {
		return m.Begin
	}
	return 0
}

func (m *C2S) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *C2S) GetSortField() int32 {
	if m != nil {
		return m.SortField
	}
	return 0
}

func (m *C2S) GetAscend() bool {
	if m != nil {
		return m.Ascend
	}
	return false
}

func (m *C2S) GetOwner() *qotcommon.Security {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *C2S) GetTypeList() []int32 {
	if m != nil {
		return m.TypeList
	}
	return nil
}

func (m *C2S) GetIssuerList() []int32 {
	if m != nil {
		return m.IssuerList
	}
	return nil
}

func (m *C2S) GetMaturityTimeMin() string {
	if m != nil {
		return m.MaturityTimeMin
	}
	return ""
}

func (m *C2S) GetMaturityTimeMax() string {
	if m != nil {
		return m.MaturityTimeMax
	}
	return ""
}

func (m *C2S) GetIpoPeriod() int32 {
	if m != nil {
		return m.IpoPeriod
	}
	return 0
}

func (m *C2S) GetPriceType() int32 {
	if m != nil {
		return m.PriceType
	}
	return 0
}

func (m *C2S) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *C2S) GetCurPriceMin() float64 {
	if m != nil {
		return m.CurPriceMin
	}
	return 0
}

func (m *C2S) GetCurPriceMax() float64 {
	if m != nil {
		return m.CurPriceMax
	}
	return 0
}

func (m *C2S) GetStrikePriceMin() float64 {
	if m != nil {
		return m.StrikePriceMin
	}
	return 0
}

func (m *C2S) GetStrikePriceMax() float64 {
	if m != nil {
		return m.StrikePriceMax
	}
	return 0
}

func (m *C2S) GetStreetMin() float64 {
	if m != nil {
		return m.StreetMin
	}
	return 0
}

func (m *C2S) GetStreetMax() float64 {
	if m != nil {
		return m.StreetMax
	}
	return 0
}

func (m *C2S) GetConversionMin() float64 {
	if m != nil {
		return m.ConversionMin
	}
	return 0
}

func (m *C2S) GetConversionMax() float64 {
	if m != nil {
		return m.ConversionMax
	}
	return 0
}

func (m *C2S) GetVolMin() uint64 {
	if m != nil {
		return m.VolMin
	}
	return 0
}

func (m *C2S) GetVolMax() uint64 {
	if m != nil {
		return m.VolMax
	}
	return 0
}

func (m *C2S) GetPremiumMin() float64 {
	if m != nil {
		return m.PremiumMin
	}
	return 0
}

func (m *C2S) GetPremiumMax() float64 {
	if m != nil {
		return m.PremiumMax
	}
	return 0
}

func (m *C2S) GetLeverageRatioMin() float64 {
	if m != nil {
		return m.LeverageRatioMin
	}
	return 0
}

func (m *C2S) GetLeverageRatioMax() float64 {
	if m != nil {
		return m.LeverageRatioMax
	}
	return 0
}

func (m *C2S) GetDeltaMin() float64 {
	if m != nil {
		return m.DeltaMin
	}
	return 0
}

func (m *C2S) GetDeltaMax() float64 {
	if m != nil {
		return m.DeltaMax
	}
	return 0
}

func (m *C2S) GetImpliedMin() float64 {
	if m != nil {
		return m.ImpliedMin
	}
	return 0
}

func (m *C2S) GetImpliedMax() float64 {
	if m != nil {
		return m.ImpliedMax
	}
	return 0
}

func (m *C2S) GetRecoveryPriceMin() float64 {
	if m != nil {
		return m.RecoveryPriceMin
	}
	return 0
}

func (m *C2S) GetRecoveryPriceMax() float64 {
	if m != nil {
		return m.RecoveryPriceMax
	}
	return 0
}

func (m *C2S) GetPriceRecoveryRatioMin() float64 {
	if m != nil {
		return m.PriceRecoveryRatioMin
	}
	return 0
}

func (m *C2S) GetPriceRecoveryRatioMax() float64 {
	if m != nil {
		return m.PriceRecoveryRatioMax
	}
	return 0
}

type WarrantData struct {
	//静态数据项
	Stock              *qotcommon.Security `protobuf:"bytes,1,req,name=stock" json:"stock,omitempty"`
	Owner              *qotcommon.Security `protobuf:"bytes,2,req,name=owner" json:"owner,omitempty"`
	Type               int32               `protobuf:"varint,3,req,name=type" json:"type"`
	Issuer             int32               `protobuf:"varint,4,req,name=issuer" json:"issuer"`
	MaturityTime       string              `protobuf:"bytes,5,req,name=maturityTime" json:"maturityTime"`
	MaturityTimestamp  float64             `protobuf:"fixed64,6,opt,name=maturityTimestamp" json:"maturityTimestamp"`
	ListTime           string              `protobuf:"bytes,7,req,name=listTime" json:"listTime"`
	ListTimestamp      float64             `protobuf:"fixed64,8,opt,name=listTimestamp" json:"listTimestamp"`
	LastTradeTime      string              `protobuf:"bytes,9,req,name=lastTradeTime" json:"lastTradeTime"`
	LastTradeTimestamp float64             `protobuf:"fixed64,10,opt,name=lastTradeTimestamp" json:"lastTradeTimestamp"`
	RecoveryPrice      float64             `protobuf:"fixed64,11,opt,name=recoveryPrice" json:"recoveryPrice"`
	ConversionRatio    float64             `protobuf:"fixed64,12,req,name=conversionRatio" json:"conversionRatio"`
	LotSize            int32               `protobuf:"varint,13,req,name=lotSize" json:"lotSize"`
	StrikePrice        float64             `protobuf:"fixed64,14,req,name=strikePrice" json:"strikePrice"`
	LastClosePrice     float64             `protobuf:"fixed64,15,req,name=lastClosePrice" json:"lastClosePrice"`
	Name               string              `protobuf:"bytes,16,req,name=name" json:"name"`
	//动态数据项
	CurPrice           float64 `protobuf:"fixed64,17,req,name=curPrice" json:"curPrice"`
	PriceChangeVal     float64 `protobuf:"fixed64,18,req,name=priceChangeVal" json:"priceChangeVal"`
	ChangeRate         float64 `protobuf:"fixed64,19,req,name=changeRate" json:"changeRate"`
	Status             int32   `protobuf:"varint,20,req,name=status" json:"status"`
	BidPrice           float64 `protobuf:"fixed64,21,req,name=bidPrice" json:"bidPrice"`
	AskPrice           float64 `protobuf:"fixed64,22,req,name=askPrice" json:"askPrice"`
	BidVol             int64   `protobuf:"varint,23,req,name=bidVol" json:"bidVol"`
	AskVol             int64   `protobuf:"varint,24,req,name=askVol" json:"askVol"`
	Volume             int64   `protobuf:"varint,25,req,name=volume" json:"volume"`
	Turnover           float64 `protobuf:"fixed64,26,req,name=turnover" json:"turnover"`
	Score              float64 `protobuf:"fixed64,27,req,name=score" json:"score"`
	Premium            float64 `protobuf:"fixed64,28,req,name=premium" json:"premium"`
	BreakEvenPoint     float64 `protobuf:"fixed64,29,req,name=breakEvenPoint" json:"breakEvenPoint"`
	Leverage           float64 `protobuf:"fixed64,30,req,name=leverage" json:"leverage"`
	Ipop               float64 `protobuf:"fixed64,31,req,name=ipop" json:"ipop"`
	PriceRecoveryRatio float64 `protobuf:"fixed64,32,opt,name=priceRecoveryRatio" json:"priceRecoveryRatio"`
	ConversionPrice    float64 `protobuf:"fixed64,33,req,name=conversionPrice" json:"conversionPrice"`
	StreetRate         float64 `protobuf:"fixed64,34,req,name=streetRate" json:"streetRate"`
	StreetVol          int64   `protobuf:"varint,35,req,name=streetVol" json:"streetVol"`
	Amplitude          float64 `protobuf:"fixed64,36,req,name=amplitude" json:"amplitude"`
	IssueSize          int64   `protobuf:"varint,37,req,name=issueSize" json:"issueSize"`
	HighPrice          float64 `protobuf:"fixed64,39,req,name=highPrice" json:"highPrice"`
	LowPrice           float64 `protobuf:"fixed64,40,req,name=lowPrice" json:"lowPrice"`
	ImpliedVolatility  float64 `protobuf:"fixed64,41,opt,name=impliedVolatility" json:"impliedVolatility"`
	Delta              float64 `protobuf:"fixed64,42,opt,name=delta" json:"delta"`
	EffectiveLeverage  float64 `protobuf:"fixed64,43,req,name=effectiveLeverage" json:"effectiveLeverage"`
	UpperStrikePrice   float64 `protobuf:"fixed64,44,opt,name=upperStrikePrice" json:"upperStrikePrice"`
	LowerStrikePrice   float64 `protobuf:"fixed64,45,opt,name=lowerStrikePrice" json:"lowerStrikePrice"`
	InLinePriceStatus  int32   `protobuf:"varint,46,opt,name=inLinePriceStatus" json:"inLinePriceStatus"`
}

func (m *WarrantData) Reset()         { *m = WarrantData{} }
func (m *WarrantData) String() string { return proto.CompactTextString(m) }
func (*WarrantData) ProtoMessage()    {}
func (*WarrantData) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a92bbe5a0ce691f, []int{1}
}
func (m *WarrantData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WarrantData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WarrantData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WarrantData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WarrantData.Merge(m, src)
}
func (m *WarrantData) XXX_Size() int {
	return m.Size()
}
func (m *WarrantData) XXX_DiscardUnknown() {
	xxx_messageInfo_WarrantData.DiscardUnknown(m)
}

var xxx_messageInfo_WarrantData proto.InternalMessageInfo

func (m *WarrantData) GetStock() *qotcommon.Security {
	if m != nil {
		return m.Stock
	}
	return nil
}

func (m *WarrantData) GetOwner() *qotcommon.Security {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *WarrantData) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *WarrantData) GetIssuer() int32 {
	if m != nil {
		return m.Issuer
	}
	return 0
}

func (m *WarrantData) GetMaturityTime() string {
	if m != nil {
		return m.MaturityTime
	}
	return ""
}

func (m *WarrantData) GetMaturityTimestamp() float64 {
	if m != nil {
		return m.MaturityTimestamp
	}
	return 0
}

func (m *WarrantData) GetListTime() string {
	if m != nil {
		return m.ListTime
	}
	return ""
}

func (m *WarrantData) GetListTimestamp() float64 {
	if m != nil {
		return m.ListTimestamp
	}
	return 0
}

func (m *WarrantData) GetLastTradeTime() string {
	if m != nil {
		return m.LastTradeTime
	}
	return ""
}

func (m *WarrantData) GetLastTradeTimestamp() float64 {
	if m != nil {
		return m.LastTradeTimestamp
	}
	return 0
}

func (m *WarrantData) GetRecoveryPrice() float64 {
	if m != nil {
		return m.RecoveryPrice
	}
	return 0
}

func (m *WarrantData) GetConversionRatio() float64 {
	if m != nil {
		return m.ConversionRatio
	}
	return 0
}

func (m *WarrantData) GetLotSize() int32 {
	if m != nil {
		return m.LotSize
	}
	return 0
}

func (m *WarrantData) GetStrikePrice() float64 {
	if m != nil {
		return m.StrikePrice
	}
	return 0
}

func (m *WarrantData) GetLastClosePrice() float64 {
	if m != nil {
		return m.LastClosePrice
	}
	return 0
}

func (m *WarrantData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *WarrantData) GetCurPrice() float64 {
	if m != nil {
		return m.CurPrice
	}
	return 0
}

func (m *WarrantData) GetPriceChangeVal() float64 {
	if m != nil {
		return m.PriceChangeVal
	}
	return 0
}

func (m *WarrantData) GetChangeRate() float64 {
	if m != nil {
		return m.ChangeRate
	}
	return 0
}

func (m *WarrantData) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *WarrantData) GetBidPrice() float64 {
	if m != nil {
		return m.BidPrice
	}
	return 0
}

func (m *WarrantData) GetAskPrice() float64 {
	if m != nil {
		return m.AskPrice
	}
	return 0
}

func (m *WarrantData) GetBidVol() int64 {
	if m != nil {
		return m.BidVol
	}
	return 0
}

func (m *WarrantData) GetAskVol() int64 {
	if m != nil {
		return m.AskVol
	}
	return 0
}

func (m *WarrantData) GetVolume() int64 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func (m *WarrantData) GetTurnover() float64 {
	if m != nil {
		return m.Turnover
	}
	return 0
}

func (m *WarrantData) GetScore() float64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *WarrantData) GetPremium() float64 {
	if m != nil {
		return m.Premium
	}
	return 0
}

func (m *WarrantData) GetBreakEvenPoint() float64 {
	if m != nil {
		return m.BreakEvenPoint
	}
	return 0
}

func (m *WarrantData) GetLeverage() float64 {
	if m != nil {
		return m.Leverage
	}
	return 0
}

func (m *WarrantData) GetIpop() float64 {
	if m != nil {
		return m.Ipop
	}
	return 0
}

func (m *WarrantData) GetPriceRecoveryRatio() float64 {
	if m != nil {
		return m.PriceRecoveryRatio
	}
	return 0
}

func (m *WarrantData) GetConversionPrice() float64 {
	if m != nil {
		return m.ConversionPrice
	}
	return 0
}

func (m *WarrantData) GetStreetRate() float64 {
	if m != nil {
		return m.StreetRate
	}
	return 0
}

func (m *WarrantData) GetStreetVol() int64 {
	if m != nil {
		return m.StreetVol
	}
	return 0
}

func (m *WarrantData) GetAmplitude() float64 {
	if m != nil {
		return m.Amplitude
	}
	return 0
}

func (m *WarrantData) GetIssueSize() int64 {
	if m != nil {
		return m.IssueSize
	}
	return 0
}

func (m *WarrantData) GetHighPrice() float64 {
	if m != nil {
		return m.HighPrice
	}
	return 0
}

func (m *WarrantData) GetLowPrice() float64 {
	if m != nil {
		return m.LowPrice
	}
	return 0
}

func (m *WarrantData) GetImpliedVolatility() float64 {
	if m != nil {
		return m.ImpliedVolatility
	}
	return 0
}

func (m *WarrantData) GetDelta() float64 {
	if m != nil {
		return m.Delta
	}
	return 0
}

func (m *WarrantData) GetEffectiveLeverage() float64 {
	if m != nil {
		return m.EffectiveLeverage
	}
	return 0
}

func (m *WarrantData) GetUpperStrikePrice() float64 {
	if m != nil {
		return m.UpperStrikePrice
	}
	return 0
}

func (m *WarrantData) GetLowerStrikePrice() float64 {
	if m != nil {
		return m.LowerStrikePrice
	}
	return 0
}

func (m *WarrantData) GetInLinePriceStatus() int32 {
	if m != nil {
		return m.InLinePriceStatus
	}
	return 0
}

type S2C struct {
	LastPage        bool           `protobuf:"varint,1,req,name=lastPage" json:"lastPage"`
	AllCount        int32          `protobuf:"varint,2,req,name=allCount" json:"allCount"`
	WarrantDataList []*WarrantData `protobuf:"bytes,3,rep,name=warrantDataList" json:"warrantDataList,omitempty"`
}

func (m *S2C) Reset()         { *m = S2C{} }
func (m *S2C) String() string { return proto.CompactTextString(m) }
func (*S2C) ProtoMessage()    {}
func (*S2C) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a92bbe5a0ce691f, []int{2}
}
func (m *S2C) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C.Merge(m, src)
}
func (m *S2C) XXX_Size() int {
	return m.Size()
}
func (m *S2C) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C.DiscardUnknown(m)
}

var xxx_messageInfo_S2C proto.InternalMessageInfo

func (m *S2C) GetLastPage() bool {
	if m != nil {
		return m.LastPage
	}
	return false
}

func (m *S2C) GetAllCount() int32 {
	if m != nil {
		return m.AllCount
	}
	return 0
}

func (m *S2C) GetWarrantDataList() []*WarrantData {
	if m != nil {
		return m.WarrantDataList
	}
	return nil
}

type Request struct {
	C2S *C2S `protobuf:"bytes,1,req,name=c2s" json:"c2s,omitempty"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a92bbe5a0ce691f, []int{3}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return m.Size()
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetC2S() *C2S {
	if m != nil {
		return m.C2S
	}
	return nil
}

type Response struct {
	RetType *int32 `protobuf:"varint,1,req,name=retType,def=-400" json:"retType,omitempty"`
	RetMsg  string `protobuf:"bytes,2,opt,name=retMsg" json:"retMsg"`
	ErrCode int32  `protobuf:"varint,3,opt,name=errCode" json:"errCode"`
	S2C     *S2C   `protobuf:"bytes,4,opt,name=s2c" json:"s2c,omitempty"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a92bbe5a0ce691f, []int{4}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return m.Size()
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

const Default_Response_RetType int32 = -400

func (m *Response) GetRetType() int32 {
	if m != nil && m.RetType != nil {
		return *m.RetType
	}
	return Default_Response_RetType
}

func (m *Response) GetRetMsg() string {
	if m != nil {
		return m.RetMsg
	}
	return ""
}

func (m *Response) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *Response) GetS2C() *S2C {
	if m != nil {
		return m.S2C
	}
	return nil
}

func init() {
	proto.RegisterType((*C2S)(nil), "Qot_GetWarrant.C2S")
	proto.RegisterType((*WarrantData)(nil), "Qot_GetWarrant.WarrantData")
	proto.RegisterType((*S2C)(nil), "Qot_GetWarrant.S2C")
	proto.RegisterType((*Request)(nil), "Qot_GetWarrant.Request")
	proto.RegisterType((*Response)(nil), "Qot_GetWarrant.Response")
}

func init() { proto.RegisterFile("Qot_GetWarrant.proto", fileDescriptor_3a92bbe5a0ce691f) }

var fileDescriptor_3a92bbe5a0ce691f = []byte{
	// 1317 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x57, 0xcd, 0x6e, 0x1b, 0x37,
	0x17, 0xb5, 0x24, 0x3b, 0x96, 0xe9, 0xdf, 0x8c, 0x9d, 0x84, 0x71, 0x12, 0x65, 0xa2, 0x2f, 0xf9,
	0xaa, 0xa6, 0x89, 0x6c, 0x08, 0x59, 0x65, 0x19, 0x35, 0xed, 0x26, 0x01, 0x5c, 0x29, 0x48, 0x81,
	0xa2, 0x40, 0x41, 0x8d, 0x68, 0x99, 0xf0, 0xcc, 0x70, 0xc2, 0xe1, 0xd8, 0xe3, 0xbe, 0x44, 0xf3,
	0x58, 0xd9, 0x14, 0xc8, 0xb2, 0xab, 0xa2, 0x88, 0x97, 0x7d, 0x89, 0xe2, 0x92, 0xf3, 0x73, 0x67,
	0x24, 0xb5, 0x3b, 0xe9, 0x9c, 0xc3, 0x4b, 0xf2, 0xf2, 0xf2, 0x5c, 0x0e, 0x39, 0xf8, 0x41, 0xea,
	0x5f, 0xbe, 0xe7, 0xfa, 0x47, 0xa6, 0x14, 0x0b, 0x75, 0x3f, 0x52, 0x52, 0x4b, 0x67, 0xa7, 0x8a,
	0x1e, 0x6e, 0x0d, 0x65, 0x10, 0xc8, 0xd0, 0xb2, 0x87, 0x7b, 0xc0, 0x62, 0xa4, 0xfb, 0x3b, 0x21,
	0xad, 0xe1, 0x60, 0xec, 0x1c, 0x92, 0xb5, 0x09, 0x9f, 0x89, 0x90, 0x36, 0xdc, 0x66, 0x6f, 0xed,
	0xd5, 0xea, 0xa7, 0x3f, 0x1f, 0xae, 0x8c, 0x2c, 0xe4, 0xdc, 0x26, 0xad, 0x30, 0x09, 0x68, 0x13,
	0x31, 0x00, 0x38, 0x5d, 0xb2, 0x11, 0x4b, 0xa5, 0xbf, 0x13, 0xdc, 0x9f, 0xd2, 0x16, 0x62, 0x4b,
	0xd8, 0xb9, 0x4f, 0x6e, 0xb0, 0xd8, 0xe3, 0xe1, 0x94, 0xae, 0xba, 0xcd, 0x5e, 0x3b, 0x13, 0x64,
	0x98, 0xf3, 0x94, 0xac, 0xc9, 0xcb, 0x90, 0x2b, 0xba, 0xe6, 0x36, 0x7a, 0x9b, 0x83, 0x83, 0x3e,
	0x5a, 0xdf, 0x98, 0x7b, 0x89, 0x12, 0xfa, 0x6a, 0x64, 0x25, 0xce, 0x21, 0x69, 0xeb, 0xab, 0x88,
	0xbf, 0x11, 0xb1, 0xa6, 0x37, 0xdc, 0x56, 0x6f, 0x6d, 0x54, 0xfc, 0x77, 0x3a, 0x84, 0x88, 0x38,
	0x4e, 0xb8, 0x32, 0xec, 0xba, 0x61, 0x11, 0xe2, 0xf4, 0xc9, 0x6e, 0xc0, 0xb4, 0x09, 0xf7, 0x4e,
	0x04, 0xfc, 0xad, 0x08, 0x69, 0xdb, 0x6d, 0xf4, 0x36, 0xb2, 0xe5, 0xd4, 0xc9, 0x39, 0x3d, 0x4b,
	0xe9, 0xc6, 0x52, 0x3d, 0x4b, 0x21, 0x13, 0x22, 0x92, 0x27, 0x5c, 0x09, 0x39, 0xa5, 0xc4, 0x6d,
	0x94, 0x99, 0x28, 0x60, 0xd0, 0x44, 0x4a, 0x78, 0xfc, 0xdd, 0x55, 0xc4, 0xe9, 0x26, 0xd6, 0x14,
	0x30, 0x64, 0x2b, 0xd6, 0x4c, 0x27, 0x31, 0xdd, 0x42, 0x82, 0x0c, 0x73, 0xfe, 0x4f, 0x36, 0xbd,
	0x44, 0x9d, 0x80, 0x1a, 0x76, 0xb0, 0xed, 0x36, 0x7a, 0x8d, 0x4c, 0x82, 0x89, 0x8a, 0x8e, 0xa5,
	0x74, 0x67, 0xa1, 0x8e, 0xa5, 0xce, 0x33, 0xb2, 0x13, 0x6b, 0x25, 0xce, 0x79, 0x11, 0x72, 0x17,
	0x49, 0x6b, 0x5c, 0x5d, 0xcd, 0x52, 0xba, 0xb7, 0x4c, 0x6d, 0x33, 0x12, 0x6b, 0xc5, 0xb9, 0x86,
	0xb0, 0x37, 0x91, 0xb0, 0x84, 0x91, 0x86, 0xa5, 0xd4, 0x59, 0xa0, 0x61, 0xa9, 0xf3, 0x94, 0x6c,
	0x7b, 0x32, 0xbc, 0xe0, 0x2a, 0x16, 0x32, 0x84, 0x58, 0xfb, 0x48, 0x57, 0xa5, 0x6a, 0x5a, 0x96,
	0xd2, 0x83, 0x25, 0x5a, 0x96, 0x42, 0xa6, 0x2f, 0xa4, 0x0f, 0x01, 0x6f, 0xb9, 0x8d, 0xde, 0x6a,
	0x9e, 0x69, 0x8b, 0xe5, 0x2c, 0x4b, 0xe9, 0xed, 0x3a, 0xcb, 0x52, 0xe7, 0x31, 0x21, 0x91, 0xe2,
	0x81, 0x48, 0x02, 0x18, 0x7f, 0x07, 0x4d, 0x82, 0x70, 0xac, 0x62, 0x29, 0xa5, 0x8b, 0x54, 0x2c,
	0x75, 0x8e, 0xc9, 0x9e, 0xcf, 0x2f, 0xb8, 0x62, 0x33, 0x3e, 0x62, 0x5a, 0x48, 0x88, 0x78, 0x17,
	0x69, 0xe7, 0xd8, 0xf9, 0x11, 0x2c, 0xa5, 0x87, 0xcb, 0x47, 0xb0, 0xd4, 0x71, 0x49, 0x7b, 0xca,
	0x7d, 0xcd, 0x20, 0xf6, 0x3d, 0xa4, 0x2c, 0xd0, 0x52, 0xc1, 0x52, 0x7a, 0x7f, 0x5e, 0x61, 0xf7,
	0x2c, 0x82, 0xc8, 0x17, 0x7c, 0x0a, 0x51, 0x1e, 0xe0, 0xdd, 0x94, 0x38, 0x56, 0xb1, 0x94, 0x76,
	0x16, 0xa9, 0xec, 0x9e, 0x15, 0xf7, 0xe4, 0x05, 0x57, 0x57, 0x45, 0xe5, 0x3d, 0xc4, 0x3b, 0xa8,
	0xb3, 0xf3, 0x23, 0x58, 0x4a, 0xdd, 0xe5, 0x23, 0x58, 0xea, 0xbc, 0x24, 0xb7, 0xcc, 0xb5, 0x1a,
	0x65, 0x44, 0x91, 0xdc, 0x47, 0x68, 0xd8, 0x62, 0xc9, 0x92, 0xb1, 0x2c, 0xa5, 0xdd, 0xff, 0x18,
	0xcb, 0xd2, 0xee, 0xdf, 0xdb, 0x64, 0x33, 0xf3, 0xde, 0x6f, 0x99, 0x66, 0xe0, 0x70, 0xb1, 0x96,
	0xde, 0xb9, 0xf1, 0xd5, 0xa5, 0x0e, 0x67, 0x24, 0xa5, 0x1b, 0x36, 0xff, 0x4d, 0x6b, 0xdd, 0x90,
	0x92, 0x55, 0x70, 0xbf, 0x8a, 0xed, 0x1a, 0x04, 0x6a, 0xd7, 0x3a, 0x9f, 0x71, 0xdc, 0xc2, 0x43,
	0x2c, 0xe6, 0xf4, 0xc8, 0x16, 0x36, 0x2f, 0xba, 0xe6, 0x36, 0x0b, 0x5b, 0xab, 0x30, 0xce, 0x80,
	0xdc, 0xc4, 0xff, 0x63, 0xcd, 0x82, 0x88, 0xde, 0x40, 0x19, 0x98, 0xa7, 0xa1, 0x8e, 0x7c, 0x11,
	0x6b, 0x13, 0x79, 0x1d, 0x45, 0x2e, 0x50, 0xb8, 0xa3, 0xf9, 0x6f, 0x1b, 0xb1, 0x8d, 0xef, 0x68,
	0x85, 0x32, 0x5a, 0x16, 0xeb, 0x77, 0x8a, 0x4d, 0xb9, 0x09, 0xb9, 0x81, 0x42, 0x56, 0x29, 0xe7,
	0x05, 0x71, 0x2a, 0x80, 0x0d, 0x4e, 0x50, 0xf0, 0x05, 0x3c, 0xcc, 0x50, 0xa9, 0x1c, 0xe3, 0xcb,
	0xc5, 0x6a, 0x2a, 0x14, 0xf4, 0x84, 0xd2, 0x42, 0xcc, 0x79, 0xd3, 0x2d, 0xb7, 0x59, 0xa8, 0xeb,
	0xa4, 0xd3, 0x21, 0xeb, 0xbe, 0xd4, 0x63, 0xf1, 0x2b, 0xa7, 0xdb, 0xe8, 0x20, 0x72, 0x10, 0x5c,
	0x1a, 0x79, 0x26, 0xdd, 0x41, 0xb1, 0x30, 0x01, 0xbe, 0x0b, 0x2b, 0x1f, 0xfa, 0x32, 0xce, 0xa4,
	0xbb, 0x48, 0x5a, 0xe3, 0xa0, 0x2e, 0x42, 0x16, 0x70, 0xba, 0x87, 0x52, 0x65, 0x10, 0x38, 0x9b,
	0xdc, 0xfc, 0xe9, 0x4d, 0x14, 0xa1, 0x40, 0x61, 0x26, 0x53, 0xd4, 0xc3, 0x33, 0x16, 0xce, 0xf8,
	0x7b, 0xe6, 0x53, 0x07, 0xcf, 0x54, 0xe5, 0xe0, 0xae, 0x7b, 0xe6, 0xcf, 0x88, 0x69, 0x4e, 0xf7,
	0x91, 0x12, 0xe1, 0xa8, 0xa3, 0x1d, 0xe0, 0x6a, 0xcc, 0x3a, 0x9a, 0x4b, 0xda, 0x13, 0x31, 0xb5,
	0x6b, 0xba, 0x85, 0xd7, 0x94, 0xa3, 0xa0, 0x60, 0xf1, 0xb9, 0x55, 0xdc, 0xc6, 0x8a, 0x1c, 0x85,
	0x19, 0x26, 0x62, 0xfa, 0x5e, 0xfa, 0xf4, 0x8e, 0xdb, 0xec, 0xb5, 0xf2, 0x19, 0x2c, 0x66, 0xdf,
	0x1f, 0xe7, 0xc0, 0x52, 0xcc, 0x5a, 0x2c, 0xf3, 0xf9, 0x24, 0xe0, 0xf4, 0x2e, 0x66, 0x2d, 0x06,
	0x73, 0xeb, 0x44, 0x85, 0x50, 0x03, 0xf4, 0x10, 0xcf, 0x9d, 0xa3, 0xf0, 0x6a, 0x8a, 0x3d, 0xa9,
	0x38, 0xbd, 0x87, 0x68, 0x0b, 0xc1, 0xf9, 0x67, 0x3e, 0x4f, 0xef, 0x23, 0x36, 0x07, 0x21, 0xdb,
	0x13, 0xc5, 0xd9, 0xf9, 0xeb, 0x0b, 0x1e, 0x9e, 0x48, 0x11, 0x6a, 0xfa, 0x00, 0x67, 0xbb, 0xca,
	0x99, 0x9b, 0x95, 0xf9, 0x3a, 0xed, 0xe0, 0xb5, 0xe4, 0x28, 0x9c, 0xbc, 0x88, 0x64, 0x44, 0x1f,
	0x22, 0xd6, 0x20, 0x70, 0x37, 0xe6, 0xcd, 0xaa, 0xe2, 0x9f, 0x0b, 0xf8, 0x6a, 0xbd, 0xdb, 0x03,
	0x78, 0xb4, 0xb8, 0xde, 0xed, 0x39, 0x3c, 0x26, 0xc4, 0xb6, 0x6d, 0x53, 0x0f, 0x5d, 0x5c, 0x0f,
	0x25, 0x5e, 0xf6, 0x7c, 0x38, 0x92, 0xff, 0xa1, 0xa4, 0x97, 0x30, 0x68, 0x18, 0x74, 0x0b, 0x9d,
	0x4c, 0x39, 0x7d, 0x8c, 0x02, 0x95, 0xb0, 0x79, 0x71, 0x81, 0xa3, 0x99, 0xfb, 0xf5, 0x04, 0xc7,
	0x29, 0x60, 0xd0, 0x9c, 0x89, 0xd9, 0x99, 0x5d, 0xfb, 0x57, 0x38, 0x4e, 0x01, 0x9b, 0xbc, 0xca,
	0x4b, 0x2b, 0xe9, 0x55, 0xf2, 0x9a, 0xa1, 0xe0, 0x83, 0x59, 0xef, 0x7a, 0x2f, 0x7d, 0xa6, 0x85,
	0x2f, 0xf4, 0x15, 0xfd, 0x1a, 0xfb, 0xe0, 0x1c, 0x0d, 0x75, 0x61, 0x3a, 0x27, 0x7d, 0x8a, 0x74,
	0x16, 0x82, 0x78, 0xfc, 0xf4, 0x94, 0x7b, 0x5a, 0x5c, 0xf0, 0x37, 0xf9, 0x91, 0x7e, 0x83, 0xa6,
	0x9e, 0xa7, 0xa1, 0xff, 0x25, 0x51, 0xc4, 0xd5, 0x18, 0x19, 0xc6, 0x33, 0xdc, 0xff, 0xea, 0xac,
	0x79, 0x25, 0xc8, 0xcb, 0xea, 0x88, 0xe7, 0x95, 0x57, 0x42, 0x8d, 0x35, 0xfb, 0x0c, 0xdf, 0x88,
	0xd0, 0xfe, 0x1d, 0xdb, 0x4b, 0xdb, 0x47, 0xcf, 0xd0, 0x79, 0xba, 0xfb, 0xb1, 0x41, 0x5a, 0xe3,
	0xc1, 0xd0, 0x64, 0x91, 0xc5, 0xfa, 0x04, 0xb6, 0xd2, 0x40, 0xef, 0xfc, 0x02, 0x35, 0xf7, 0xd8,
	0xf7, 0x87, 0x32, 0x09, 0x75, 0xe5, 0x43, 0xa2, 0x40, 0x9d, 0xd7, 0x64, 0xf7, 0xb2, 0x6c, 0x9c,
	0xe6, 0x21, 0xdf, 0x72, 0x5b, 0xbd, 0xcd, 0xc1, 0xbd, 0x7e, 0xed, 0x4b, 0x07, 0xf5, 0xd7, 0x51,
	0x7d, 0x4c, 0xf7, 0x98, 0xac, 0x8f, 0xf8, 0x87, 0x84, 0xc7, 0xda, 0x79, 0x42, 0x5a, 0xde, 0x20,
	0xce, 0x3a, 0xef, 0x7e, 0x3d, 0xca, 0x70, 0x30, 0x1e, 0x01, 0xdf, 0xfd, 0xad, 0x41, 0xda, 0x23,
	0x1e, 0x47, 0x32, 0x8c, 0xcd, 0xad, 0x55, 0x5c, 0x9b, 0x37, 0xba, 0xf9, 0x12, 0x7a, 0xb9, 0xfa,
	0xfc, 0xc5, 0xf1, 0xf1, 0x28, 0x07, 0xc1, 0x31, 0x14, 0xd7, 0x6f, 0xe3, 0x19, 0x6d, 0xa2, 0x0f,
	0x82, 0x0c, 0x83, 0xd1, 0x5c, 0xa9, 0xa1, 0x9c, 0x42, 0x63, 0x2e, 0x33, 0x97, 0x83, 0xb0, 0xa2,
	0x78, 0xe0, 0xd1, 0x55, 0xf3, 0xb5, 0x33, 0xb7, 0xa2, 0xf1, 0x60, 0x38, 0x02, 0xfe, 0xd5, 0xcf,
	0x9f, 0xbe, 0x74, 0x1a, 0x9f, 0xbf, 0x74, 0x1a, 0x7f, 0x7d, 0xe9, 0x34, 0x3e, 0x5e, 0x77, 0x56,
	0x3e, 0x5f, 0x77, 0x56, 0xfe, 0xb8, 0xee, 0xac, 0x90, 0x7d, 0x4f, 0x06, 0xfd, 0xd3, 0x44, 0x27,
	0x7d, 0x19, 0xf1, 0x90, 0x45, 0xa2, 0x1f, 0x4d, 0x7e, 0x7a, 0x3e, 0x13, 0xfa, 0x2c, 0x99, 0xf4,
	0x3d, 0x19, 0x1c, 0x01, 0x07, 0xd4, 0xd1, 0xa9, 0x66, 0x91, 0x78, 0x31, 0x93, 0x47, 0xd1, 0xe4,
	0xe8, 0x83, 0xd4, 0x33, 0xae, 0xb3, 0x4c, 0xfd, 0x13, 0x00, 0x00, 0xff, 0xff, 0xca, 0x25, 0xb8,
	0x1a, 0x39, 0x0e, 0x00, 0x00,
}

func (m *C2S) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.PriceRecoveryRatioMax))))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0x91
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.PriceRecoveryRatioMin))))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0x89
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.RecoveryPriceMax))))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0x81
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.RecoveryPriceMin))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xf9
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ImpliedMax))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xf1
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ImpliedMin))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xe9
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.DeltaMax))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xe1
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.DeltaMin))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xd9
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.LeverageRatioMax))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xd1
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.LeverageRatioMin))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xc9
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.PremiumMax))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xc1
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.PremiumMin))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xb9
	i = encodeVarintQot_GetWarrant(dAtA, i, uint64(m.VolMax))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xb0
	i = encodeVarintQot_GetWarrant(dAtA, i, uint64(m.VolMin))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa8
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ConversionMax))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa1
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ConversionMin))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x99
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.StreetMax))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x91
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.StreetMin))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x89
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.StrikePriceMax))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x81
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.StrikePriceMin))))
	i--
	dAtA[i] = 0x79
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.CurPriceMax))))
	i--
	dAtA[i] = 0x71
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.CurPriceMin))))
	i--
	dAtA[i] = 0x69
	i = encodeVarintQot_GetWarrant(dAtA, i, uint64(m.Status))
	i--
	dAtA[i] = 0x60
	i = encodeVarintQot_GetWarrant(dAtA, i, uint64(m.PriceType))
	i--
	dAtA[i] = 0x58
	i = encodeVarintQot_GetWarrant(dAtA, i, uint64(m.IpoPeriod))
	i--
	dAtA[i] = 0x50
	i -= len(m.MaturityTimeMax)
	copy(dAtA[i:], m.MaturityTimeMax)
	i = encodeVarintQot_GetWarrant(dAtA, i, uint64(len(m.MaturityTimeMax)))
	i--
	dAtA[i] = 0x4a
	i -= len(m.MaturityTimeMin)
	copy(dAtA[i:], m.MaturityTimeMin)
	i = encodeVarintQot_GetWarrant(dAtA, i, uint64(len(m.MaturityTimeMin)))
	i--
	dAtA[i] = 0x42
	if len(m.IssuerList) > 0 {
		for iNdEx := len(m.IssuerList) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintQot_GetWarrant(dAtA, i, uint64(m.IssuerList[iNdEx]))
			i--
			dAtA[i] = 0x38
		}
	}
	if len(m.TypeList) > 0 {
		for iNdEx := len(m.TypeList) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintQot_GetWarrant(dAtA, i, uint64(m.TypeList[iNdEx]))
			i--
			dAtA[i] = 0x30
		}
	}
	if m.Owner != nil {
		{
			size, err := m.Owner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQot_GetWarrant(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	i--
	if m.Ascend {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x20
	i = encodeVarintQot_GetWarrant(dAtA, i, uint64(m.SortField))
	i--
	dAtA[i] = 0x18
	i = encodeVarintQot_GetWarrant(dAtA, i, uint64(m.Num))
	i--
	dAtA[i] = 0x10
	i = encodeVarintQot_GetWarrant(dAtA, i, uint64(m.Begin))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *WarrantData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WarrantData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WarrantData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintQot_GetWarrant(dAtA, i, uint64(m.InLinePriceStatus))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xf0
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.LowerStrikePrice))))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xe9
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.UpperStrikePrice))))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xe1
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.EffectiveLeverage))))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xd9
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Delta))))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xd1
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ImpliedVolatility))))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xc9
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.LowPrice))))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xc1
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.HighPrice))))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xb9
	i = encodeVarintQot_GetWarrant(dAtA, i, uint64(m.IssueSize))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xa8
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Amplitude))))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xa1
	i = encodeVarintQot_GetWarrant(dAtA, i, uint64(m.StreetVol))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0x98
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.StreetRate))))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0x91
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ConversionPrice))))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0x89
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.PriceRecoveryRatio))))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0x81
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Ipop))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xf9
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Leverage))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xf1
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.BreakEvenPoint))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xe9
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Premium))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xe1
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Score))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xd9
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Turnover))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xd1
	i = encodeVarintQot_GetWarrant(dAtA, i, uint64(m.Volume))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xc8
	i = encodeVarintQot_GetWarrant(dAtA, i, uint64(m.AskVol))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xc0
	i = encodeVarintQot_GetWarrant(dAtA, i, uint64(m.BidVol))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xb8
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.AskPrice))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xb1
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.BidPrice))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa9
	i = encodeVarintQot_GetWarrant(dAtA, i, uint64(m.Status))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa0
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ChangeRate))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x99
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.PriceChangeVal))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x91
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.CurPrice))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x89
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintQot_GetWarrant(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x82
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.LastClosePrice))))
	i--
	dAtA[i] = 0x79
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.StrikePrice))))
	i--
	dAtA[i] = 0x71
	i = encodeVarintQot_GetWarrant(dAtA, i, uint64(m.LotSize))
	i--
	dAtA[i] = 0x68
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ConversionRatio))))
	i--
	dAtA[i] = 0x61
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.RecoveryPrice))))
	i--
	dAtA[i] = 0x59
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.LastTradeTimestamp))))
	i--
	dAtA[i] = 0x51
	i -= len(m.LastTradeTime)
	copy(dAtA[i:], m.LastTradeTime)
	i = encodeVarintQot_GetWarrant(dAtA, i, uint64(len(m.LastTradeTime)))
	i--
	dAtA[i] = 0x4a
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ListTimestamp))))
	i--
	dAtA[i] = 0x41
	i -= len(m.ListTime)
	copy(dAtA[i:], m.ListTime)
	i = encodeVarintQot_GetWarrant(dAtA, i, uint64(len(m.ListTime)))
	i--
	dAtA[i] = 0x3a
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MaturityTimestamp))))
	i--
	dAtA[i] = 0x31
	i -= len(m.MaturityTime)
	copy(dAtA[i:], m.MaturityTime)
	i = encodeVarintQot_GetWarrant(dAtA, i, uint64(len(m.MaturityTime)))
	i--
	dAtA[i] = 0x2a
	i = encodeVarintQot_GetWarrant(dAtA, i, uint64(m.Issuer))
	i--
	dAtA[i] = 0x20
	i = encodeVarintQot_GetWarrant(dAtA, i, uint64(m.Type))
	i--
	dAtA[i] = 0x18
	if m.Owner == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("owner")
	} else {
		{
			size, err := m.Owner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQot_GetWarrant(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Stock == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("stock")
	} else {
		{
			size, err := m.Stock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQot_GetWarrant(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *S2C) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WarrantDataList) > 0 {
		for iNdEx := len(m.WarrantDataList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WarrantDataList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQot_GetWarrant(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	i = encodeVarintQot_GetWarrant(dAtA, i, uint64(m.AllCount))
	i--
	dAtA[i] = 0x10
	i--
	if m.LastPage {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.C2S == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("c2s")
	} else {
		{
			size, err := m.C2S.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQot_GetWarrant(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.S2C != nil {
		{
			size, err := m.S2C.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQot_GetWarrant(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	i = encodeVarintQot_GetWarrant(dAtA, i, uint64(m.ErrCode))
	i--
	dAtA[i] = 0x18
	i -= len(m.RetMsg)
	copy(dAtA[i:], m.RetMsg)
	i = encodeVarintQot_GetWarrant(dAtA, i, uint64(len(m.RetMsg)))
	i--
	dAtA[i] = 0x12
	if m.RetType == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("retType")
	} else {
		i = encodeVarintQot_GetWarrant(dAtA, i, uint64(*m.RetType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQot_GetWarrant(dAtA []byte, offset int, v uint64) int {
	offset -= sovQot_GetWarrant(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *C2S) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovQot_GetWarrant(uint64(m.Begin))
	n += 1 + sovQot_GetWarrant(uint64(m.Num))
	n += 1 + sovQot_GetWarrant(uint64(m.SortField))
	n += 2
	if m.Owner != nil {
		l = m.Owner.Size()
		n += 1 + l + sovQot_GetWarrant(uint64(l))
	}
	if len(m.TypeList) > 0 {
		for _, e := range m.TypeList {
			n += 1 + sovQot_GetWarrant(uint64(e))
		}
	}
	if len(m.IssuerList) > 0 {
		for _, e := range m.IssuerList {
			n += 1 + sovQot_GetWarrant(uint64(e))
		}
	}
	l = len(m.MaturityTimeMin)
	n += 1 + l + sovQot_GetWarrant(uint64(l))
	l = len(m.MaturityTimeMax)
	n += 1 + l + sovQot_GetWarrant(uint64(l))
	n += 1 + sovQot_GetWarrant(uint64(m.IpoPeriod))
	n += 1 + sovQot_GetWarrant(uint64(m.PriceType))
	n += 1 + sovQot_GetWarrant(uint64(m.Status))
	n += 9
	n += 9
	n += 9
	n += 10
	n += 10
	n += 10
	n += 10
	n += 10
	n += 2 + sovQot_GetWarrant(uint64(m.VolMin))
	n += 2 + sovQot_GetWarrant(uint64(m.VolMax))
	n += 10
	n += 10
	n += 10
	n += 10
	n += 10
	n += 10
	n += 10
	n += 10
	n += 10
	n += 10
	n += 10
	n += 10
	return n
}

func (m *WarrantData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Stock != nil {
		l = m.Stock.Size()
		n += 1 + l + sovQot_GetWarrant(uint64(l))
	}
	if m.Owner != nil {
		l = m.Owner.Size()
		n += 1 + l + sovQot_GetWarrant(uint64(l))
	}
	n += 1 + sovQot_GetWarrant(uint64(m.Type))
	n += 1 + sovQot_GetWarrant(uint64(m.Issuer))
	l = len(m.MaturityTime)
	n += 1 + l + sovQot_GetWarrant(uint64(l))
	n += 9
	l = len(m.ListTime)
	n += 1 + l + sovQot_GetWarrant(uint64(l))
	n += 9
	l = len(m.LastTradeTime)
	n += 1 + l + sovQot_GetWarrant(uint64(l))
	n += 9
	n += 9
	n += 9
	n += 1 + sovQot_GetWarrant(uint64(m.LotSize))
	n += 9
	n += 9
	l = len(m.Name)
	n += 2 + l + sovQot_GetWarrant(uint64(l))
	n += 10
	n += 10
	n += 10
	n += 2 + sovQot_GetWarrant(uint64(m.Status))
	n += 10
	n += 10
	n += 2 + sovQot_GetWarrant(uint64(m.BidVol))
	n += 2 + sovQot_GetWarrant(uint64(m.AskVol))
	n += 2 + sovQot_GetWarrant(uint64(m.Volume))
	n += 10
	n += 10
	n += 10
	n += 10
	n += 10
	n += 10
	n += 10
	n += 10
	n += 10
	n += 2 + sovQot_GetWarrant(uint64(m.StreetVol))
	n += 10
	n += 2 + sovQot_GetWarrant(uint64(m.IssueSize))
	n += 10
	n += 10
	n += 10
	n += 10
	n += 10
	n += 10
	n += 10
	n += 2 + sovQot_GetWarrant(uint64(m.InLinePriceStatus))
	return n
}

func (m *S2C) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	n += 1 + sovQot_GetWarrant(uint64(m.AllCount))
	if len(m.WarrantDataList) > 0 {
		for _, e := range m.WarrantDataList {
			l = e.Size()
			n += 1 + l + sovQot_GetWarrant(uint64(l))
		}
	}
	return n
}

func (m *Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.C2S != nil {
		l = m.C2S.Size()
		n += 1 + l + sovQot_GetWarrant(uint64(l))
	}
	return n
}

func (m *Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetType != nil {
		n += 1 + sovQot_GetWarrant(uint64(*m.RetType))
	}
	l = len(m.RetMsg)
	n += 1 + l + sovQot_GetWarrant(uint64(l))
	n += 1 + sovQot_GetWarrant(uint64(m.ErrCode))
	if m.S2C != nil {
		l = m.S2C.Size()
		n += 1 + l + sovQot_GetWarrant(uint64(l))
	}
	return n
}

func sovQot_GetWarrant(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQot_GetWarrant(x uint64) (n int) {
	return sovQot_GetWarrant(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *C2S) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_GetWarrant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Begin", wireType)
			}
			m.Begin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetWarrant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Begin |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetWarrant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortField", wireType)
			}
			m.SortField = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetWarrant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SortField |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ascend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetWarrant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ascend = bool(v != 0)
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetWarrant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_GetWarrant
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetWarrant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Owner == nil {
				m.Owner = &qotcommon.Security{}
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQot_GetWarrant
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TypeList = append(m.TypeList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQot_GetWarrant
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQot_GetWarrant
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQot_GetWarrant
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TypeList) == 0 {
					m.TypeList = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQot_GetWarrant
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TypeList = append(m.TypeList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeList", wireType)
			}
		case 7:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQot_GetWarrant
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.IssuerList = append(m.IssuerList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQot_GetWarrant
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQot_GetWarrant
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQot_GetWarrant
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.IssuerList) == 0 {
					m.IssuerList = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQot_GetWarrant
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.IssuerList = append(m.IssuerList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuerList", wireType)
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaturityTimeMin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetWarrant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQot_GetWarrant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetWarrant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaturityTimeMin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaturityTimeMax", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetWarrant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQot_GetWarrant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetWarrant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaturityTimeMax = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpoPeriod", wireType)
			}
			m.IpoPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetWarrant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IpoPeriod |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceType", wireType)
			}
			m.PriceType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetWarrant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PriceType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetWarrant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurPriceMin", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.CurPriceMin = float64(math.Float64frombits(v))
		case 14:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurPriceMax", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.CurPriceMax = float64(math.Float64frombits(v))
		case 15:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrikePriceMin", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.StrikePriceMin = float64(math.Float64frombits(v))
		case 16:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrikePriceMax", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.StrikePriceMax = float64(math.Float64frombits(v))
		case 17:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreetMin", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.StreetMin = float64(math.Float64frombits(v))
		case 18:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreetMax", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.StreetMax = float64(math.Float64frombits(v))
		case 19:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConversionMin", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ConversionMin = float64(math.Float64frombits(v))
		case 20:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConversionMax", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ConversionMax = float64(math.Float64frombits(v))
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolMin", wireType)
			}
			m.VolMin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetWarrant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VolMin |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolMax", wireType)
			}
			m.VolMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetWarrant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VolMax |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PremiumMin", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.PremiumMin = float64(math.Float64frombits(v))
		case 24:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PremiumMax", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.PremiumMax = float64(math.Float64frombits(v))
		case 25:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeverageRatioMin", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.LeverageRatioMin = float64(math.Float64frombits(v))
		case 26:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeverageRatioMax", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.LeverageRatioMax = float64(math.Float64frombits(v))
		case 27:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeltaMin", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.DeltaMin = float64(math.Float64frombits(v))
		case 28:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeltaMax", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.DeltaMax = float64(math.Float64frombits(v))
		case 29:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImpliedMin", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ImpliedMin = float64(math.Float64frombits(v))
		case 30:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImpliedMax", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ImpliedMax = float64(math.Float64frombits(v))
		case 31:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecoveryPriceMin", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.RecoveryPriceMin = float64(math.Float64frombits(v))
		case 32:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecoveryPriceMax", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.RecoveryPriceMax = float64(math.Float64frombits(v))
		case 33:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceRecoveryRatioMin", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.PriceRecoveryRatioMin = float64(math.Float64frombits(v))
		case 34:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceRecoveryRatioMax", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.PriceRecoveryRatioMax = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipQot_GetWarrant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_GetWarrant
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_GetWarrant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("begin")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("num")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("sortField")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ascend")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WarrantData) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_GetWarrant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WarrantData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WarrantData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetWarrant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_GetWarrant
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetWarrant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stock == nil {
				m.Stock = &qotcommon.Security{}
			}
			if err := m.Stock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetWarrant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_GetWarrant
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetWarrant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Owner == nil {
				m.Owner = &qotcommon.Security{}
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetWarrant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			m.Issuer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetWarrant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Issuer |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaturityTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetWarrant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQot_GetWarrant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetWarrant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaturityTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaturityTimestamp", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MaturityTimestamp = float64(math.Float64frombits(v))
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetWarrant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQot_GetWarrant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetWarrant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ListTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000020)
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListTimestamp", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ListTimestamp = float64(math.Float64frombits(v))
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTradeTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetWarrant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQot_GetWarrant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetWarrant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastTradeTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000040)
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTradeTimestamp", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.LastTradeTimestamp = float64(math.Float64frombits(v))
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecoveryPrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.RecoveryPrice = float64(math.Float64frombits(v))
		case 12:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConversionRatio", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ConversionRatio = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000080)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LotSize", wireType)
			}
			m.LotSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetWarrant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LotSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000100)
		case 14:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrikePrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.StrikePrice = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000200)
		case 15:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastClosePrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.LastClosePrice = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000400)
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetWarrant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQot_GetWarrant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetWarrant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000800)
		case 17:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurPrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.CurPrice = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00001000)
		case 18:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceChangeVal", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.PriceChangeVal = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00002000)
		case 19:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeRate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ChangeRate = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00004000)
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetWarrant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00008000)
		case 21:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidPrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.BidPrice = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00010000)
		case 22:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AskPrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.AskPrice = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00020000)
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidVol", wireType)
			}
			m.BidVol = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetWarrant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BidVol |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00040000)
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AskVol", wireType)
			}
			m.AskVol = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetWarrant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AskVol |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00080000)
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volume", wireType)
			}
			m.Volume = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetWarrant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Volume |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00100000)
		case 26:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Turnover", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Turnover = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00200000)
		case 27:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Score = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00400000)
		case 28:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Premium", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Premium = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00800000)
		case 29:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field BreakEvenPoint", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.BreakEvenPoint = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x01000000)
		case 30:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leverage", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Leverage = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x02000000)
		case 31:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipop", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Ipop = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x04000000)
		case 32:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceRecoveryRatio", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.PriceRecoveryRatio = float64(math.Float64frombits(v))
		case 33:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConversionPrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ConversionPrice = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x08000000)
		case 34:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreetRate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.StreetRate = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x10000000)
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreetVol", wireType)
			}
			m.StreetVol = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetWarrant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreetVol |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x20000000)
		case 36:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amplitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Amplitude = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x40000000)
		case 37:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssueSize", wireType)
			}
			m.IssueSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetWarrant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IssueSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x80000000)
		case 39:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighPrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.HighPrice = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x100000000)
		case 40:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowPrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.LowPrice = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x200000000)
		case 41:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImpliedVolatility", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ImpliedVolatility = float64(math.Float64frombits(v))
		case 42:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delta", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Delta = float64(math.Float64frombits(v))
		case 43:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveLeverage", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.EffectiveLeverage = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x400000000)
		case 44:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpperStrikePrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.UpperStrikePrice = float64(math.Float64frombits(v))
		case 45:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowerStrikePrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.LowerStrikePrice = float64(math.Float64frombits(v))
		case 46:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InLinePriceStatus", wireType)
			}
			m.InLinePriceStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetWarrant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InLinePriceStatus |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQot_GetWarrant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_GetWarrant
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_GetWarrant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("stock")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("owner")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("type")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("issuer")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("maturityTime")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("listTime")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("lastTradeTime")
	}
	if hasFields[0]&uint64(0x00000080) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("conversionRatio")
	}
	if hasFields[0]&uint64(0x00000100) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("lotSize")
	}
	if hasFields[0]&uint64(0x00000200) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("strikePrice")
	}
	if hasFields[0]&uint64(0x00000400) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("lastClosePrice")
	}
	if hasFields[0]&uint64(0x00000800) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("name")
	}
	if hasFields[0]&uint64(0x00001000) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("curPrice")
	}
	if hasFields[0]&uint64(0x00002000) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("priceChangeVal")
	}
	if hasFields[0]&uint64(0x00004000) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("changeRate")
	}
	if hasFields[0]&uint64(0x00008000) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("status")
	}
	if hasFields[0]&uint64(0x00010000) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("bidPrice")
	}
	if hasFields[0]&uint64(0x00020000) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("askPrice")
	}
	if hasFields[0]&uint64(0x00040000) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("bidVol")
	}
	if hasFields[0]&uint64(0x00080000) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("askVol")
	}
	if hasFields[0]&uint64(0x00100000) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("volume")
	}
	if hasFields[0]&uint64(0x00200000) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("turnover")
	}
	if hasFields[0]&uint64(0x00400000) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("score")
	}
	if hasFields[0]&uint64(0x00800000) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("premium")
	}
	if hasFields[0]&uint64(0x01000000) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("breakEvenPoint")
	}
	if hasFields[0]&uint64(0x02000000) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("leverage")
	}
	if hasFields[0]&uint64(0x04000000) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ipop")
	}
	if hasFields[0]&uint64(0x08000000) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("conversionPrice")
	}
	if hasFields[0]&uint64(0x10000000) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("streetRate")
	}
	if hasFields[0]&uint64(0x20000000) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("streetVol")
	}
	if hasFields[0]&uint64(0x40000000) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("amplitude")
	}
	if hasFields[0]&uint64(0x80000000) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("issueSize")
	}
	if hasFields[0]&uint64(0x100000000) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("highPrice")
	}
	if hasFields[0]&uint64(0x200000000) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("lowPrice")
	}
	if hasFields[0]&uint64(0x400000000) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("effectiveLeverage")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_GetWarrant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPage", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetWarrant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LastPage = bool(v != 0)
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllCount", wireType)
			}
			m.AllCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetWarrant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AllCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WarrantDataList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetWarrant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_GetWarrant
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetWarrant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WarrantDataList = append(m.WarrantDataList, &WarrantData{})
			if err := m.WarrantDataList[len(m.WarrantDataList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQot_GetWarrant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_GetWarrant
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_GetWarrant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("lastPage")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("allCount")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Request) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_GetWarrant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field C2S", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetWarrant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_GetWarrant
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetWarrant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.C2S == nil {
				m.C2S = &C2S{}
			}
			if err := m.C2S.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipQot_GetWarrant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_GetWarrant
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_GetWarrant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("c2s")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_GetWarrant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetWarrant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetType = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetWarrant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQot_GetWarrant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetWarrant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RetMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			m.ErrCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetWarrant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S2C", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetWarrant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_GetWarrant
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetWarrant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.S2C == nil {
				m.S2C = &S2C{}
			}
			if err := m.S2C.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQot_GetWarrant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_GetWarrant
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_GetWarrant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("retType")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQot_GetWarrant(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQot_GetWarrant
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQot_GetWarrant
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQot_GetWarrant
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQot_GetWarrant
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthQot_GetWarrant
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowQot_GetWarrant
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipQot_GetWarrant(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthQot_GetWarrant
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthQot_GetWarrant = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQot_GetWarrant   = fmt.Errorf("proto: integer overflow")
)
