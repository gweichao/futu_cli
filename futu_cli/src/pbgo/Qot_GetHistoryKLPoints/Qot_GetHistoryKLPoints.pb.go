// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: Qot_GetHistoryKLPoints.proto

package Qot_GetHistoryKLPoints

import (
	fmt "fmt"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	_ "pbgo/Common"
	Qot_Common "pbgo/Qot_Common"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//当请求时间点数据为空时，如何返回数据
type NoDataMode int32

const (
	NoDataMode_NoDataMode_Null     NoDataMode = 0
	NoDataMode_NoDataMode_Forward  NoDataMode = 1
	NoDataMode_NoDataMode_Backward NoDataMode = 2
)

var NoDataMode_name = map[int32]string{
	0: "NoDataMode_Null",
	1: "NoDataMode_Forward",
	2: "NoDataMode_Backward",
}

var NoDataMode_value = map[string]int32{
	"NoDataMode_Null":     0,
	"NoDataMode_Forward":  1,
	"NoDataMode_Backward": 2,
}

func (x NoDataMode) Enum() *NoDataMode {
	p := new(NoDataMode)
	*p = x
	return p
}

func (x NoDataMode) String() string {
	return proto.EnumName(NoDataMode_name, int32(x))
}

func (x *NoDataMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(NoDataMode_value, data, "NoDataMode")
	if err != nil {
		return err
	}
	*x = NoDataMode(value)
	return nil
}

func (NoDataMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ad26a2b1eebc2d1d, []int{0}
}

//这个时间点返回数据的状态以及来源
type DataStatus int32

const (
	DataStatus_DataStatus_Null     DataStatus = 0
	DataStatus_DataStatus_Current  DataStatus = 1
	DataStatus_DataStatus_Previous DataStatus = 2
	DataStatus_DataStatus_Back     DataStatus = 3
)

var DataStatus_name = map[int32]string{
	0: "DataStatus_Null",
	1: "DataStatus_Current",
	2: "DataStatus_Previous",
	3: "DataStatus_Back",
}

var DataStatus_value = map[string]int32{
	"DataStatus_Null":     0,
	"DataStatus_Current":  1,
	"DataStatus_Previous": 2,
	"DataStatus_Back":     3,
}

func (x DataStatus) Enum() *DataStatus {
	p := new(DataStatus)
	*p = x
	return p
}

func (x DataStatus) String() string {
	return proto.EnumName(DataStatus_name, int32(x))
}

func (x *DataStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DataStatus_value, data, "DataStatus")
	if err != nil {
		return err
	}
	*x = DataStatus(value)
	return nil
}

func (DataStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ad26a2b1eebc2d1d, []int{1}
}

type C2S struct {
	RehabType         int32                  `protobuf:"varint,1,req,name=rehabType" json:"rehabType"`
	KlType            int32                  `protobuf:"varint,2,req,name=klType" json:"klType"`
	NoDataMode        int32                  `protobuf:"varint,3,req,name=noDataMode" json:"noDataMode"`
	SecurityList      []*Qot_Common.Security `protobuf:"bytes,4,rep,name=securityList" json:"securityList,omitempty"`
	TimeList          []string               `protobuf:"bytes,5,rep,name=timeList" json:"timeList,omitempty"`
	MaxReqSecurityNum int32                  `protobuf:"varint,6,opt,name=maxReqSecurityNum" json:"maxReqSecurityNum"`
	NeedKLFieldsFlag  int64                  `protobuf:"varint,7,opt,name=needKLFieldsFlag" json:"needKLFieldsFlag"`
}

func (m *C2S) Reset()         { *m = C2S{} }
func (m *C2S) String() string { return proto.CompactTextString(m) }
func (*C2S) ProtoMessage()    {}
func (*C2S) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad26a2b1eebc2d1d, []int{0}
}
func (m *C2S) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S.Merge(m, src)
}
func (m *C2S) XXX_Size() int {
	return m.Size()
}
func (m *C2S) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S.DiscardUnknown(m)
}

var xxx_messageInfo_C2S proto.InternalMessageInfo

func (m *C2S) GetRehabType() int32 {
	if m != nil {
		return m.RehabType
	}
	return 0
}

func (m *C2S) GetKlType() int32 {
	if m != nil {
		return m.KlType
	}
	return 0
}

func (m *C2S) GetNoDataMode() int32 {
	if m != nil {
		return m.NoDataMode
	}
	return 0
}

func (m *C2S) GetSecurityList() []*Qot_Common.Security {
	if m != nil {
		return m.SecurityList
	}
	return nil
}

func (m *C2S) GetTimeList() []string {
	if m != nil {
		return m.TimeList
	}
	return nil
}

func (m *C2S) GetMaxReqSecurityNum() int32 {
	if m != nil {
		return m.MaxReqSecurityNum
	}
	return 0
}

func (m *C2S) GetNeedKLFieldsFlag() int64 {
	if m != nil {
		return m.NeedKLFieldsFlag
	}
	return 0
}

type HistoryPointsKL struct {
	Status  int32             `protobuf:"varint,1,req,name=status" json:"status"`
	ReqTime string            `protobuf:"bytes,2,req,name=reqTime" json:"reqTime"`
	Kl      *Qot_Common.KLine `protobuf:"bytes,3,req,name=kl" json:"kl,omitempty"`
}

func (m *HistoryPointsKL) Reset()         { *m = HistoryPointsKL{} }
func (m *HistoryPointsKL) String() string { return proto.CompactTextString(m) }
func (*HistoryPointsKL) ProtoMessage()    {}
func (*HistoryPointsKL) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad26a2b1eebc2d1d, []int{1}
}
func (m *HistoryPointsKL) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HistoryPointsKL) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HistoryPointsKL.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HistoryPointsKL) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistoryPointsKL.Merge(m, src)
}
func (m *HistoryPointsKL) XXX_Size() int {
	return m.Size()
}
func (m *HistoryPointsKL) XXX_DiscardUnknown() {
	xxx_messageInfo_HistoryPointsKL.DiscardUnknown(m)
}

var xxx_messageInfo_HistoryPointsKL proto.InternalMessageInfo

func (m *HistoryPointsKL) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *HistoryPointsKL) GetReqTime() string {
	if m != nil {
		return m.ReqTime
	}
	return ""
}

func (m *HistoryPointsKL) GetKl() *Qot_Common.KLine {
	if m != nil {
		return m.Kl
	}
	return nil
}

type SecurityHistoryKLPoints struct {
	Security *Qot_Common.Security `protobuf:"bytes,1,req,name=security" json:"security,omitempty"`
	KlList   []*HistoryPointsKL   `protobuf:"bytes,2,rep,name=klList" json:"klList,omitempty"`
}

func (m *SecurityHistoryKLPoints) Reset()         { *m = SecurityHistoryKLPoints{} }
func (m *SecurityHistoryKLPoints) String() string { return proto.CompactTextString(m) }
func (*SecurityHistoryKLPoints) ProtoMessage()    {}
func (*SecurityHistoryKLPoints) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad26a2b1eebc2d1d, []int{2}
}
func (m *SecurityHistoryKLPoints) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecurityHistoryKLPoints) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SecurityHistoryKLPoints.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SecurityHistoryKLPoints) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecurityHistoryKLPoints.Merge(m, src)
}
func (m *SecurityHistoryKLPoints) XXX_Size() int {
	return m.Size()
}
func (m *SecurityHistoryKLPoints) XXX_DiscardUnknown() {
	xxx_messageInfo_SecurityHistoryKLPoints.DiscardUnknown(m)
}

var xxx_messageInfo_SecurityHistoryKLPoints proto.InternalMessageInfo

func (m *SecurityHistoryKLPoints) GetSecurity() *Qot_Common.Security {
	if m != nil {
		return m.Security
	}
	return nil
}

func (m *SecurityHistoryKLPoints) GetKlList() []*HistoryPointsKL {
	if m != nil {
		return m.KlList
	}
	return nil
}

type S2C struct {
	KlPointList []*SecurityHistoryKLPoints `protobuf:"bytes,1,rep,name=klPointList" json:"klPointList,omitempty"`
	HasNext     bool                       `protobuf:"varint,2,opt,name=hasNext" json:"hasNext"`
}

func (m *S2C) Reset()         { *m = S2C{} }
func (m *S2C) String() string { return proto.CompactTextString(m) }
func (*S2C) ProtoMessage()    {}
func (*S2C) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad26a2b1eebc2d1d, []int{3}
}
func (m *S2C) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C.Merge(m, src)
}
func (m *S2C) XXX_Size() int {
	return m.Size()
}
func (m *S2C) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C.DiscardUnknown(m)
}

var xxx_messageInfo_S2C proto.InternalMessageInfo

func (m *S2C) GetKlPointList() []*SecurityHistoryKLPoints {
	if m != nil {
		return m.KlPointList
	}
	return nil
}

func (m *S2C) GetHasNext() bool {
	if m != nil {
		return m.HasNext
	}
	return false
}

type Request struct {
	C2S *C2S `protobuf:"bytes,1,req,name=c2s" json:"c2s,omitempty"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad26a2b1eebc2d1d, []int{4}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return m.Size()
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetC2S() *C2S {
	if m != nil {
		return m.C2S
	}
	return nil
}

type Response struct {
	RetType *int32 `protobuf:"varint,1,req,name=retType,def=-400" json:"retType,omitempty"`
	RetMsg  string `protobuf:"bytes,2,opt,name=retMsg" json:"retMsg"`
	ErrCode int32  `protobuf:"varint,3,opt,name=errCode" json:"errCode"`
	S2C     *S2C   `protobuf:"bytes,4,opt,name=s2c" json:"s2c,omitempty"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad26a2b1eebc2d1d, []int{5}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return m.Size()
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

const Default_Response_RetType int32 = -400

func (m *Response) GetRetType() int32 {
	if m != nil && m.RetType != nil {
		return *m.RetType
	}
	return Default_Response_RetType
}

func (m *Response) GetRetMsg() string {
	if m != nil {
		return m.RetMsg
	}
	return ""
}

func (m *Response) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *Response) GetS2C() *S2C {
	if m != nil {
		return m.S2C
	}
	return nil
}

func init() {
	proto.RegisterEnum("Qot_GetHistoryKLPoints.NoDataMode", NoDataMode_name, NoDataMode_value)
	proto.RegisterEnum("Qot_GetHistoryKLPoints.DataStatus", DataStatus_name, DataStatus_value)
	proto.RegisterType((*C2S)(nil), "Qot_GetHistoryKLPoints.C2S")
	proto.RegisterType((*HistoryPointsKL)(nil), "Qot_GetHistoryKLPoints.HistoryPointsKL")
	proto.RegisterType((*SecurityHistoryKLPoints)(nil), "Qot_GetHistoryKLPoints.SecurityHistoryKLPoints")
	proto.RegisterType((*S2C)(nil), "Qot_GetHistoryKLPoints.S2C")
	proto.RegisterType((*Request)(nil), "Qot_GetHistoryKLPoints.Request")
	proto.RegisterType((*Response)(nil), "Qot_GetHistoryKLPoints.Response")
}

func init() { proto.RegisterFile("Qot_GetHistoryKLPoints.proto", fileDescriptor_ad26a2b1eebc2d1d) }

var fileDescriptor_ad26a2b1eebc2d1d = []byte{
	// 612 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0xcd, 0x4e, 0xdb, 0x4e,
	0x14, 0xc5, 0x33, 0x76, 0x80, 0x70, 0x41, 0x22, 0x4c, 0xfe, 0x82, 0x08, 0x90, 0xff, 0xa9, 0x55,
	0xa9, 0x11, 0x12, 0x21, 0xb2, 0xba, 0x40, 0xdd, 0x54, 0xc2, 0x15, 0xad, 0x9a, 0x10, 0xc1, 0x84,
	0x55, 0x37, 0xc8, 0x24, 0xd3, 0x60, 0xc5, 0xf6, 0x98, 0x99, 0x71, 0x0b, 0xef, 0xd0, 0x45, 0x77,
	0x7d, 0x86, 0xbe, 0x09, 0x4b, 0x96, 0x5d, 0x55, 0x15, 0xbc, 0x48, 0x35, 0xfe, 0xc0, 0xc3, 0x47,
	0xba, 0x9c, 0xdf, 0x3d, 0x73, 0xe7, 0xf8, 0xdc, 0x6b, 0xd8, 0x3a, 0x66, 0xf2, 0xf4, 0x3d, 0x95,
	0x1f, 0x7c, 0x21, 0x19, 0xbf, 0xea, 0xf5, 0x8f, 0x98, 0x1f, 0x49, 0xd1, 0x89, 0x39, 0x93, 0x0c,
	0xaf, 0x3d, 0x5f, 0xdd, 0x58, 0x76, 0x59, 0x18, 0xb2, 0x28, 0x53, 0x6d, 0xd4, 0x95, 0x4a, 0x27,
	0xf6, 0x4f, 0x03, 0x4c, 0xd7, 0x19, 0x62, 0x1b, 0x16, 0x39, 0x3d, 0xf7, 0xce, 0x4e, 0xae, 0x62,
	0xda, 0x44, 0x2d, 0xa3, 0x3d, 0xb7, 0x5f, 0xbd, 0xfe, 0xfd, 0x7f, 0x85, 0x94, 0x18, 0x6f, 0xc1,
	0xfc, 0x34, 0x48, 0x05, 0x86, 0x26, 0xc8, 0x19, 0x7e, 0x09, 0x10, 0xb1, 0x77, 0x9e, 0xf4, 0x0e,
	0xd9, 0x98, 0x36, 0x4d, 0x4d, 0xa1, 0x71, 0xbc, 0x07, 0xcb, 0x82, 0x8e, 0x12, 0xee, 0xcb, 0xab,
	0xbe, 0x2f, 0x64, 0xb3, 0xda, 0x32, 0xdb, 0x4b, 0xce, 0x7f, 0x1d, 0xcd, 0xd8, 0x30, 0xaf, 0x93,
	0x07, 0x4a, 0xbc, 0x01, 0x35, 0xe9, 0x87, 0x34, 0xbd, 0x35, 0xd7, 0x32, 0xdb, 0x8b, 0xe4, 0xfe,
	0x8c, 0x1d, 0x58, 0x0d, 0xbd, 0x4b, 0x42, 0x2f, 0x8a, 0xbb, 0x83, 0x24, 0x6c, 0xce, 0xb7, 0xd0,
	0xbd, 0x85, 0xa7, 0x65, 0xdc, 0x85, 0x7a, 0x44, 0xe9, 0xb8, 0xd7, 0x3f, 0xf0, 0x69, 0x30, 0x16,
	0x07, 0x81, 0x37, 0x69, 0x2e, 0xb4, 0x50, 0xdb, 0xcc, 0xaf, 0x3c, 0xa9, 0xda, 0x1c, 0x56, 0xf2,
	0x78, 0xb3, 0x70, 0x7b, 0x7d, 0x15, 0x89, 0x90, 0x9e, 0x4c, 0xc4, 0x83, 0xcc, 0x72, 0x86, 0x2d,
	0x58, 0xe0, 0xf4, 0xe2, 0xc4, 0x0f, 0xb3, 0xc4, 0x16, 0xf3, 0x72, 0x01, 0xf1, 0x0b, 0x30, 0xa6,
	0x41, 0x1a, 0xd5, 0x92, 0xb3, 0xaa, 0x47, 0xd0, 0xeb, 0xfb, 0x11, 0x25, 0xc6, 0x34, 0xb0, 0xbf,
	0x21, 0x58, 0x2f, 0x5c, 0x3f, 0x9a, 0x2d, 0xee, 0x42, 0xad, 0x48, 0x28, 0x7d, 0x7e, 0x56, 0x8e,
	0xf7, 0x2a, 0xfc, 0x56, 0x4d, 0x30, 0x4d, 0xd0, 0x48, 0x73, 0x7f, 0xd5, 0x99, 0xb1, 0x54, 0x8f,
	0xbe, 0x93, 0xe4, 0xd7, 0xec, 0x4b, 0x30, 0x87, 0x8e, 0x8b, 0x8f, 0x61, 0x69, 0x1a, 0xa4, 0xc5,
	0xb4, 0x19, 0x4a, 0x9b, 0xed, 0xce, 0x6a, 0x36, 0xc3, 0x3f, 0xd1, 0x7b, 0xa8, 0xac, 0xce, 0x3d,
	0x31, 0xa0, 0x97, 0xca, 0x1b, 0x6a, 0xd7, 0x8a, 0xac, 0x72, 0x68, 0xef, 0xc1, 0x02, 0xa1, 0x17,
	0x09, 0x15, 0x12, 0xef, 0x80, 0x39, 0x72, 0x44, 0xfe, 0xc9, 0x9b, 0xb3, 0x5e, 0x75, 0x9d, 0x21,
	0x51, 0x3a, 0xfb, 0x07, 0x82, 0x1a, 0xa1, 0x22, 0x66, 0x91, 0xa0, 0xd9, 0x48, 0x64, 0xb9, 0xe5,
	0x6f, 0xaa, 0x3b, 0xaf, 0xbb, 0x5d, 0x52, 0x40, 0x35, 0x50, 0x4e, 0xe5, 0xa1, 0x98, 0xa4, 0x2e,
	0x8a, 0x89, 0xe5, 0x4c, 0xdd, 0xa6, 0x9c, 0xbb, 0xd9, 0x82, 0x97, 0xdb, 0x55, 0x40, 0xe5, 0x4c,
	0x38, 0xa3, 0x66, 0xb5, 0x85, 0xfe, 0xe5, 0x6c, 0xe8, 0xb8, 0x44, 0xe9, 0xb6, 0x09, 0xc0, 0xa0,
	0xfc, 0x35, 0x1a, 0xb0, 0x52, 0x9e, 0x4e, 0x07, 0x49, 0x10, 0xd4, 0x2b, 0x78, 0x0d, 0xb0, 0x06,
	0x0f, 0x18, 0xff, 0xea, 0xf1, 0x71, 0x1d, 0xe1, 0x75, 0x68, 0x68, 0x7c, 0xdf, 0x1b, 0x4d, 0xd3,
	0x82, 0xb1, 0x3d, 0x01, 0x50, 0x78, 0x98, 0x6d, 0x60, 0x03, 0x56, 0xca, 0x93, 0xd6, 0x53, 0x83,
	0x6e, 0xc2, 0x39, 0x8d, 0x64, 0xd6, 0x53, 0xe3, 0x47, 0x9c, 0x7e, 0xf1, 0x59, 0x22, 0xea, 0xc6,
	0xa3, 0x2e, 0xea, 0xb1, 0xba, 0xb9, 0xff, 0xf1, 0xfa, 0xd6, 0x42, 0x37, 0xb7, 0x16, 0xfa, 0x73,
	0x6b, 0xa1, 0xef, 0x77, 0x56, 0xe5, 0xe6, 0xce, 0xaa, 0xfc, 0xba, 0xb3, 0x2a, 0xd0, 0x18, 0xb1,
	0xb0, 0xf3, 0x39, 0x91, 0x49, 0x87, 0xc5, 0x34, 0xf2, 0x62, 0xbf, 0x13, 0x9f, 0x7d, 0xda, 0x8c,
	0xcf, 0x26, 0x6c, 0xf7, 0xf9, 0x44, 0xfe, 0x06, 0x00, 0x00, 0xff, 0xff, 0xf6, 0x60, 0x49, 0x43,
	0xdc, 0x04, 0x00, 0x00,
}

func (m *C2S) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintQot_GetHistoryKLPoints(dAtA, i, uint64(m.NeedKLFieldsFlag))
	i--
	dAtA[i] = 0x38
	i = encodeVarintQot_GetHistoryKLPoints(dAtA, i, uint64(m.MaxReqSecurityNum))
	i--
	dAtA[i] = 0x30
	if len(m.TimeList) > 0 {
		for iNdEx := len(m.TimeList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TimeList[iNdEx])
			copy(dAtA[i:], m.TimeList[iNdEx])
			i = encodeVarintQot_GetHistoryKLPoints(dAtA, i, uint64(len(m.TimeList[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.SecurityList) > 0 {
		for iNdEx := len(m.SecurityList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SecurityList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQot_GetHistoryKLPoints(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	i = encodeVarintQot_GetHistoryKLPoints(dAtA, i, uint64(m.NoDataMode))
	i--
	dAtA[i] = 0x18
	i = encodeVarintQot_GetHistoryKLPoints(dAtA, i, uint64(m.KlType))
	i--
	dAtA[i] = 0x10
	i = encodeVarintQot_GetHistoryKLPoints(dAtA, i, uint64(m.RehabType))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *HistoryPointsKL) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HistoryPointsKL) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryPointsKL) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Kl == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("kl")
	} else {
		{
			size, err := m.Kl.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQot_GetHistoryKLPoints(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	i -= len(m.ReqTime)
	copy(dAtA[i:], m.ReqTime)
	i = encodeVarintQot_GetHistoryKLPoints(dAtA, i, uint64(len(m.ReqTime)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintQot_GetHistoryKLPoints(dAtA, i, uint64(m.Status))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *SecurityHistoryKLPoints) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecurityHistoryKLPoints) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecurityHistoryKLPoints) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.KlList) > 0 {
		for iNdEx := len(m.KlList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KlList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQot_GetHistoryKLPoints(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Security == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("security")
	} else {
		{
			size, err := m.Security.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQot_GetHistoryKLPoints(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *S2C) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.HasNext {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	if len(m.KlPointList) > 0 {
		for iNdEx := len(m.KlPointList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KlPointList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQot_GetHistoryKLPoints(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.C2S == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("c2s")
	} else {
		{
			size, err := m.C2S.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQot_GetHistoryKLPoints(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.S2C != nil {
		{
			size, err := m.S2C.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQot_GetHistoryKLPoints(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	i = encodeVarintQot_GetHistoryKLPoints(dAtA, i, uint64(m.ErrCode))
	i--
	dAtA[i] = 0x18
	i -= len(m.RetMsg)
	copy(dAtA[i:], m.RetMsg)
	i = encodeVarintQot_GetHistoryKLPoints(dAtA, i, uint64(len(m.RetMsg)))
	i--
	dAtA[i] = 0x12
	if m.RetType == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("retType")
	} else {
		i = encodeVarintQot_GetHistoryKLPoints(dAtA, i, uint64(*m.RetType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQot_GetHistoryKLPoints(dAtA []byte, offset int, v uint64) int {
	offset -= sovQot_GetHistoryKLPoints(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *C2S) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovQot_GetHistoryKLPoints(uint64(m.RehabType))
	n += 1 + sovQot_GetHistoryKLPoints(uint64(m.KlType))
	n += 1 + sovQot_GetHistoryKLPoints(uint64(m.NoDataMode))
	if len(m.SecurityList) > 0 {
		for _, e := range m.SecurityList {
			l = e.Size()
			n += 1 + l + sovQot_GetHistoryKLPoints(uint64(l))
		}
	}
	if len(m.TimeList) > 0 {
		for _, s := range m.TimeList {
			l = len(s)
			n += 1 + l + sovQot_GetHistoryKLPoints(uint64(l))
		}
	}
	n += 1 + sovQot_GetHistoryKLPoints(uint64(m.MaxReqSecurityNum))
	n += 1 + sovQot_GetHistoryKLPoints(uint64(m.NeedKLFieldsFlag))
	return n
}

func (m *HistoryPointsKL) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovQot_GetHistoryKLPoints(uint64(m.Status))
	l = len(m.ReqTime)
	n += 1 + l + sovQot_GetHistoryKLPoints(uint64(l))
	if m.Kl != nil {
		l = m.Kl.Size()
		n += 1 + l + sovQot_GetHistoryKLPoints(uint64(l))
	}
	return n
}

func (m *SecurityHistoryKLPoints) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Security != nil {
		l = m.Security.Size()
		n += 1 + l + sovQot_GetHistoryKLPoints(uint64(l))
	}
	if len(m.KlList) > 0 {
		for _, e := range m.KlList {
			l = e.Size()
			n += 1 + l + sovQot_GetHistoryKLPoints(uint64(l))
		}
	}
	return n
}

func (m *S2C) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.KlPointList) > 0 {
		for _, e := range m.KlPointList {
			l = e.Size()
			n += 1 + l + sovQot_GetHistoryKLPoints(uint64(l))
		}
	}
	n += 2
	return n
}

func (m *Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.C2S != nil {
		l = m.C2S.Size()
		n += 1 + l + sovQot_GetHistoryKLPoints(uint64(l))
	}
	return n
}

func (m *Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetType != nil {
		n += 1 + sovQot_GetHistoryKLPoints(uint64(*m.RetType))
	}
	l = len(m.RetMsg)
	n += 1 + l + sovQot_GetHistoryKLPoints(uint64(l))
	n += 1 + sovQot_GetHistoryKLPoints(uint64(m.ErrCode))
	if m.S2C != nil {
		l = m.S2C.Size()
		n += 1 + l + sovQot_GetHistoryKLPoints(uint64(l))
	}
	return n
}

func sovQot_GetHistoryKLPoints(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQot_GetHistoryKLPoints(x uint64) (n int) {
	return sovQot_GetHistoryKLPoints(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *C2S) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_GetHistoryKLPoints
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RehabType", wireType)
			}
			m.RehabType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetHistoryKLPoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RehabType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KlType", wireType)
			}
			m.KlType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetHistoryKLPoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KlType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoDataMode", wireType)
			}
			m.NoDataMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetHistoryKLPoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NoDataMode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetHistoryKLPoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_GetHistoryKLPoints
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetHistoryKLPoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityList = append(m.SecurityList, &Qot_Common.Security{})
			if err := m.SecurityList[len(m.SecurityList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetHistoryKLPoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQot_GetHistoryKLPoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetHistoryKLPoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimeList = append(m.TimeList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxReqSecurityNum", wireType)
			}
			m.MaxReqSecurityNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetHistoryKLPoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxReqSecurityNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedKLFieldsFlag", wireType)
			}
			m.NeedKLFieldsFlag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetHistoryKLPoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NeedKLFieldsFlag |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQot_GetHistoryKLPoints(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_GetHistoryKLPoints
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_GetHistoryKLPoints
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("rehabType")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("klType")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("noDataMode")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HistoryPointsKL) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_GetHistoryKLPoints
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HistoryPointsKL: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HistoryPointsKL: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetHistoryKLPoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetHistoryKLPoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQot_GetHistoryKLPoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetHistoryKLPoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReqTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetHistoryKLPoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_GetHistoryKLPoints
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetHistoryKLPoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Kl == nil {
				m.Kl = &Qot_Common.KLine{}
			}
			if err := m.Kl.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipQot_GetHistoryKLPoints(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_GetHistoryKLPoints
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_GetHistoryKLPoints
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("status")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("reqTime")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("kl")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecurityHistoryKLPoints) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_GetHistoryKLPoints
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecurityHistoryKLPoints: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecurityHistoryKLPoints: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Security", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetHistoryKLPoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_GetHistoryKLPoints
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetHistoryKLPoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Security == nil {
				m.Security = &Qot_Common.Security{}
			}
			if err := m.Security.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KlList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetHistoryKLPoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_GetHistoryKLPoints
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetHistoryKLPoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KlList = append(m.KlList, &HistoryPointsKL{})
			if err := m.KlList[len(m.KlList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQot_GetHistoryKLPoints(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_GetHistoryKLPoints
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_GetHistoryKLPoints
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("security")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_GetHistoryKLPoints
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KlPointList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetHistoryKLPoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_GetHistoryKLPoints
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetHistoryKLPoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KlPointList = append(m.KlPointList, &SecurityHistoryKLPoints{})
			if err := m.KlPointList[len(m.KlPointList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasNext", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetHistoryKLPoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasNext = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQot_GetHistoryKLPoints(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_GetHistoryKLPoints
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_GetHistoryKLPoints
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Request) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_GetHistoryKLPoints
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field C2S", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetHistoryKLPoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_GetHistoryKLPoints
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetHistoryKLPoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.C2S == nil {
				m.C2S = &C2S{}
			}
			if err := m.C2S.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipQot_GetHistoryKLPoints(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_GetHistoryKLPoints
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_GetHistoryKLPoints
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("c2s")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQot_GetHistoryKLPoints
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetHistoryKLPoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetType = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetHistoryKLPoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQot_GetHistoryKLPoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetHistoryKLPoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RetMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			m.ErrCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetHistoryKLPoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S2C", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQot_GetHistoryKLPoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQot_GetHistoryKLPoints
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQot_GetHistoryKLPoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.S2C == nil {
				m.S2C = &S2C{}
			}
			if err := m.S2C.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQot_GetHistoryKLPoints(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQot_GetHistoryKLPoints
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQot_GetHistoryKLPoints
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("retType")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQot_GetHistoryKLPoints(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQot_GetHistoryKLPoints
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQot_GetHistoryKLPoints
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQot_GetHistoryKLPoints
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQot_GetHistoryKLPoints
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthQot_GetHistoryKLPoints
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowQot_GetHistoryKLPoints
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipQot_GetHistoryKLPoints(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthQot_GetHistoryKLPoints
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthQot_GetHistoryKLPoints = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQot_GetHistoryKLPoints   = fmt.Errorf("proto: integer overflow")
)
