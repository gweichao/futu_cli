// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: Trd_Common.proto

package trdcommon

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/futuopen/ftapi4go/pb/common"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//交易环境
type TrdEnv int32

const (
	TrdEnv_TrdEnv_Simulate TrdEnv = 0
	TrdEnv_TrdEnv_Real     TrdEnv = 1
)

var TrdEnv_name = map[int32]string{
	0: "TrdEnv_Simulate",
	1: "TrdEnv_Real",
}

var TrdEnv_value = map[string]int32{
	"TrdEnv_Simulate": 0,
	"TrdEnv_Real":     1,
}

func (x TrdEnv) Enum() *TrdEnv {
	p := new(TrdEnv)
	*p = x
	return p
}

func (x TrdEnv) String() string {
	return proto.EnumName(TrdEnv_name, int32(x))
}

func (x *TrdEnv) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TrdEnv_value, data, "TrdEnv")
	if err != nil {
		return err
	}
	*x = TrdEnv(value)
	return nil
}

func (TrdEnv) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0949ead9262a0b33, []int{0}
}

//交易市场，是大的市场，不是具体品种
type TrdMarket int32

const (
	TrdMarket_TrdMarket_Unknown TrdMarket = 0
	TrdMarket_TrdMarket_HK      TrdMarket = 1
	TrdMarket_TrdMarket_US      TrdMarket = 2
	TrdMarket_TrdMarket_CN      TrdMarket = 3
	TrdMarket_TrdMarket_HKCC    TrdMarket = 4
	TrdMarket_TrdMarket_Futures TrdMarket = 5
)

var TrdMarket_name = map[int32]string{
	0: "TrdMarket_Unknown",
	1: "TrdMarket_HK",
	2: "TrdMarket_US",
	3: "TrdMarket_CN",
	4: "TrdMarket_HKCC",
	5: "TrdMarket_Futures",
}

var TrdMarket_value = map[string]int32{
	"TrdMarket_Unknown": 0,
	"TrdMarket_HK":      1,
	"TrdMarket_US":      2,
	"TrdMarket_CN":      3,
	"TrdMarket_HKCC":    4,
	"TrdMarket_Futures": 5,
}

func (x TrdMarket) Enum() *TrdMarket {
	p := new(TrdMarket)
	*p = x
	return p
}

func (x TrdMarket) String() string {
	return proto.EnumName(TrdMarket_name, int32(x))
}

func (x *TrdMarket) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TrdMarket_value, data, "TrdMarket")
	if err != nil {
		return err
	}
	*x = TrdMarket(value)
	return nil
}

func (TrdMarket) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0949ead9262a0b33, []int{1}
}

//可交易证券所属市场，目前主要是区分A股的沪市和深市，香港和美国暂不需要细分
type TrdSecMarket int32

const (
	TrdSecMarket_TrdSecMarket_Unknown TrdSecMarket = 0
	TrdSecMarket_TrdSecMarket_HK      TrdSecMarket = 1
	TrdSecMarket_TrdSecMarket_US      TrdSecMarket = 2
	TrdSecMarket_TrdSecMarket_CN_SH   TrdSecMarket = 31
	TrdSecMarket_TrdSecMarket_CN_SZ   TrdSecMarket = 32
)

var TrdSecMarket_name = map[int32]string{
	0:  "TrdSecMarket_Unknown",
	1:  "TrdSecMarket_HK",
	2:  "TrdSecMarket_US",
	31: "TrdSecMarket_CN_SH",
	32: "TrdSecMarket_CN_SZ",
}

var TrdSecMarket_value = map[string]int32{
	"TrdSecMarket_Unknown": 0,
	"TrdSecMarket_HK":      1,
	"TrdSecMarket_US":      2,
	"TrdSecMarket_CN_SH":   31,
	"TrdSecMarket_CN_SZ":   32,
}

func (x TrdSecMarket) Enum() *TrdSecMarket {
	p := new(TrdSecMarket)
	*p = x
	return p
}

func (x TrdSecMarket) String() string {
	return proto.EnumName(TrdSecMarket_name, int32(x))
}

func (x *TrdSecMarket) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TrdSecMarket_value, data, "TrdSecMarket")
	if err != nil {
		return err
	}
	*x = TrdSecMarket(value)
	return nil
}

func (TrdSecMarket) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0949ead9262a0b33, []int{2}
}

//交易方向
type TrdSide int32

const (
	//客户端下单只传Buy或Sell即可，SellShort是美股订单时服务器返回有此方向，BuyBack目前不存在，但也不排除服务器会传
	TrdSide_TrdSide_Unknown   TrdSide = 0
	TrdSide_TrdSide_Buy       TrdSide = 1
	TrdSide_TrdSide_Sell      TrdSide = 2
	TrdSide_TrdSide_SellShort TrdSide = 3
	TrdSide_TrdSide_BuyBack   TrdSide = 4
)

var TrdSide_name = map[int32]string{
	0: "TrdSide_Unknown",
	1: "TrdSide_Buy",
	2: "TrdSide_Sell",
	3: "TrdSide_SellShort",
	4: "TrdSide_BuyBack",
}

var TrdSide_value = map[string]int32{
	"TrdSide_Unknown":   0,
	"TrdSide_Buy":       1,
	"TrdSide_Sell":      2,
	"TrdSide_SellShort": 3,
	"TrdSide_BuyBack":   4,
}

func (x TrdSide) Enum() *TrdSide {
	p := new(TrdSide)
	*p = x
	return p
}

func (x TrdSide) String() string {
	return proto.EnumName(TrdSide_name, int32(x))
}

func (x *TrdSide) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TrdSide_value, data, "TrdSide")
	if err != nil {
		return err
	}
	*x = TrdSide(value)
	return nil
}

func (TrdSide) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0949ead9262a0b33, []int{3}
}

//订单类型
type OrderType int32

const (
	OrderType_OrderType_Unknown          OrderType = 0
	OrderType_OrderType_Normal           OrderType = 1
	OrderType_OrderType_Market           OrderType = 2
	OrderType_OrderType_AbsoluteLimit    OrderType = 5
	OrderType_OrderType_Auction          OrderType = 6
	OrderType_OrderType_AuctionLimit     OrderType = 7
	OrderType_OrderType_SpecialLimit     OrderType = 8
	OrderType_OrderType_SpecialLimit_All OrderType = 9
)

var OrderType_name = map[int32]string{
	0: "OrderType_Unknown",
	1: "OrderType_Normal",
	2: "OrderType_Market",
	5: "OrderType_AbsoluteLimit",
	6: "OrderType_Auction",
	7: "OrderType_AuctionLimit",
	8: "OrderType_SpecialLimit",
	9: "OrderType_SpecialLimit_All",
}

var OrderType_value = map[string]int32{
	"OrderType_Unknown":          0,
	"OrderType_Normal":           1,
	"OrderType_Market":           2,
	"OrderType_AbsoluteLimit":    5,
	"OrderType_Auction":          6,
	"OrderType_AuctionLimit":     7,
	"OrderType_SpecialLimit":     8,
	"OrderType_SpecialLimit_All": 9,
}

func (x OrderType) Enum() *OrderType {
	p := new(OrderType)
	*p = x
	return p
}

func (x OrderType) String() string {
	return proto.EnumName(OrderType_name, int32(x))
}

func (x *OrderType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(OrderType_value, data, "OrderType")
	if err != nil {
		return err
	}
	*x = OrderType(value)
	return nil
}

func (OrderType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0949ead9262a0b33, []int{4}
}

//订单状态
type OrderStatus int32

const (
	OrderStatus_OrderStatus_Unsubmitted     OrderStatus = 0
	OrderStatus_OrderStatus_Unknown         OrderStatus = -1
	OrderStatus_OrderStatus_WaitingSubmit   OrderStatus = 1
	OrderStatus_OrderStatus_Submitting      OrderStatus = 2
	OrderStatus_OrderStatus_SubmitFailed    OrderStatus = 3
	OrderStatus_OrderStatus_TimeOut         OrderStatus = 4
	OrderStatus_OrderStatus_Submitted       OrderStatus = 5
	OrderStatus_OrderStatus_Filled_Part     OrderStatus = 10
	OrderStatus_OrderStatus_Filled_All      OrderStatus = 11
	OrderStatus_OrderStatus_Cancelling_Part OrderStatus = 12
	OrderStatus_OrderStatus_Cancelling_All  OrderStatus = 13
	OrderStatus_OrderStatus_Cancelled_Part  OrderStatus = 14
	OrderStatus_OrderStatus_Cancelled_All   OrderStatus = 15
	OrderStatus_OrderStatus_Failed          OrderStatus = 21
	OrderStatus_OrderStatus_Disabled        OrderStatus = 22
	OrderStatus_OrderStatus_Deleted         OrderStatus = 23
	OrderStatus_OrderStatus_FillCancelled   OrderStatus = 24
)

var OrderStatus_name = map[int32]string{
	0:  "OrderStatus_Unsubmitted",
	-1: "OrderStatus_Unknown",
	1:  "OrderStatus_WaitingSubmit",
	2:  "OrderStatus_Submitting",
	3:  "OrderStatus_SubmitFailed",
	4:  "OrderStatus_TimeOut",
	5:  "OrderStatus_Submitted",
	10: "OrderStatus_Filled_Part",
	11: "OrderStatus_Filled_All",
	12: "OrderStatus_Cancelling_Part",
	13: "OrderStatus_Cancelling_All",
	14: "OrderStatus_Cancelled_Part",
	15: "OrderStatus_Cancelled_All",
	21: "OrderStatus_Failed",
	22: "OrderStatus_Disabled",
	23: "OrderStatus_Deleted",
	24: "OrderStatus_FillCancelled",
}

var OrderStatus_value = map[string]int32{
	"OrderStatus_Unsubmitted":     0,
	"OrderStatus_Unknown":         -1,
	"OrderStatus_WaitingSubmit":   1,
	"OrderStatus_Submitting":      2,
	"OrderStatus_SubmitFailed":    3,
	"OrderStatus_TimeOut":         4,
	"OrderStatus_Submitted":       5,
	"OrderStatus_Filled_Part":     10,
	"OrderStatus_Filled_All":      11,
	"OrderStatus_Cancelling_Part": 12,
	"OrderStatus_Cancelling_All":  13,
	"OrderStatus_Cancelled_Part":  14,
	"OrderStatus_Cancelled_All":   15,
	"OrderStatus_Failed":          21,
	"OrderStatus_Disabled":        22,
	"OrderStatus_Deleted":         23,
	"OrderStatus_FillCancelled":   24,
}

func (x OrderStatus) Enum() *OrderStatus {
	p := new(OrderStatus)
	*p = x
	return p
}

func (x OrderStatus) String() string {
	return proto.EnumName(OrderStatus_name, int32(x))
}

func (x *OrderStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(OrderStatus_value, data, "OrderStatus")
	if err != nil {
		return err
	}
	*x = OrderStatus(value)
	return nil
}

func (OrderStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0949ead9262a0b33, []int{5}
}

//一笔成交的状态
type OrderFillStatus int32

const (
	OrderFillStatus_OrderFillStatus_OK        OrderFillStatus = 0
	OrderFillStatus_OrderFillStatus_Cancelled OrderFillStatus = 1
	OrderFillStatus_OrderFillStatus_Changed   OrderFillStatus = 2
)

var OrderFillStatus_name = map[int32]string{
	0: "OrderFillStatus_OK",
	1: "OrderFillStatus_Cancelled",
	2: "OrderFillStatus_Changed",
}

var OrderFillStatus_value = map[string]int32{
	"OrderFillStatus_OK":        0,
	"OrderFillStatus_Cancelled": 1,
	"OrderFillStatus_Changed":   2,
}

func (x OrderFillStatus) Enum() *OrderFillStatus {
	p := new(OrderFillStatus)
	*p = x
	return p
}

func (x OrderFillStatus) String() string {
	return proto.EnumName(OrderFillStatus_name, int32(x))
}

func (x *OrderFillStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(OrderFillStatus_value, data, "OrderFillStatus")
	if err != nil {
		return err
	}
	*x = OrderFillStatus(value)
	return nil
}

func (OrderFillStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0949ead9262a0b33, []int{6}
}

//持仓方向类型
type PositionSide int32

const (
	PositionSide_PositionSide_Long    PositionSide = 0
	PositionSide_PositionSide_Unknown PositionSide = -1
	PositionSide_PositionSide_Short   PositionSide = 1
)

var PositionSide_name = map[int32]string{
	0:  "PositionSide_Long",
	-1: "PositionSide_Unknown",
	1:  "PositionSide_Short",
}

var PositionSide_value = map[string]int32{
	"PositionSide_Long":    0,
	"PositionSide_Unknown": -1,
	"PositionSide_Short":   1,
}

func (x PositionSide) Enum() *PositionSide {
	p := new(PositionSide)
	*p = x
	return p
}

func (x PositionSide) String() string {
	return proto.EnumName(PositionSide_name, int32(x))
}

func (x *PositionSide) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PositionSide_value, data, "PositionSide")
	if err != nil {
		return err
	}
	*x = PositionSide(value)
	return nil
}

func (PositionSide) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0949ead9262a0b33, []int{7}
}

//修改订单的操作类型
type ModifyOrderOp int32

const (
	//港股支持全部操作，美股目前仅支持ModifyOrderOp_Normal和ModifyOrderOp_Cancel
	ModifyOrderOp_ModifyOrderOp_Unknown ModifyOrderOp = 0
	ModifyOrderOp_ModifyOrderOp_Normal  ModifyOrderOp = 1
	ModifyOrderOp_ModifyOrderOp_Cancel  ModifyOrderOp = 2
	ModifyOrderOp_ModifyOrderOp_Disable ModifyOrderOp = 3
	ModifyOrderOp_ModifyOrderOp_Enable  ModifyOrderOp = 4
	ModifyOrderOp_ModifyOrderOp_Delete  ModifyOrderOp = 5
)

var ModifyOrderOp_name = map[int32]string{
	0: "ModifyOrderOp_Unknown",
	1: "ModifyOrderOp_Normal",
	2: "ModifyOrderOp_Cancel",
	3: "ModifyOrderOp_Disable",
	4: "ModifyOrderOp_Enable",
	5: "ModifyOrderOp_Delete",
}

var ModifyOrderOp_value = map[string]int32{
	"ModifyOrderOp_Unknown": 0,
	"ModifyOrderOp_Normal":  1,
	"ModifyOrderOp_Cancel":  2,
	"ModifyOrderOp_Disable": 3,
	"ModifyOrderOp_Enable":  4,
	"ModifyOrderOp_Delete":  5,
}

func (x ModifyOrderOp) Enum() *ModifyOrderOp {
	p := new(ModifyOrderOp)
	*p = x
	return p
}

func (x ModifyOrderOp) String() string {
	return proto.EnumName(ModifyOrderOp_name, int32(x))
}

func (x *ModifyOrderOp) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ModifyOrderOp_value, data, "ModifyOrderOp")
	if err != nil {
		return err
	}
	*x = ModifyOrderOp(value)
	return nil
}

func (ModifyOrderOp) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0949ead9262a0b33, []int{8}
}

//交易账户类型
type TrdAccType int32

const (
	TrdAccType_TrdAccType_Unknown TrdAccType = 0
	TrdAccType_TrdAccType_Cash    TrdAccType = 1
	TrdAccType_TrdAccType_Margin  TrdAccType = 2
)

var TrdAccType_name = map[int32]string{
	0: "TrdAccType_Unknown",
	1: "TrdAccType_Cash",
	2: "TrdAccType_Margin",
}

var TrdAccType_value = map[string]int32{
	"TrdAccType_Unknown": 0,
	"TrdAccType_Cash":    1,
	"TrdAccType_Margin":  2,
}

func (x TrdAccType) Enum() *TrdAccType {
	p := new(TrdAccType)
	*p = x
	return p
}

func (x TrdAccType) String() string {
	return proto.EnumName(TrdAccType_name, int32(x))
}

func (x *TrdAccType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TrdAccType_value, data, "TrdAccType")
	if err != nil {
		return err
	}
	*x = TrdAccType(value)
	return nil
}

func (TrdAccType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0949ead9262a0b33, []int{9}
}

//货币种类
type Currency int32

const (
	Currency_Currency_Unknown Currency = 0
	Currency_Currency_HKD     Currency = 1
	Currency_Currency_USD     Currency = 2
	Currency_Currency_CNH     Currency = 3
)

var Currency_name = map[int32]string{
	0: "Currency_Unknown",
	1: "Currency_HKD",
	2: "Currency_USD",
	3: "Currency_CNH",
}

var Currency_value = map[string]int32{
	"Currency_Unknown": 0,
	"Currency_HKD":     1,
	"Currency_USD":     2,
	"Currency_CNH":     3,
}

func (x Currency) Enum() *Currency {
	p := new(Currency)
	*p = x
	return p
}

func (x Currency) String() string {
	return proto.EnumName(Currency_name, int32(x))
}

func (x *Currency) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Currency_value, data, "Currency")
	if err != nil {
		return err
	}
	*x = Currency(value)
	return nil
}

func (Currency) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0949ead9262a0b33, []int{10}
}

//账户风险控制等级
type CltRiskLevel int32

const (
	CltRiskLevel_CltRiskLevel_Unknown      CltRiskLevel = -1
	CltRiskLevel_CltRiskLevel_Safe         CltRiskLevel = 0
	CltRiskLevel_CltRiskLevel_Warning      CltRiskLevel = 1
	CltRiskLevel_CltRiskLevel_Danger       CltRiskLevel = 2
	CltRiskLevel_CltRiskLevel_AbsoluteSafe CltRiskLevel = 3
	CltRiskLevel_CltRiskLevel_OptDanger    CltRiskLevel = 4
)

var CltRiskLevel_name = map[int32]string{
	-1: "CltRiskLevel_Unknown",
	0:  "CltRiskLevel_Safe",
	1:  "CltRiskLevel_Warning",
	2:  "CltRiskLevel_Danger",
	3:  "CltRiskLevel_AbsoluteSafe",
	4:  "CltRiskLevel_OptDanger",
}

var CltRiskLevel_value = map[string]int32{
	"CltRiskLevel_Unknown":      -1,
	"CltRiskLevel_Safe":         0,
	"CltRiskLevel_Warning":      1,
	"CltRiskLevel_Danger":       2,
	"CltRiskLevel_AbsoluteSafe": 3,
	"CltRiskLevel_OptDanger":    4,
}

func (x CltRiskLevel) Enum() *CltRiskLevel {
	p := new(CltRiskLevel)
	*p = x
	return p
}

func (x CltRiskLevel) String() string {
	return proto.EnumName(CltRiskLevel_name, int32(x))
}

func (x *CltRiskLevel) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CltRiskLevel_value, data, "CltRiskLevel")
	if err != nil {
		return err
	}
	*x = CltRiskLevel(value)
	return nil
}

func (CltRiskLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0949ead9262a0b33, []int{11}
}

//账户现金信息，目前仅用于期货账户
type AccCashInfo struct {
	Currency         int32   `protobuf:"varint,1,opt,name=currency" json:"currency"`
	Cash             float64 `protobuf:"fixed64,2,opt,name=cash" json:"cash"`
	AvailableBalance float64 `protobuf:"fixed64,3,opt,name=availableBalance" json:"availableBalance"`
}

func (m *AccCashInfo) Reset()         { *m = AccCashInfo{} }
func (m *AccCashInfo) String() string { return proto.CompactTextString(m) }
func (*AccCashInfo) ProtoMessage()    {}
func (*AccCashInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0949ead9262a0b33, []int{0}
}
func (m *AccCashInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccCashInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccCashInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccCashInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccCashInfo.Merge(m, src)
}
func (m *AccCashInfo) XXX_Size() int {
	return m.Size()
}
func (m *AccCashInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AccCashInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AccCashInfo proto.InternalMessageInfo

func (m *AccCashInfo) GetCurrency() int32 {
	if m != nil {
		return m.Currency
	}
	return 0
}

func (m *AccCashInfo) GetCash() float64 {
	if m != nil {
		return m.Cash
	}
	return 0
}

func (m *AccCashInfo) GetAvailableBalance() float64 {
	if m != nil {
		return m.AvailableBalance
	}
	return 0
}

//交易协议公共参数头
type TrdHeader struct {
	TrdEnv    int32  `protobuf:"varint,1,req,name=trdEnv" json:"trdEnv"`
	AccID     uint64 `protobuf:"varint,2,req,name=accID" json:"accID"`
	TrdMarket int32  `protobuf:"varint,3,req,name=trdMarket" json:"trdMarket"`
}

func (m *TrdHeader) Reset()         { *m = TrdHeader{} }
func (m *TrdHeader) String() string { return proto.CompactTextString(m) }
func (*TrdHeader) ProtoMessage()    {}
func (*TrdHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_0949ead9262a0b33, []int{1}
}
func (m *TrdHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrdHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrdHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TrdHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrdHeader.Merge(m, src)
}
func (m *TrdHeader) XXX_Size() int {
	return m.Size()
}
func (m *TrdHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_TrdHeader.DiscardUnknown(m)
}

var xxx_messageInfo_TrdHeader proto.InternalMessageInfo

func (m *TrdHeader) GetTrdEnv() int32 {
	if m != nil {
		return m.TrdEnv
	}
	return 0
}

func (m *TrdHeader) GetAccID() uint64 {
	if m != nil {
		return m.AccID
	}
	return 0
}

func (m *TrdHeader) GetTrdMarket() int32 {
	if m != nil {
		return m.TrdMarket
	}
	return 0
}

//交易业务账户结构
type TrdAcc struct {
	TrdEnv            int32   `protobuf:"varint,1,req,name=trdEnv" json:"trdEnv"`
	AccID             uint64  `protobuf:"varint,2,req,name=accID" json:"accID"`
	TrdMarketAuthList []int32 `protobuf:"varint,3,rep,name=trdMarketAuthList" json:"trdMarketAuthList,omitempty"`
	AccType           int32   `protobuf:"varint,4,opt,name=accType" json:"accType"`
	CardNum           string  `protobuf:"bytes,5,opt,name=cardNum" json:"cardNum"`
}

func (m *TrdAcc) Reset()         { *m = TrdAcc{} }
func (m *TrdAcc) String() string { return proto.CompactTextString(m) }
func (*TrdAcc) ProtoMessage()    {}
func (*TrdAcc) Descriptor() ([]byte, []int) {
	return fileDescriptor_0949ead9262a0b33, []int{2}
}
func (m *TrdAcc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrdAcc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrdAcc.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TrdAcc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrdAcc.Merge(m, src)
}
func (m *TrdAcc) XXX_Size() int {
	return m.Size()
}
func (m *TrdAcc) XXX_DiscardUnknown() {
	xxx_messageInfo_TrdAcc.DiscardUnknown(m)
}

var xxx_messageInfo_TrdAcc proto.InternalMessageInfo

func (m *TrdAcc) GetTrdEnv() int32 {
	if m != nil {
		return m.TrdEnv
	}
	return 0
}

func (m *TrdAcc) GetAccID() uint64 {
	if m != nil {
		return m.AccID
	}
	return 0
}

func (m *TrdAcc) GetTrdMarketAuthList() []int32 {
	if m != nil {
		return m.TrdMarketAuthList
	}
	return nil
}

func (m *TrdAcc) GetAccType() int32 {
	if m != nil {
		return m.AccType
	}
	return 0
}

func (m *TrdAcc) GetCardNum() string {
	if m != nil {
		return m.CardNum
	}
	return ""
}

//账户资金结构
type Funds struct {
	Power             float64        `protobuf:"fixed64,1,req,name=power" json:"power"`
	TotalAssets       float64        `protobuf:"fixed64,2,req,name=totalAssets" json:"totalAssets"`
	Cash              float64        `protobuf:"fixed64,3,req,name=cash" json:"cash"`
	MarketVal         float64        `protobuf:"fixed64,4,req,name=marketVal" json:"marketVal"`
	FrozenCash        float64        `protobuf:"fixed64,5,req,name=frozenCash" json:"frozenCash"`
	DebtCash          float64        `protobuf:"fixed64,6,req,name=debtCash" json:"debtCash"`
	AvlWithdrawalCash float64        `protobuf:"fixed64,7,req,name=avlWithdrawalCash" json:"avlWithdrawalCash"`
	Currency          int32          `protobuf:"varint,8,opt,name=currency" json:"currency"`
	AvailableFunds    float64        `protobuf:"fixed64,9,opt,name=availableFunds" json:"availableFunds"`
	UnrealizedPL      float64        `protobuf:"fixed64,10,opt,name=unrealizedPL" json:"unrealizedPL"`
	RealizedPL        float64        `protobuf:"fixed64,11,opt,name=realizedPL" json:"realizedPL"`
	RiskLevel         int32          `protobuf:"varint,12,opt,name=riskLevel" json:"riskLevel"`
	InitialMargin     float64        `protobuf:"fixed64,13,opt,name=initialMargin" json:"initialMargin"`
	MaintenanceMargin float64        `protobuf:"fixed64,14,opt,name=maintenanceMargin" json:"maintenanceMargin"`
	CashInfoList      []*AccCashInfo `protobuf:"bytes,15,rep,name=cashInfoList" json:"cashInfoList,omitempty"`
}

func (m *Funds) Reset()         { *m = Funds{} }
func (m *Funds) String() string { return proto.CompactTextString(m) }
func (*Funds) ProtoMessage()    {}
func (*Funds) Descriptor() ([]byte, []int) {
	return fileDescriptor_0949ead9262a0b33, []int{3}
}
func (m *Funds) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Funds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Funds.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Funds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Funds.Merge(m, src)
}
func (m *Funds) XXX_Size() int {
	return m.Size()
}
func (m *Funds) XXX_DiscardUnknown() {
	xxx_messageInfo_Funds.DiscardUnknown(m)
}

var xxx_messageInfo_Funds proto.InternalMessageInfo

func (m *Funds) GetPower() float64 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (m *Funds) GetTotalAssets() float64 {
	if m != nil {
		return m.TotalAssets
	}
	return 0
}

func (m *Funds) GetCash() float64 {
	if m != nil {
		return m.Cash
	}
	return 0
}

func (m *Funds) GetMarketVal() float64 {
	if m != nil {
		return m.MarketVal
	}
	return 0
}

func (m *Funds) GetFrozenCash() float64 {
	if m != nil {
		return m.FrozenCash
	}
	return 0
}

func (m *Funds) GetDebtCash() float64 {
	if m != nil {
		return m.DebtCash
	}
	return 0
}

func (m *Funds) GetAvlWithdrawalCash() float64 {
	if m != nil {
		return m.AvlWithdrawalCash
	}
	return 0
}

func (m *Funds) GetCurrency() int32 {
	if m != nil {
		return m.Currency
	}
	return 0
}

func (m *Funds) GetAvailableFunds() float64 {
	if m != nil {
		return m.AvailableFunds
	}
	return 0
}

func (m *Funds) GetUnrealizedPL() float64 {
	if m != nil {
		return m.UnrealizedPL
	}
	return 0
}

func (m *Funds) GetRealizedPL() float64 {
	if m != nil {
		return m.RealizedPL
	}
	return 0
}

func (m *Funds) GetRiskLevel() int32 {
	if m != nil {
		return m.RiskLevel
	}
	return 0
}

func (m *Funds) GetInitialMargin() float64 {
	if m != nil {
		return m.InitialMargin
	}
	return 0
}

func (m *Funds) GetMaintenanceMargin() float64 {
	if m != nil {
		return m.MaintenanceMargin
	}
	return 0
}

func (m *Funds) GetCashInfoList() []*AccCashInfo {
	if m != nil {
		return m.CashInfoList
	}
	return nil
}

//账户持仓结构
type Position struct {
	PositionID   uint64  `protobuf:"varint,1,req,name=positionID" json:"positionID"`
	PositionSide int32   `protobuf:"varint,2,req,name=positionSide" json:"positionSide"`
	Code         string  `protobuf:"bytes,3,req,name=code" json:"code"`
	Name         string  `protobuf:"bytes,4,req,name=name" json:"name"`
	Qty          float64 `protobuf:"fixed64,5,req,name=qty" json:"qty"`
	CanSellQty   float64 `protobuf:"fixed64,6,req,name=canSellQty" json:"canSellQty"`
	Price        float64 `protobuf:"fixed64,7,req,name=price" json:"price"`
	CostPrice    float64 `protobuf:"fixed64,8,opt,name=costPrice" json:"costPrice"`
	Val          float64 `protobuf:"fixed64,9,req,name=val" json:"val"`
	PlVal        float64 `protobuf:"fixed64,10,req,name=plVal" json:"plVal"`
	PlRatio      float64 `protobuf:"fixed64,11,opt,name=plRatio" json:"plRatio"`
	SecMarket    int32   `protobuf:"varint,12,opt,name=secMarket" json:"secMarket"`
	//以下是此持仓今日统计
	TdPlVal      float64 `protobuf:"fixed64,21,opt,name=td_plVal,json=tdPlVal" json:"td_plVal"`
	TdTrdVal     float64 `protobuf:"fixed64,22,opt,name=td_trdVal,json=tdTrdVal" json:"td_trdVal"`
	TdBuyVal     float64 `protobuf:"fixed64,23,opt,name=td_buyVal,json=tdBuyVal" json:"td_buyVal"`
	TdBuyQty     float64 `protobuf:"fixed64,24,opt,name=td_buyQty,json=tdBuyQty" json:"td_buyQty"`
	TdSellVal    float64 `protobuf:"fixed64,25,opt,name=td_sellVal,json=tdSellVal" json:"td_sellVal"`
	TdSellQty    float64 `protobuf:"fixed64,26,opt,name=td_sellQty,json=tdSellQty" json:"td_sellQty"`
	UnrealizedPL float64 `protobuf:"fixed64,28,opt,name=unrealizedPL" json:"unrealizedPL"`
	RealizedPL   float64 `protobuf:"fixed64,29,opt,name=realizedPL" json:"realizedPL"`
}

func (m *Position) Reset()         { *m = Position{} }
func (m *Position) String() string { return proto.CompactTextString(m) }
func (*Position) ProtoMessage()    {}
func (*Position) Descriptor() ([]byte, []int) {
	return fileDescriptor_0949ead9262a0b33, []int{4}
}
func (m *Position) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Position) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Position.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Position) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Position.Merge(m, src)
}
func (m *Position) XXX_Size() int {
	return m.Size()
}
func (m *Position) XXX_DiscardUnknown() {
	xxx_messageInfo_Position.DiscardUnknown(m)
}

var xxx_messageInfo_Position proto.InternalMessageInfo

func (m *Position) GetPositionID() uint64 {
	if m != nil {
		return m.PositionID
	}
	return 0
}

func (m *Position) GetPositionSide() int32 {
	if m != nil {
		return m.PositionSide
	}
	return 0
}

func (m *Position) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *Position) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Position) GetQty() float64 {
	if m != nil {
		return m.Qty
	}
	return 0
}

func (m *Position) GetCanSellQty() float64 {
	if m != nil {
		return m.CanSellQty
	}
	return 0
}

func (m *Position) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Position) GetCostPrice() float64 {
	if m != nil {
		return m.CostPrice
	}
	return 0
}

func (m *Position) GetVal() float64 {
	if m != nil {
		return m.Val
	}
	return 0
}

func (m *Position) GetPlVal() float64 {
	if m != nil {
		return m.PlVal
	}
	return 0
}

func (m *Position) GetPlRatio() float64 {
	if m != nil {
		return m.PlRatio
	}
	return 0
}

func (m *Position) GetSecMarket() int32 {
	if m != nil {
		return m.SecMarket
	}
	return 0
}

func (m *Position) GetTdPlVal() float64 {
	if m != nil {
		return m.TdPlVal
	}
	return 0
}

func (m *Position) GetTdTrdVal() float64 {
	if m != nil {
		return m.TdTrdVal
	}
	return 0
}

func (m *Position) GetTdBuyVal() float64 {
	if m != nil {
		return m.TdBuyVal
	}
	return 0
}

func (m *Position) GetTdBuyQty() float64 {
	if m != nil {
		return m.TdBuyQty
	}
	return 0
}

func (m *Position) GetTdSellVal() float64 {
	if m != nil {
		return m.TdSellVal
	}
	return 0
}

func (m *Position) GetTdSellQty() float64 {
	if m != nil {
		return m.TdSellQty
	}
	return 0
}

func (m *Position) GetUnrealizedPL() float64 {
	if m != nil {
		return m.UnrealizedPL
	}
	return 0
}

func (m *Position) GetRealizedPL() float64 {
	if m != nil {
		return m.RealizedPL
	}
	return 0
}

//订单结构
type Order struct {
	TrdSide         int32   `protobuf:"varint,1,req,name=trdSide" json:"trdSide"`
	OrderType       int32   `protobuf:"varint,2,req,name=orderType" json:"orderType"`
	OrderStatus     int32   `protobuf:"varint,3,req,name=orderStatus" json:"orderStatus"`
	OrderID         uint64  `protobuf:"varint,4,req,name=orderID" json:"orderID"`
	OrderIDEx       string  `protobuf:"bytes,5,req,name=orderIDEx" json:"orderIDEx"`
	Code            string  `protobuf:"bytes,6,req,name=code" json:"code"`
	Name            string  `protobuf:"bytes,7,req,name=name" json:"name"`
	Qty             float64 `protobuf:"fixed64,8,req,name=qty" json:"qty"`
	Price           float64 `protobuf:"fixed64,9,opt,name=price" json:"price"`
	CreateTime      string  `protobuf:"bytes,10,req,name=createTime" json:"createTime"`
	UpdateTime      string  `protobuf:"bytes,11,req,name=updateTime" json:"updateTime"`
	FillQty         float64 `protobuf:"fixed64,12,opt,name=fillQty" json:"fillQty"`
	FillAvgPrice    float64 `protobuf:"fixed64,13,opt,name=fillAvgPrice" json:"fillAvgPrice"`
	LastErrMsg      string  `protobuf:"bytes,14,opt,name=lastErrMsg" json:"lastErrMsg"`
	SecMarket       int32   `protobuf:"varint,15,opt,name=secMarket" json:"secMarket"`
	CreateTimestamp float64 `protobuf:"fixed64,16,opt,name=createTimestamp" json:"createTimestamp"`
	UpdateTimestamp float64 `protobuf:"fixed64,17,opt,name=updateTimestamp" json:"updateTimestamp"`
	Remark          string  `protobuf:"bytes,18,opt,name=remark" json:"remark"`
}

func (m *Order) Reset()         { *m = Order{} }
func (m *Order) String() string { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()    {}
func (*Order) Descriptor() ([]byte, []int) {
	return fileDescriptor_0949ead9262a0b33, []int{5}
}
func (m *Order) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Order) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Order.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Order) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Order.Merge(m, src)
}
func (m *Order) XXX_Size() int {
	return m.Size()
}
func (m *Order) XXX_DiscardUnknown() {
	xxx_messageInfo_Order.DiscardUnknown(m)
}

var xxx_messageInfo_Order proto.InternalMessageInfo

func (m *Order) GetTrdSide() int32 {
	if m != nil {
		return m.TrdSide
	}
	return 0
}

func (m *Order) GetOrderType() int32 {
	if m != nil {
		return m.OrderType
	}
	return 0
}

func (m *Order) GetOrderStatus() int32 {
	if m != nil {
		return m.OrderStatus
	}
	return 0
}

func (m *Order) GetOrderID() uint64 {
	if m != nil {
		return m.OrderID
	}
	return 0
}

func (m *Order) GetOrderIDEx() string {
	if m != nil {
		return m.OrderIDEx
	}
	return ""
}

func (m *Order) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *Order) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Order) GetQty() float64 {
	if m != nil {
		return m.Qty
	}
	return 0
}

func (m *Order) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Order) GetCreateTime() string {
	if m != nil {
		return m.CreateTime
	}
	return ""
}

func (m *Order) GetUpdateTime() string {
	if m != nil {
		return m.UpdateTime
	}
	return ""
}

func (m *Order) GetFillQty() float64 {
	if m != nil {
		return m.FillQty
	}
	return 0
}

func (m *Order) GetFillAvgPrice() float64 {
	if m != nil {
		return m.FillAvgPrice
	}
	return 0
}

func (m *Order) GetLastErrMsg() string {
	if m != nil {
		return m.LastErrMsg
	}
	return ""
}

func (m *Order) GetSecMarket() int32 {
	if m != nil {
		return m.SecMarket
	}
	return 0
}

func (m *Order) GetCreateTimestamp() float64 {
	if m != nil {
		return m.CreateTimestamp
	}
	return 0
}

func (m *Order) GetUpdateTimestamp() float64 {
	if m != nil {
		return m.UpdateTimestamp
	}
	return 0
}

func (m *Order) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

//成交结构
type OrderFill struct {
	TrdSide           int32   `protobuf:"varint,1,req,name=trdSide" json:"trdSide"`
	FillID            uint64  `protobuf:"varint,2,req,name=fillID" json:"fillID"`
	FillIDEx          string  `protobuf:"bytes,3,req,name=fillIDEx" json:"fillIDEx"`
	OrderID           uint64  `protobuf:"varint,4,opt,name=orderID" json:"orderID"`
	OrderIDEx         string  `protobuf:"bytes,5,opt,name=orderIDEx" json:"orderIDEx"`
	Code              string  `protobuf:"bytes,6,req,name=code" json:"code"`
	Name              string  `protobuf:"bytes,7,req,name=name" json:"name"`
	Qty               float64 `protobuf:"fixed64,8,req,name=qty" json:"qty"`
	Price             float64 `protobuf:"fixed64,9,req,name=price" json:"price"`
	CreateTime        string  `protobuf:"bytes,10,req,name=createTime" json:"createTime"`
	CounterBrokerID   int32   `protobuf:"varint,11,opt,name=counterBrokerID" json:"counterBrokerID"`
	CounterBrokerName string  `protobuf:"bytes,12,opt,name=counterBrokerName" json:"counterBrokerName"`
	SecMarket         int32   `protobuf:"varint,13,opt,name=secMarket" json:"secMarket"`
	CreateTimestamp   float64 `protobuf:"fixed64,14,opt,name=createTimestamp" json:"createTimestamp"`
	UpdateTimestamp   float64 `protobuf:"fixed64,15,opt,name=updateTimestamp" json:"updateTimestamp"`
	Status            int32   `protobuf:"varint,16,opt,name=status" json:"status"`
}

func (m *OrderFill) Reset()         { *m = OrderFill{} }
func (m *OrderFill) String() string { return proto.CompactTextString(m) }
func (*OrderFill) ProtoMessage()    {}
func (*OrderFill) Descriptor() ([]byte, []int) {
	return fileDescriptor_0949ead9262a0b33, []int{6}
}
func (m *OrderFill) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderFill) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderFill.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderFill) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderFill.Merge(m, src)
}
func (m *OrderFill) XXX_Size() int {
	return m.Size()
}
func (m *OrderFill) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderFill.DiscardUnknown(m)
}

var xxx_messageInfo_OrderFill proto.InternalMessageInfo

func (m *OrderFill) GetTrdSide() int32 {
	if m != nil {
		return m.TrdSide
	}
	return 0
}

func (m *OrderFill) GetFillID() uint64 {
	if m != nil {
		return m.FillID
	}
	return 0
}

func (m *OrderFill) GetFillIDEx() string {
	if m != nil {
		return m.FillIDEx
	}
	return ""
}

func (m *OrderFill) GetOrderID() uint64 {
	if m != nil {
		return m.OrderID
	}
	return 0
}

func (m *OrderFill) GetOrderIDEx() string {
	if m != nil {
		return m.OrderIDEx
	}
	return ""
}

func (m *OrderFill) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *OrderFill) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *OrderFill) GetQty() float64 {
	if m != nil {
		return m.Qty
	}
	return 0
}

func (m *OrderFill) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *OrderFill) GetCreateTime() string {
	if m != nil {
		return m.CreateTime
	}
	return ""
}

func (m *OrderFill) GetCounterBrokerID() int32 {
	if m != nil {
		return m.CounterBrokerID
	}
	return 0
}

func (m *OrderFill) GetCounterBrokerName() string {
	if m != nil {
		return m.CounterBrokerName
	}
	return ""
}

func (m *OrderFill) GetSecMarket() int32 {
	if m != nil {
		return m.SecMarket
	}
	return 0
}

func (m *OrderFill) GetCreateTimestamp() float64 {
	if m != nil {
		return m.CreateTimestamp
	}
	return 0
}

func (m *OrderFill) GetUpdateTimestamp() float64 {
	if m != nil {
		return m.UpdateTimestamp
	}
	return 0
}

func (m *OrderFill) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

//最大可交易数量
type MaxTrdQtys struct {
	//因目前服务器实现的问题，卖空需要先卖掉持仓才能再卖空，是分开两步卖的，买回来同样是逆向两步；而看多的买是可以现金加融资一起一步买的，请注意这个差异
	MaxCashBuy          float64 `protobuf:"fixed64,1,req,name=maxCashBuy" json:"maxCashBuy"`
	MaxCashAndMarginBuy float64 `protobuf:"fixed64,2,opt,name=maxCashAndMarginBuy" json:"maxCashAndMarginBuy"`
	MaxPositionSell     float64 `protobuf:"fixed64,3,req,name=maxPositionSell" json:"maxPositionSell"`
	MaxSellShort        float64 `protobuf:"fixed64,4,opt,name=maxSellShort" json:"maxSellShort"`
	MaxBuyBack          float64 `protobuf:"fixed64,5,opt,name=maxBuyBack" json:"maxBuyBack"`
}

func (m *MaxTrdQtys) Reset()         { *m = MaxTrdQtys{} }
func (m *MaxTrdQtys) String() string { return proto.CompactTextString(m) }
func (*MaxTrdQtys) ProtoMessage()    {}
func (*MaxTrdQtys) Descriptor() ([]byte, []int) {
	return fileDescriptor_0949ead9262a0b33, []int{7}
}
func (m *MaxTrdQtys) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MaxTrdQtys) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MaxTrdQtys.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MaxTrdQtys) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MaxTrdQtys.Merge(m, src)
}
func (m *MaxTrdQtys) XXX_Size() int {
	return m.Size()
}
func (m *MaxTrdQtys) XXX_DiscardUnknown() {
	xxx_messageInfo_MaxTrdQtys.DiscardUnknown(m)
}

var xxx_messageInfo_MaxTrdQtys proto.InternalMessageInfo

func (m *MaxTrdQtys) GetMaxCashBuy() float64 {
	if m != nil {
		return m.MaxCashBuy
	}
	return 0
}

func (m *MaxTrdQtys) GetMaxCashAndMarginBuy() float64 {
	if m != nil {
		return m.MaxCashAndMarginBuy
	}
	return 0
}

func (m *MaxTrdQtys) GetMaxPositionSell() float64 {
	if m != nil {
		return m.MaxPositionSell
	}
	return 0
}

func (m *MaxTrdQtys) GetMaxSellShort() float64 {
	if m != nil {
		return m.MaxSellShort
	}
	return 0
}

func (m *MaxTrdQtys) GetMaxBuyBack() float64 {
	if m != nil {
		return m.MaxBuyBack
	}
	return 0
}

//过滤条件，条件组合是"与"不是"或"，用于获取订单、成交、持仓等时二次过滤
type TrdFilterConditions struct {
	CodeList  []string `protobuf:"bytes,1,rep,name=codeList" json:"codeList,omitempty"`
	IdList    []uint64 `protobuf:"varint,2,rep,name=idList" json:"idList,omitempty"`
	BeginTime string   `protobuf:"bytes,3,opt,name=beginTime" json:"beginTime"`
	EndTime   string   `protobuf:"bytes,4,opt,name=endTime" json:"endTime"`
}

func (m *TrdFilterConditions) Reset()         { *m = TrdFilterConditions{} }
func (m *TrdFilterConditions) String() string { return proto.CompactTextString(m) }
func (*TrdFilterConditions) ProtoMessage()    {}
func (*TrdFilterConditions) Descriptor() ([]byte, []int) {
	return fileDescriptor_0949ead9262a0b33, []int{8}
}
func (m *TrdFilterConditions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrdFilterConditions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrdFilterConditions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TrdFilterConditions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrdFilterConditions.Merge(m, src)
}
func (m *TrdFilterConditions) XXX_Size() int {
	return m.Size()
}
func (m *TrdFilterConditions) XXX_DiscardUnknown() {
	xxx_messageInfo_TrdFilterConditions.DiscardUnknown(m)
}

var xxx_messageInfo_TrdFilterConditions proto.InternalMessageInfo

func (m *TrdFilterConditions) GetCodeList() []string {
	if m != nil {
		return m.CodeList
	}
	return nil
}

func (m *TrdFilterConditions) GetIdList() []uint64 {
	if m != nil {
		return m.IdList
	}
	return nil
}

func (m *TrdFilterConditions) GetBeginTime() string {
	if m != nil {
		return m.BeginTime
	}
	return ""
}

func (m *TrdFilterConditions) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func init() {
	proto.RegisterEnum("Trd_Common.TrdEnv", TrdEnv_name, TrdEnv_value)
	proto.RegisterEnum("Trd_Common.TrdMarket", TrdMarket_name, TrdMarket_value)
	proto.RegisterEnum("Trd_Common.TrdSecMarket", TrdSecMarket_name, TrdSecMarket_value)
	proto.RegisterEnum("Trd_Common.TrdSide", TrdSide_name, TrdSide_value)
	proto.RegisterEnum("Trd_Common.OrderType", OrderType_name, OrderType_value)
	proto.RegisterEnum("Trd_Common.OrderStatus", OrderStatus_name, OrderStatus_value)
	proto.RegisterEnum("Trd_Common.OrderFillStatus", OrderFillStatus_name, OrderFillStatus_value)
	proto.RegisterEnum("Trd_Common.PositionSide", PositionSide_name, PositionSide_value)
	proto.RegisterEnum("Trd_Common.ModifyOrderOp", ModifyOrderOp_name, ModifyOrderOp_value)
	proto.RegisterEnum("Trd_Common.TrdAccType", TrdAccType_name, TrdAccType_value)
	proto.RegisterEnum("Trd_Common.Currency", Currency_name, Currency_value)
	proto.RegisterEnum("Trd_Common.CltRiskLevel", CltRiskLevel_name, CltRiskLevel_value)
	proto.RegisterType((*AccCashInfo)(nil), "Trd_Common.AccCashInfo")
	proto.RegisterType((*TrdHeader)(nil), "Trd_Common.TrdHeader")
	proto.RegisterType((*TrdAcc)(nil), "Trd_Common.TrdAcc")
	proto.RegisterType((*Funds)(nil), "Trd_Common.Funds")
	proto.RegisterType((*Position)(nil), "Trd_Common.Position")
	proto.RegisterType((*Order)(nil), "Trd_Common.Order")
	proto.RegisterType((*OrderFill)(nil), "Trd_Common.OrderFill")
	proto.RegisterType((*MaxTrdQtys)(nil), "Trd_Common.MaxTrdQtys")
	proto.RegisterType((*TrdFilterConditions)(nil), "Trd_Common.TrdFilterConditions")
}

func init() { proto.RegisterFile("Trd_Common.proto", fileDescriptor_0949ead9262a0b33) }

var fileDescriptor_0949ead9262a0b33 = []byte{
	// 1906 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0xcd, 0x6f, 0x23, 0x49,
	0x15, 0x4f, 0xfb, 0x23, 0xb1, 0x5f, 0x9c, 0xa4, 0xd2, 0xf9, 0xea, 0xc9, 0xce, 0x66, 0x3c, 0x06,
	0xa1, 0x60, 0xad, 0x32, 0x68, 0x85, 0xb8, 0x70, 0x4a, 0x9c, 0x44, 0x89, 0x26, 0x5f, 0x1b, 0x67,
	0x76, 0xd0, 0x5e, 0x4c, 0xa5, 0xab, 0xe2, 0x94, 0xd2, 0xee, 0x36, 0xd5, 0xd5, 0x99, 0x78, 0xb9,
	0xc1, 0x19, 0x89, 0x3f, 0x83, 0x0b, 0x12, 0x27, 0xfe, 0x01, 0x2e, 0x7b, 0xdc, 0x23, 0xe2, 0x80,
	0xd0, 0x8c, 0xc4, 0x81, 0xbf, 0x01, 0x04, 0x7a, 0xd5, 0x1f, 0xae, 0xb2, 0x33, 0x9a, 0x01, 0xa4,
	0xf5, 0xa9, 0xeb, 0xf7, 0x7b, 0x5d, 0xef, 0xd5, 0xab, 0xdf, 0x7b, 0x55, 0x6d, 0x20, 0x57, 0x92,
	0xf5, 0x3a, 0xd1, 0x60, 0x10, 0x85, 0x3b, 0x43, 0x19, 0xa9, 0xc8, 0x85, 0x31, 0xb2, 0xd9, 0x30,
	0x99, 0xd6, 0x2f, 0x61, 0x7e, 0xd7, 0xf7, 0x3b, 0x34, 0xbe, 0x3d, 0x0e, 0x6f, 0x22, 0xb7, 0x09,
	0x35, 0x3f, 0x91, 0x92, 0x87, 0xfe, 0xc8, 0x73, 0x9a, 0xce, 0x76, 0x75, 0xaf, 0xf2, 0xcd, 0x5f,
	0x9f, 0xcd, 0x5c, 0x16, 0xa8, 0xeb, 0x41, 0xc5, 0xa7, 0xf1, 0xad, 0x57, 0x6a, 0x3a, 0xdb, 0x4e,
	0xc6, 0x6a, 0xc4, 0xfd, 0x11, 0x10, 0x7a, 0x4f, 0x45, 0x40, 0xaf, 0x03, 0xbe, 0x47, 0x03, 0x1a,
	0xfa, 0xdc, 0x2b, 0x1b, 0x56, 0x53, 0x6c, 0x4b, 0x40, 0xfd, 0x4a, 0xb2, 0x23, 0x4e, 0x19, 0x97,
	0xee, 0x53, 0x98, 0x55, 0x92, 0x1d, 0x84, 0xf7, 0x9e, 0xd3, 0x2c, 0x15, 0x8e, 0x33, 0xcc, 0xdd,
	0x84, 0x2a, 0xf5, 0xfd, 0xe3, 0x7d, 0xaf, 0xd4, 0x2c, 0x6d, 0x57, 0x32, 0x32, 0x85, 0xdc, 0x16,
	0xd4, 0x95, 0x64, 0xa7, 0x54, 0xde, 0x71, 0xe5, 0x95, 0x8d, 0x97, 0xc7, 0x70, 0xeb, 0x0f, 0x0e,
	0xcc, 0x5e, 0x49, 0xb6, 0xeb, 0xfb, 0xff, 0x87, 0xa3, 0xcf, 0x60, 0xb9, 0x98, 0x71, 0x37, 0x51,
	0xb7, 0x27, 0x22, 0x46, 0x87, 0xe5, 0xed, 0xea, 0xe5, 0x34, 0xe1, 0x6e, 0xc1, 0x1c, 0xf5, 0xfd,
	0xab, 0xd1, 0x90, 0x7b, 0x15, 0x23, 0x95, 0x39, 0x88, 0xbc, 0x4f, 0x25, 0x3b, 0x4b, 0x06, 0x5e,
	0xb5, 0xe9, 0x6c, 0xd7, 0x73, 0x3e, 0x03, 0x5b, 0x7f, 0xaf, 0x40, 0xf5, 0x30, 0x09, 0x59, 0x8c,
	0x31, 0x0d, 0xa3, 0x37, 0x5c, 0xea, 0x80, 0xf3, 0x74, 0xa6, 0x90, 0xfb, 0x03, 0x98, 0x57, 0x91,
	0xa2, 0xc1, 0x6e, 0x1c, 0x73, 0x15, 0xeb, 0xa8, 0x73, 0x0b, 0x93, 0x28, 0xf6, 0xad, 0x6c, 0x18,
	0xa4, 0xfb, 0xd6, 0x82, 0xfa, 0x40, 0x47, 0xfe, 0x25, 0x0d, 0xbc, 0x8a, 0x41, 0x8f, 0x61, 0xf7,
	0xfb, 0x00, 0x37, 0x32, 0xfa, 0x9a, 0x87, 0xa8, 0x14, 0xaf, 0x6a, 0x18, 0x19, 0x38, 0xaa, 0x87,
	0xf1, 0x6b, 0xa5, 0x6d, 0x66, 0x0d, 0x9b, 0x02, 0x75, 0x3f, 0x87, 0x65, 0x7a, 0x1f, 0xbc, 0x16,
	0xea, 0x96, 0x49, 0xfa, 0x86, 0x06, 0xda, 0x74, 0xce, 0x30, 0x9d, 0xa6, 0x2d, 0x4d, 0xd6, 0x1e,
	0xd5, 0xe4, 0x67, 0xb0, 0x58, 0x68, 0x4b, 0x67, 0xcc, 0xab, 0x1b, 0xba, 0x9b, 0xe0, 0xdc, 0x6d,
	0x68, 0x24, 0xa1, 0xe4, 0x34, 0x10, 0x5f, 0x73, 0x76, 0x71, 0xe2, 0x81, 0x61, 0x6b, 0x31, 0xb8,
	0x6a, 0xc3, 0x6e, 0xde, 0xb0, 0x33, 0x70, 0xcc, 0x9f, 0x14, 0xf1, 0xdd, 0x09, 0xbf, 0xe7, 0x81,
	0xd7, 0x30, 0x02, 0x1c, 0xc3, 0x6e, 0x1b, 0x16, 0x44, 0x28, 0x94, 0xa0, 0xc1, 0x29, 0x95, 0x7d,
	0x11, 0x7a, 0x0b, 0xc6, 0x64, 0x36, 0x85, 0x39, 0x1a, 0x50, 0x11, 0x2a, 0x1e, 0x62, 0x91, 0x64,
	0xf6, 0x8b, 0x86, 0xfd, 0x34, 0xed, 0xfe, 0x14, 0x1a, 0x7e, 0x56, 0xc3, 0x5a, 0x94, 0x4b, 0xcd,
	0xf2, 0xf6, 0xfc, 0xe7, 0x1b, 0x3b, 0x46, 0x27, 0x30, 0xca, 0xfc, 0xd2, 0x32, 0x6e, 0xfd, 0xae,
	0x0a, 0xb5, 0x8b, 0x28, 0x16, 0x4a, 0x44, 0x21, 0xae, 0x79, 0x98, 0x3d, 0x1f, 0xef, 0x6b, 0xc1,
	0xe5, 0x45, 0x60, 0xe0, 0x98, 0xc3, 0x7c, 0xd4, 0x15, 0x8c, 0x6b, 0xd9, 0xe5, 0xcb, 0xb6, 0x18,
	0xad, 0xbb, 0x88, 0x71, 0xad, 0xbb, 0x7a, 0xa1, 0xbb, 0x28, 0x65, 0x42, 0x3a, 0xe0, 0x5a, 0x72,
	0x05, 0x83, 0x88, 0xbb, 0x0e, 0xe5, 0x5f, 0xa8, 0x91, 0x25, 0x33, 0x04, 0x30, 0x36, 0x9f, 0x86,
	0x5d, 0x1e, 0x04, 0x5f, 0xa8, 0x91, 0xa5, 0x30, 0x03, 0xd7, 0xd5, 0x22, 0x85, 0xcf, 0x2d, 0x5d,
	0xa5, 0x10, 0xee, 0x95, 0x1f, 0xc5, 0xea, 0x42, 0xf3, 0x35, 0x23, 0xa7, 0x63, 0x18, 0xbd, 0xdf,
	0xd3, 0xc0, 0xab, 0x9b, 0xde, 0xef, 0x69, 0xa0, 0xe7, 0x0d, 0xb0, 0x46, 0xc0, 0x9a, 0x17, 0x21,
	0xac, 0xe5, 0x61, 0x70, 0x49, 0x95, 0x88, 0x2c, 0x99, 0xe4, 0x20, 0xfa, 0x8d, 0xb9, 0x9f, 0xb5,
	0x28, 0x4b, 0x23, 0x05, 0xec, 0x3e, 0x83, 0x9a, 0x62, 0xbd, 0xd4, 0xc5, 0x9a, 0x39, 0x89, 0x62,
	0x17, 0xda, 0xc9, 0x73, 0xa8, 0x2b, 0xd6, 0x53, 0x92, 0xa1, 0xc5, 0xba, 0x61, 0x51, 0x53, 0xec,
	0x4a, 0xa3, 0x99, 0xc9, 0x75, 0x32, 0x42, 0x93, 0x0d, 0xdb, 0x64, 0x4f, 0xa3, 0x63, 0x13, 0xcc,
	0xa1, 0x37, 0x65, 0x82, 0x19, 0xfc, 0x1e, 0x80, 0x62, 0xbd, 0x98, 0x07, 0x3a, 0x96, 0x27, 0x66,
	0x9a, 0x14, 0xeb, 0xa6, 0xb0, 0x61, 0x84, 0x13, 0x6d, 0x4e, 0x1b, 0xe1, 0x4c, 0x93, 0xb5, 0xf6,
	0xf4, 0x23, 0x6b, 0xed, 0xd3, 0xc7, 0x6b, 0xad, 0xf5, 0xaf, 0x0a, 0x54, 0xcf, 0x25, 0x1e, 0x17,
	0x5b, 0x30, 0xa7, 0x24, 0xd3, 0xe2, 0x33, 0xdb, 0x78, 0x0e, 0x62, 0xc6, 0x23, 0x34, 0xd4, 0xfd,
	0xd7, 0x94, 0xe7, 0x18, 0xc6, 0xde, 0xa9, 0x07, 0x5d, 0x45, 0x55, 0x12, 0x5b, 0x47, 0x87, 0x49,
	0xa0, 0x2f, 0x3d, 0x3c, 0xde, 0xd7, 0x62, 0xcd, 0x0b, 0x22, 0x07, 0x0b, 0x5f, 0xc7, 0xfb, 0x07,
	0x0f, 0x5a, 0xb5, 0x75, 0xcb, 0x17, 0xc2, 0x45, 0x1d, 0xcc, 0xbe, 0xb7, 0x0e, 0xe6, 0xde, 0x57,
	0x07, 0xb5, 0xc9, 0x3a, 0x28, 0x14, 0x6e, 0xb6, 0xb9, 0x4c, 0xe1, 0x58, 0x23, 0x92, 0x53, 0xc5,
	0xaf, 0xc4, 0x80, 0x6b, 0xa9, 0xd6, 0x8b, 0x1a, 0x29, 0x70, 0xb4, 0x4a, 0x86, 0x2c, 0xb7, 0x9a,
	0x37, 0xad, 0xc6, 0x38, 0xae, 0xfb, 0x46, 0xa4, 0xfb, 0xdb, 0x30, 0x05, 0x99, 0x81, 0xb8, 0xbb,
	0xf8, 0xb8, 0x7b, 0xdf, 0x4f, 0x0b, 0xca, 0x6c, 0x6a, 0x16, 0x83, 0xfe, 0x02, 0x1a, 0xab, 0x03,
	0x29, 0x4f, 0xe3, 0xbe, 0x6e, 0x66, 0x85, 0xbf, 0x31, 0x6e, 0x57, 0xc9, 0xd2, 0xe3, 0x55, 0xb2,
	0x03, 0x4b, 0xe3, 0x75, 0xc4, 0x8a, 0x0e, 0x86, 0x1e, 0x31, 0xdc, 0x4e, 0x92, 0x68, 0x3f, 0x5e,
	0x51, 0x6a, 0xbf, 0x6c, 0xda, 0x4f, 0x90, 0x78, 0x3b, 0x90, 0x1c, 0x0f, 0x3e, 0xcf, 0x35, 0xa2,
	0xcc, 0xb0, 0xd6, 0x9f, 0x2a, 0x50, 0xd7, 0xfa, 0x3b, 0x14, 0x41, 0xf0, 0x41, 0x0d, 0x3e, 0x85,
	0x59, 0xcc, 0xc2, 0xc4, 0x65, 0x22, 0xc3, 0xf0, 0x5c, 0x4b, 0x9f, 0x0e, 0x1e, 0xac, 0xee, 0x58,
	0xa0, 0xb6, 0xee, 0x9c, 0x0f, 0xea, 0xce, 0xf9, 0x0e, 0x75, 0x57, 0xfa, 0xdf, 0x74, 0x87, 0xbb,
	0x17, 0x25, 0xa1, 0xe2, 0x72, 0x4f, 0x46, 0x77, 0x7a, 0x65, 0xf3, 0xc6, 0x3e, 0x4f, 0x92, 0x78,
	0x16, 0x5a, 0xd0, 0x19, 0x06, 0xdc, 0x30, 0x56, 0x3a, 0x4d, 0xdb, 0x2a, 0x5a, 0xf8, 0x68, 0x15,
	0x2d, 0xfe, 0x97, 0x2a, 0x5a, 0xfa, 0x80, 0x8a, 0xe2, 0xb4, 0xa9, 0x10, 0x23, 0x80, 0x0c, 0x6b,
	0xfd, 0xc3, 0x01, 0x38, 0xa5, 0x0f, 0x57, 0x92, 0x7d, 0xa1, 0x46, 0x31, 0xa6, 0x6e, 0x40, 0x1f,
	0xf0, 0x70, 0xde, 0x4b, 0x46, 0xd6, 0x1d, 0xcf, 0xc0, 0xdd, 0x9f, 0xc0, 0x4a, 0x36, 0xda, 0x0d,
	0x59, 0x7a, 0xec, 0xa3, 0xb9, 0x79, 0x0f, 0x7f, 0xcc, 0x00, 0x43, 0x1f, 0xd0, 0x87, 0xfc, 0x7c,
	0xc7, 0xc6, 0x6c, 0xdd, 0x01, 0x27, 0x49, 0x2c, 0xea, 0x01, 0x7d, 0xc0, 0xc7, 0xee, 0x6d, 0x24,
	0x95, 0x56, 0x5e, 0x51, 0xd4, 0x26, 0x93, 0xc5, 0xbd, 0x97, 0x8c, 0xf6, 0xa8, 0x7f, 0xa7, 0xf5,
	0x67, 0xc6, 0x9d, 0xe1, 0xad, 0xdf, 0x38, 0xb0, 0x72, 0x25, 0xd9, 0xa1, 0x08, 0x14, 0x97, 0x9d,
	0x28, 0x64, 0xda, 0x15, 0x5e, 0x6a, 0x6b, 0x28, 0x43, 0x7d, 0x5d, 0x71, 0x9a, 0xe5, 0xed, 0xfa,
	0x65, 0x31, 0x76, 0xd7, 0x61, 0x56, 0x30, 0xcd, 0x94, 0x9a, 0xe5, 0xed, 0xca, 0x65, 0x36, 0xc2,
	0xad, 0xbd, 0xe6, 0x7d, 0x11, 0x6a, 0x8d, 0x95, 0x4d, 0xc1, 0x17, 0x30, 0x16, 0x0d, 0x0f, 0x99,
	0xb6, 0xa8, 0x98, 0xd7, 0xea, 0x0c, 0x6c, 0xef, 0xe8, 0x0f, 0x01, 0xbc, 0xea, 0xaf, 0xc0, 0x52,
	0xfa, 0xd4, 0xeb, 0x8a, 0x41, 0x12, 0x50, 0xc5, 0xc9, 0x8c, 0xbb, 0x04, 0xf3, 0x19, 0x78, 0xc9,
	0x69, 0x40, 0x9c, 0xf6, 0xaf, 0x1d, 0xfd, 0x95, 0x92, 0x09, 0x67, 0x0d, 0x96, 0x8b, 0x41, 0xef,
	0x55, 0x78, 0x17, 0x46, 0x6f, 0x42, 0x32, 0xe3, 0x12, 0x68, 0x8c, 0xe1, 0xa3, 0x97, 0xc4, 0xb1,
	0x91, 0x57, 0x5d, 0x52, 0xb2, 0x91, 0xce, 0x19, 0x29, 0xbb, 0x2e, 0x2c, 0x9a, 0x6f, 0x75, 0x3a,
	0xa4, 0x62, 0x3b, 0x38, 0x4c, 0x54, 0x22, 0x79, 0x4c, 0xaa, 0xed, 0x5f, 0x39, 0xfa, 0xed, 0x6e,
	0xa1, 0x60, 0x0f, 0x56, 0xcd, 0xb1, 0x11, 0x4b, 0xba, 0xac, 0x31, 0xa3, 0xc3, 0x99, 0x04, 0x75,
	0x44, 0xeb, 0xe0, 0x5a, 0x60, 0xe7, 0xac, 0xd7, 0x3d, 0x22, 0xcf, 0x1e, 0xc5, 0xbf, 0x22, 0xcd,
	0xf6, 0x00, 0xe6, 0xae, 0xb2, 0xd6, 0x96, 0xcd, 0x27, 0x18, 0x37, 0x3c, 0xa7, 0xb9, 0xd3, 0xe0,
	0x5e, 0x32, 0x2a, 0x92, 0xa0, 0x01, 0x94, 0x0d, 0x29, 0x65, 0xcb, 0x2b, 0x10, 0x2d, 0x24, 0x52,
	0x36, 0xa7, 0xcb, 0x74, 0x43, 0x2a, 0xed, 0xbf, 0x38, 0x59, 0xb3, 0xd5, 0x87, 0xf5, 0x1a, 0x2c,
	0x17, 0x03, 0xc3, 0xe7, 0x2a, 0x90, 0x31, 0x7c, 0x16, 0xc9, 0x01, 0x6e, 0x9a, 0x8d, 0xa6, 0xab,
	0x20, 0x25, 0xf7, 0x13, 0xd8, 0x18, 0xa3, 0xbb, 0xd7, 0x71, 0x14, 0x24, 0x8a, 0x9f, 0x88, 0x81,
	0x50, 0xa4, 0x6a, 0xcf, 0xbf, 0x9b, 0xf8, 0xa8, 0x52, 0x32, 0xeb, 0x6e, 0xc2, 0xfa, 0x14, 0x9c,
	0xbe, 0x32, 0x67, 0x73, 0xdd, 0x21, 0xf7, 0x05, 0x0d, 0x52, 0xae, 0xe6, 0x6e, 0xc1, 0xe6, 0xe3,
	0x5c, 0x6f, 0x37, 0x08, 0x48, 0xbd, 0xfd, 0xcf, 0x32, 0xcc, 0x9f, 0x1b, 0x77, 0x8c, 0x3c, 0xb6,
	0x74, 0xd8, 0x7b, 0x15, 0xc6, 0xc9, 0xf5, 0x40, 0x28, 0xc5, 0x19, 0x99, 0x71, 0x9b, 0xb0, 0x62,
	0x93, 0xe9, 0xea, 0xff, 0x9d, 0xff, 0x1c, 0xf7, 0x53, 0x78, 0x62, 0x5a, 0xbc, 0xa6, 0x42, 0x89,
	0xb0, 0xdf, 0xd5, 0x73, 0x10, 0xa7, 0x88, 0x34, 0xa3, 0x53, 0x1c, 0x2d, 0x48, 0xc9, 0x7d, 0x0a,
	0xde, 0x34, 0x77, 0x48, 0x45, 0xc0, 0x19, 0x29, 0xbb, 0x1b, 0xb6, 0x6b, 0x2c, 0xa1, 0xf3, 0x44,
	0x91, 0x8a, 0xfb, 0x04, 0xd6, 0x1e, 0x99, 0x92, 0x33, 0x52, 0x9d, 0x5c, 0x0b, 0x9e, 0x95, 0x9c,
	0xf5, 0x2e, 0xa8, 0x54, 0x04, 0x26, 0x43, 0xc9, 0x48, 0x4c, 0xca, 0xbc, 0xfb, 0x0c, 0x3e, 0x31,
	0xb9, 0x0e, 0x7e, 0xe1, 0x04, 0x81, 0x08, 0xfb, 0xe9, 0xcb, 0x8d, 0x22, 0xab, 0xd3, 0x06, 0x38,
	0xc1, 0xc2, 0x7b, 0xf8, 0xdc, 0xf9, 0xe2, 0x64, 0x9a, 0xc6, 0x3c, 0xbe, 0xbe, 0x84, 0xc2, 0xb7,
	0x62, 0x4b, 0x93, 0xb0, 0x86, 0xc5, 0x66, 0xe2, 0xfb, 0x22, 0xc6, 0xcf, 0x49, 0x46, 0xd6, 0x27,
	0xd3, 0xb3, 0xcf, 0x03, 0x8e, 0x39, 0xd8, 0x98, 0xf4, 0x84, 0xcb, 0x2c, 0xbc, 0x11, 0xaf, 0xcd,
	0x61, 0xa9, 0xb8, 0x47, 0x64, 0x0a, 0xc8, 0x9d, 0x8f, 0xa1, 0xde, 0xf9, 0x4b, 0x32, 0x53, 0xcc,
	0x64, 0xe0, 0xe3, 0x99, 0x9c, 0x22, 0xd9, 0x26, 0x7d, 0x4b, 0xc3, 0x3e, 0x67, 0xa4, 0xd4, 0xfe,
	0x39, 0x34, 0x2e, 0xcc, 0xaf, 0xb1, 0x35, 0x58, 0x36, 0xc7, 0xbd, 0x93, 0x28, 0xec, 0x93, 0x19,
	0xf7, 0x39, 0xac, 0x5a, 0xf0, 0x23, 0x02, 0x5b, 0x07, 0xd7, 0x32, 0x49, 0x2b, 0xd7, 0x69, 0xff,
	0xde, 0x81, 0x85, 0xd3, 0x88, 0x89, 0x9b, 0x91, 0x8e, 0xe2, 0x7c, 0x88, 0xc2, 0xb0, 0x00, 0xa3,
	0x58, 0x3d, 0x58, 0xb5, 0xa9, 0xa2, 0x60, 0xa7, 0x98, 0x74, 0x89, 0xa4, 0x34, 0x3d, 0x5d, 0x96,
	0x7d, 0x52, 0x9e, 0x7e, 0xe9, 0x20, 0xd4, 0x4c, 0x65, 0x9a, 0x49, 0x37, 0x86, 0x54, 0xdb, 0x17,
	0x00, 0xe9, 0xff, 0x40, 0xba, 0xa9, 0xa4, 0x9d, 0x2e, 0x1b, 0x4d, 0xf5, 0xd0, 0x1c, 0xc7, 0x33,
	0x95, 0x38, 0x59, 0xef, 0xca, 0xc1, 0xf4, 0x84, 0x25, 0xa5, 0xf6, 0x97, 0x50, 0xeb, 0xe4, 0xff,
	0x44, 0xac, 0x02, 0xc9, 0x9f, 0xed, 0xd3, 0xa1, 0x40, 0x8f, 0x5e, 0xee, 0xa7, 0x8d, 0x71, 0x6c,
	0xd7, 0xdd, 0x4f, 0x4f, 0x87, 0x02, 0xe9, 0x9c, 0x1d, 0x91, 0x72, 0xfb, 0x8f, 0x0e, 0x34, 0x3a,
	0x81, 0xba, 0x2c, 0xfe, 0x44, 0x78, 0x0e, 0xab, 0xe6, 0xf8, 0xb1, 0x5d, 0x5a, 0x83, 0x65, 0xcb,
	0xa4, 0x4b, 0x6f, 0x78, 0x9a, 0x77, 0x0b, 0x7e, 0x4d, 0x65, 0x88, 0xc5, 0xef, 0xa0, 0x7e, 0x2d,
	0x66, 0x1f, 0x95, 0x23, 0x49, 0x09, 0x55, 0x67, 0x11, 0x79, 0xbb, 0xd4, 0x33, 0x96, 0xb1, 0x8a,
	0x2d, 0xfa, 0x7c, 0xa8, 0xb2, 0x57, 0x2b, 0x7b, 0x3f, 0xfb, 0xe6, 0xed, 0x96, 0xf3, 0xed, 0xdb,
	0x2d, 0xe7, 0x6f, 0x6f, 0xb7, 0x9c, 0xdf, 0xbe, 0xdb, 0x9a, 0xf9, 0xf6, 0xdd, 0xd6, 0xcc, 0x9f,
	0xdf, 0x6d, 0xcd, 0xc0, 0x8a, 0x1f, 0x0d, 0x76, 0x6e, 0x12, 0x95, 0xec, 0x44, 0x43, 0x1e, 0xd2,
	0xa1, 0xd8, 0x19, 0x5e, 0x7f, 0xf5, 0xc3, 0xbe, 0x50, 0xb7, 0xc9, 0xf5, 0x8e, 0x1f, 0x0d, 0x5e,
	0x20, 0x87, 0xd4, 0x8b, 0x1b, 0x45, 0x87, 0xe2, 0xc7, 0xfd, 0xe8, 0xc5, 0xf0, 0xfa, 0x85, 0x92,
	0xcc, 0xd7, 0xff, 0x61, 0xfc, 0x27, 0x00, 0x00, 0xff, 0xff, 0xce, 0x8f, 0xfe, 0xc0, 0xda, 0x14,
	0x00, 0x00,
}

func (m *AccCashInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccCashInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccCashInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.AvailableBalance))))
	i--
	dAtA[i] = 0x19
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Cash))))
	i--
	dAtA[i] = 0x11
	i = encodeVarintTrd_Common(dAtA, i, uint64(m.Currency))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *TrdHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrdHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TrdHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintTrd_Common(dAtA, i, uint64(m.TrdMarket))
	i--
	dAtA[i] = 0x18
	i = encodeVarintTrd_Common(dAtA, i, uint64(m.AccID))
	i--
	dAtA[i] = 0x10
	i = encodeVarintTrd_Common(dAtA, i, uint64(m.TrdEnv))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *TrdAcc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrdAcc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TrdAcc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.CardNum)
	copy(dAtA[i:], m.CardNum)
	i = encodeVarintTrd_Common(dAtA, i, uint64(len(m.CardNum)))
	i--
	dAtA[i] = 0x2a
	i = encodeVarintTrd_Common(dAtA, i, uint64(m.AccType))
	i--
	dAtA[i] = 0x20
	if len(m.TrdMarketAuthList) > 0 {
		for iNdEx := len(m.TrdMarketAuthList) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintTrd_Common(dAtA, i, uint64(m.TrdMarketAuthList[iNdEx]))
			i--
			dAtA[i] = 0x18
		}
	}
	i = encodeVarintTrd_Common(dAtA, i, uint64(m.AccID))
	i--
	dAtA[i] = 0x10
	i = encodeVarintTrd_Common(dAtA, i, uint64(m.TrdEnv))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *Funds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Funds) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Funds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CashInfoList) > 0 {
		for iNdEx := len(m.CashInfoList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CashInfoList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTrd_Common(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x7a
		}
	}
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MaintenanceMargin))))
	i--
	dAtA[i] = 0x71
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.InitialMargin))))
	i--
	dAtA[i] = 0x69
	i = encodeVarintTrd_Common(dAtA, i, uint64(m.RiskLevel))
	i--
	dAtA[i] = 0x60
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.RealizedPL))))
	i--
	dAtA[i] = 0x59
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.UnrealizedPL))))
	i--
	dAtA[i] = 0x51
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.AvailableFunds))))
	i--
	dAtA[i] = 0x49
	i = encodeVarintTrd_Common(dAtA, i, uint64(m.Currency))
	i--
	dAtA[i] = 0x40
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.AvlWithdrawalCash))))
	i--
	dAtA[i] = 0x39
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.DebtCash))))
	i--
	dAtA[i] = 0x31
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.FrozenCash))))
	i--
	dAtA[i] = 0x29
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MarketVal))))
	i--
	dAtA[i] = 0x21
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Cash))))
	i--
	dAtA[i] = 0x19
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.TotalAssets))))
	i--
	dAtA[i] = 0x11
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Power))))
	i--
	dAtA[i] = 0x9
	return len(dAtA) - i, nil
}

func (m *Position) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Position) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Position) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.RealizedPL))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xe9
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.UnrealizedPL))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xe1
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.TdSellQty))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xd1
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.TdSellVal))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xc9
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.TdBuyQty))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xc1
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.TdBuyVal))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xb9
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.TdTrdVal))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xb1
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.TdPlVal))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa9
	i = encodeVarintTrd_Common(dAtA, i, uint64(m.SecMarket))
	i--
	dAtA[i] = 0x60
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.PlRatio))))
	i--
	dAtA[i] = 0x59
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.PlVal))))
	i--
	dAtA[i] = 0x51
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Val))))
	i--
	dAtA[i] = 0x49
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.CostPrice))))
	i--
	dAtA[i] = 0x41
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Price))))
	i--
	dAtA[i] = 0x39
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.CanSellQty))))
	i--
	dAtA[i] = 0x31
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Qty))))
	i--
	dAtA[i] = 0x29
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintTrd_Common(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0x22
	i -= len(m.Code)
	copy(dAtA[i:], m.Code)
	i = encodeVarintTrd_Common(dAtA, i, uint64(len(m.Code)))
	i--
	dAtA[i] = 0x1a
	i = encodeVarintTrd_Common(dAtA, i, uint64(m.PositionSide))
	i--
	dAtA[i] = 0x10
	i = encodeVarintTrd_Common(dAtA, i, uint64(m.PositionID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *Order) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Order) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Order) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Remark)
	copy(dAtA[i:], m.Remark)
	i = encodeVarintTrd_Common(dAtA, i, uint64(len(m.Remark)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x92
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.UpdateTimestamp))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x89
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.CreateTimestamp))))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x81
	i = encodeVarintTrd_Common(dAtA, i, uint64(m.SecMarket))
	i--
	dAtA[i] = 0x78
	i -= len(m.LastErrMsg)
	copy(dAtA[i:], m.LastErrMsg)
	i = encodeVarintTrd_Common(dAtA, i, uint64(len(m.LastErrMsg)))
	i--
	dAtA[i] = 0x72
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.FillAvgPrice))))
	i--
	dAtA[i] = 0x69
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.FillQty))))
	i--
	dAtA[i] = 0x61
	i -= len(m.UpdateTime)
	copy(dAtA[i:], m.UpdateTime)
	i = encodeVarintTrd_Common(dAtA, i, uint64(len(m.UpdateTime)))
	i--
	dAtA[i] = 0x5a
	i -= len(m.CreateTime)
	copy(dAtA[i:], m.CreateTime)
	i = encodeVarintTrd_Common(dAtA, i, uint64(len(m.CreateTime)))
	i--
	dAtA[i] = 0x52
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Price))))
	i--
	dAtA[i] = 0x49
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Qty))))
	i--
	dAtA[i] = 0x41
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintTrd_Common(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0x3a
	i -= len(m.Code)
	copy(dAtA[i:], m.Code)
	i = encodeVarintTrd_Common(dAtA, i, uint64(len(m.Code)))
	i--
	dAtA[i] = 0x32
	i -= len(m.OrderIDEx)
	copy(dAtA[i:], m.OrderIDEx)
	i = encodeVarintTrd_Common(dAtA, i, uint64(len(m.OrderIDEx)))
	i--
	dAtA[i] = 0x2a
	i = encodeVarintTrd_Common(dAtA, i, uint64(m.OrderID))
	i--
	dAtA[i] = 0x20
	i = encodeVarintTrd_Common(dAtA, i, uint64(m.OrderStatus))
	i--
	dAtA[i] = 0x18
	i = encodeVarintTrd_Common(dAtA, i, uint64(m.OrderType))
	i--
	dAtA[i] = 0x10
	i = encodeVarintTrd_Common(dAtA, i, uint64(m.TrdSide))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *OrderFill) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderFill) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrderFill) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintTrd_Common(dAtA, i, uint64(m.Status))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x80
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.UpdateTimestamp))))
	i--
	dAtA[i] = 0x79
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.CreateTimestamp))))
	i--
	dAtA[i] = 0x71
	i = encodeVarintTrd_Common(dAtA, i, uint64(m.SecMarket))
	i--
	dAtA[i] = 0x68
	i -= len(m.CounterBrokerName)
	copy(dAtA[i:], m.CounterBrokerName)
	i = encodeVarintTrd_Common(dAtA, i, uint64(len(m.CounterBrokerName)))
	i--
	dAtA[i] = 0x62
	i = encodeVarintTrd_Common(dAtA, i, uint64(m.CounterBrokerID))
	i--
	dAtA[i] = 0x58
	i -= len(m.CreateTime)
	copy(dAtA[i:], m.CreateTime)
	i = encodeVarintTrd_Common(dAtA, i, uint64(len(m.CreateTime)))
	i--
	dAtA[i] = 0x52
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Price))))
	i--
	dAtA[i] = 0x49
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Qty))))
	i--
	dAtA[i] = 0x41
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintTrd_Common(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0x3a
	i -= len(m.Code)
	copy(dAtA[i:], m.Code)
	i = encodeVarintTrd_Common(dAtA, i, uint64(len(m.Code)))
	i--
	dAtA[i] = 0x32
	i -= len(m.OrderIDEx)
	copy(dAtA[i:], m.OrderIDEx)
	i = encodeVarintTrd_Common(dAtA, i, uint64(len(m.OrderIDEx)))
	i--
	dAtA[i] = 0x2a
	i = encodeVarintTrd_Common(dAtA, i, uint64(m.OrderID))
	i--
	dAtA[i] = 0x20
	i -= len(m.FillIDEx)
	copy(dAtA[i:], m.FillIDEx)
	i = encodeVarintTrd_Common(dAtA, i, uint64(len(m.FillIDEx)))
	i--
	dAtA[i] = 0x1a
	i = encodeVarintTrd_Common(dAtA, i, uint64(m.FillID))
	i--
	dAtA[i] = 0x10
	i = encodeVarintTrd_Common(dAtA, i, uint64(m.TrdSide))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *MaxTrdQtys) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MaxTrdQtys) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MaxTrdQtys) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MaxBuyBack))))
	i--
	dAtA[i] = 0x29
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MaxSellShort))))
	i--
	dAtA[i] = 0x21
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MaxPositionSell))))
	i--
	dAtA[i] = 0x19
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MaxCashAndMarginBuy))))
	i--
	dAtA[i] = 0x11
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MaxCashBuy))))
	i--
	dAtA[i] = 0x9
	return len(dAtA) - i, nil
}

func (m *TrdFilterConditions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrdFilterConditions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TrdFilterConditions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.EndTime)
	copy(dAtA[i:], m.EndTime)
	i = encodeVarintTrd_Common(dAtA, i, uint64(len(m.EndTime)))
	i--
	dAtA[i] = 0x22
	i -= len(m.BeginTime)
	copy(dAtA[i:], m.BeginTime)
	i = encodeVarintTrd_Common(dAtA, i, uint64(len(m.BeginTime)))
	i--
	dAtA[i] = 0x1a
	if len(m.IdList) > 0 {
		for iNdEx := len(m.IdList) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintTrd_Common(dAtA, i, uint64(m.IdList[iNdEx]))
			i--
			dAtA[i] = 0x10
		}
	}
	if len(m.CodeList) > 0 {
		for iNdEx := len(m.CodeList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CodeList[iNdEx])
			copy(dAtA[i:], m.CodeList[iNdEx])
			i = encodeVarintTrd_Common(dAtA, i, uint64(len(m.CodeList[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintTrd_Common(dAtA []byte, offset int, v uint64) int {
	offset -= sovTrd_Common(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AccCashInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTrd_Common(uint64(m.Currency))
	n += 9
	n += 9
	return n
}

func (m *TrdHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTrd_Common(uint64(m.TrdEnv))
	n += 1 + sovTrd_Common(uint64(m.AccID))
	n += 1 + sovTrd_Common(uint64(m.TrdMarket))
	return n
}

func (m *TrdAcc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTrd_Common(uint64(m.TrdEnv))
	n += 1 + sovTrd_Common(uint64(m.AccID))
	if len(m.TrdMarketAuthList) > 0 {
		for _, e := range m.TrdMarketAuthList {
			n += 1 + sovTrd_Common(uint64(e))
		}
	}
	n += 1 + sovTrd_Common(uint64(m.AccType))
	l = len(m.CardNum)
	n += 1 + l + sovTrd_Common(uint64(l))
	return n
}

func (m *Funds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 9
	n += 9
	n += 9
	n += 9
	n += 9
	n += 9
	n += 9
	n += 1 + sovTrd_Common(uint64(m.Currency))
	n += 9
	n += 9
	n += 9
	n += 1 + sovTrd_Common(uint64(m.RiskLevel))
	n += 9
	n += 9
	if len(m.CashInfoList) > 0 {
		for _, e := range m.CashInfoList {
			l = e.Size()
			n += 1 + l + sovTrd_Common(uint64(l))
		}
	}
	return n
}

func (m *Position) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTrd_Common(uint64(m.PositionID))
	n += 1 + sovTrd_Common(uint64(m.PositionSide))
	l = len(m.Code)
	n += 1 + l + sovTrd_Common(uint64(l))
	l = len(m.Name)
	n += 1 + l + sovTrd_Common(uint64(l))
	n += 9
	n += 9
	n += 9
	n += 9
	n += 9
	n += 9
	n += 9
	n += 1 + sovTrd_Common(uint64(m.SecMarket))
	n += 10
	n += 10
	n += 10
	n += 10
	n += 10
	n += 10
	n += 10
	n += 10
	return n
}

func (m *Order) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTrd_Common(uint64(m.TrdSide))
	n += 1 + sovTrd_Common(uint64(m.OrderType))
	n += 1 + sovTrd_Common(uint64(m.OrderStatus))
	n += 1 + sovTrd_Common(uint64(m.OrderID))
	l = len(m.OrderIDEx)
	n += 1 + l + sovTrd_Common(uint64(l))
	l = len(m.Code)
	n += 1 + l + sovTrd_Common(uint64(l))
	l = len(m.Name)
	n += 1 + l + sovTrd_Common(uint64(l))
	n += 9
	n += 9
	l = len(m.CreateTime)
	n += 1 + l + sovTrd_Common(uint64(l))
	l = len(m.UpdateTime)
	n += 1 + l + sovTrd_Common(uint64(l))
	n += 9
	n += 9
	l = len(m.LastErrMsg)
	n += 1 + l + sovTrd_Common(uint64(l))
	n += 1 + sovTrd_Common(uint64(m.SecMarket))
	n += 10
	n += 10
	l = len(m.Remark)
	n += 2 + l + sovTrd_Common(uint64(l))
	return n
}

func (m *OrderFill) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTrd_Common(uint64(m.TrdSide))
	n += 1 + sovTrd_Common(uint64(m.FillID))
	l = len(m.FillIDEx)
	n += 1 + l + sovTrd_Common(uint64(l))
	n += 1 + sovTrd_Common(uint64(m.OrderID))
	l = len(m.OrderIDEx)
	n += 1 + l + sovTrd_Common(uint64(l))
	l = len(m.Code)
	n += 1 + l + sovTrd_Common(uint64(l))
	l = len(m.Name)
	n += 1 + l + sovTrd_Common(uint64(l))
	n += 9
	n += 9
	l = len(m.CreateTime)
	n += 1 + l + sovTrd_Common(uint64(l))
	n += 1 + sovTrd_Common(uint64(m.CounterBrokerID))
	l = len(m.CounterBrokerName)
	n += 1 + l + sovTrd_Common(uint64(l))
	n += 1 + sovTrd_Common(uint64(m.SecMarket))
	n += 9
	n += 9
	n += 2 + sovTrd_Common(uint64(m.Status))
	return n
}

func (m *MaxTrdQtys) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 9
	n += 9
	n += 9
	n += 9
	n += 9
	return n
}

func (m *TrdFilterConditions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CodeList) > 0 {
		for _, s := range m.CodeList {
			l = len(s)
			n += 1 + l + sovTrd_Common(uint64(l))
		}
	}
	if len(m.IdList) > 0 {
		for _, e := range m.IdList {
			n += 1 + sovTrd_Common(uint64(e))
		}
	}
	l = len(m.BeginTime)
	n += 1 + l + sovTrd_Common(uint64(l))
	l = len(m.EndTime)
	n += 1 + l + sovTrd_Common(uint64(l))
	return n
}

func sovTrd_Common(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTrd_Common(x uint64) (n int) {
	return sovTrd_Common(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AccCashInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrd_Common
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccCashInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccCashInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Currency", wireType)
			}
			m.Currency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrd_Common
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Currency |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cash", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Cash = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableBalance", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.AvailableBalance = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipTrd_Common(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrd_Common
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTrd_Common
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrdHeader) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrd_Common
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrdHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrdHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrdEnv", wireType)
			}
			m.TrdEnv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrd_Common
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TrdEnv |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccID", wireType)
			}
			m.AccID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrd_Common
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrdMarket", wireType)
			}
			m.TrdMarket = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrd_Common
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TrdMarket |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipTrd_Common(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrd_Common
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTrd_Common
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("trdEnv")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("accID")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("trdMarket")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrdAcc) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrd_Common
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrdAcc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrdAcc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrdEnv", wireType)
			}
			m.TrdEnv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrd_Common
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TrdEnv |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccID", wireType)
			}
			m.AccID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrd_Common
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTrd_Common
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TrdMarketAuthList = append(m.TrdMarketAuthList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTrd_Common
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTrd_Common
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTrd_Common
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TrdMarketAuthList) == 0 {
					m.TrdMarketAuthList = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTrd_Common
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TrdMarketAuthList = append(m.TrdMarketAuthList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TrdMarketAuthList", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccType", wireType)
			}
			m.AccType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrd_Common
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardNum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrd_Common
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrd_Common
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrd_Common
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CardNum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrd_Common(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrd_Common
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTrd_Common
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("trdEnv")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("accID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Funds) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrd_Common
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Funds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Funds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Power = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalAssets", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.TotalAssets = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cash", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Cash = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketVal", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MarketVal = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrozenCash", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.FrozenCash = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebtCash", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.DebtCash = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000020)
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvlWithdrawalCash", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.AvlWithdrawalCash = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000040)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Currency", wireType)
			}
			m.Currency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrd_Common
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Currency |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableFunds", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.AvailableFunds = float64(math.Float64frombits(v))
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnrealizedPL", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.UnrealizedPL = float64(math.Float64frombits(v))
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealizedPL", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.RealizedPL = float64(math.Float64frombits(v))
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RiskLevel", wireType)
			}
			m.RiskLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrd_Common
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RiskLevel |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialMargin", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.InitialMargin = float64(math.Float64frombits(v))
		case 14:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaintenanceMargin", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MaintenanceMargin = float64(math.Float64frombits(v))
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CashInfoList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrd_Common
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrd_Common
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrd_Common
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CashInfoList = append(m.CashInfoList, &AccCashInfo{})
			if err := m.CashInfoList[len(m.CashInfoList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrd_Common(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrd_Common
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTrd_Common
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("power")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("totalAssets")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("cash")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("marketVal")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("frozenCash")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("debtCash")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("avlWithdrawalCash")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Position) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrd_Common
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Position: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Position: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionID", wireType)
			}
			m.PositionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrd_Common
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PositionID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionSide", wireType)
			}
			m.PositionSide = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrd_Common
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PositionSide |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrd_Common
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrd_Common
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrd_Common
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrd_Common
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrd_Common
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrd_Common
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qty", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Qty = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanSellQty", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.CanSellQty = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000020)
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Price = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000040)
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CostPrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.CostPrice = float64(math.Float64frombits(v))
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Val = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000080)
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlVal", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.PlVal = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000100)
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlRatio", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.PlRatio = float64(math.Float64frombits(v))
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecMarket", wireType)
			}
			m.SecMarket = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrd_Common
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SecMarket |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TdPlVal", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.TdPlVal = float64(math.Float64frombits(v))
		case 22:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TdTrdVal", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.TdTrdVal = float64(math.Float64frombits(v))
		case 23:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TdBuyVal", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.TdBuyVal = float64(math.Float64frombits(v))
		case 24:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TdBuyQty", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.TdBuyQty = float64(math.Float64frombits(v))
		case 25:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TdSellVal", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.TdSellVal = float64(math.Float64frombits(v))
		case 26:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TdSellQty", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.TdSellQty = float64(math.Float64frombits(v))
		case 28:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnrealizedPL", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.UnrealizedPL = float64(math.Float64frombits(v))
		case 29:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealizedPL", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.RealizedPL = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipTrd_Common(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrd_Common
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTrd_Common
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("positionID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("positionSide")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("code")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("name")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("qty")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("canSellQty")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("price")
	}
	if hasFields[0]&uint64(0x00000080) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("val")
	}
	if hasFields[0]&uint64(0x00000100) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("plVal")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Order) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrd_Common
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Order: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Order: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrdSide", wireType)
			}
			m.TrdSide = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrd_Common
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TrdSide |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderType", wireType)
			}
			m.OrderType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrd_Common
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderStatus", wireType)
			}
			m.OrderStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrd_Common
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderStatus |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderID", wireType)
			}
			m.OrderID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrd_Common
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderIDEx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrd_Common
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrd_Common
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrd_Common
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderIDEx = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrd_Common
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrd_Common
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrd_Common
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000020)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrd_Common
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrd_Common
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrd_Common
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000040)
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qty", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Qty = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000080)
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Price = float64(math.Float64frombits(v))
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrd_Common
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrd_Common
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrd_Common
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreateTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000100)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrd_Common
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrd_Common
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrd_Common
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000200)
		case 12:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FillQty", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.FillQty = float64(math.Float64frombits(v))
		case 13:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FillAvgPrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.FillAvgPrice = float64(math.Float64frombits(v))
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastErrMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrd_Common
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrd_Common
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrd_Common
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastErrMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecMarket", wireType)
			}
			m.SecMarket = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrd_Common
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SecMarket |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTimestamp", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.CreateTimestamp = float64(math.Float64frombits(v))
		case 17:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTimestamp", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.UpdateTimestamp = float64(math.Float64frombits(v))
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrd_Common
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrd_Common
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrd_Common
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrd_Common(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrd_Common
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTrd_Common
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("trdSide")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("orderType")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("orderStatus")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("orderID")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("orderIDEx")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("code")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("name")
	}
	if hasFields[0]&uint64(0x00000080) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("qty")
	}
	if hasFields[0]&uint64(0x00000100) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("createTime")
	}
	if hasFields[0]&uint64(0x00000200) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("updateTime")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderFill) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrd_Common
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderFill: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderFill: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrdSide", wireType)
			}
			m.TrdSide = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrd_Common
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TrdSide |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FillID", wireType)
			}
			m.FillID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrd_Common
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FillID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FillIDEx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrd_Common
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrd_Common
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrd_Common
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FillIDEx = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderID", wireType)
			}
			m.OrderID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrd_Common
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderIDEx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrd_Common
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrd_Common
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrd_Common
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderIDEx = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrd_Common
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrd_Common
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrd_Common
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrd_Common
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrd_Common
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrd_Common
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000010)
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qty", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Qty = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000020)
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Price = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000040)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrd_Common
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrd_Common
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrd_Common
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreateTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000080)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterBrokerID", wireType)
			}
			m.CounterBrokerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrd_Common
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CounterBrokerID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterBrokerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrd_Common
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrd_Common
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrd_Common
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CounterBrokerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecMarket", wireType)
			}
			m.SecMarket = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrd_Common
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SecMarket |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTimestamp", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.CreateTimestamp = float64(math.Float64frombits(v))
		case 15:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTimestamp", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.UpdateTimestamp = float64(math.Float64frombits(v))
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrd_Common
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTrd_Common(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrd_Common
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTrd_Common
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("trdSide")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("fillID")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("fillIDEx")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("code")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("name")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("qty")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("price")
	}
	if hasFields[0]&uint64(0x00000080) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("createTime")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MaxTrdQtys) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrd_Common
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MaxTrdQtys: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MaxTrdQtys: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCashBuy", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MaxCashBuy = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCashAndMarginBuy", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MaxCashAndMarginBuy = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPositionSell", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MaxPositionSell = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000002)
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSellShort", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MaxSellShort = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxBuyBack", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MaxBuyBack = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipTrd_Common(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrd_Common
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTrd_Common
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("maxCashBuy")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("maxPositionSell")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrdFilterConditions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrd_Common
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrdFilterConditions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrdFilterConditions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrd_Common
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrd_Common
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrd_Common
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CodeList = append(m.CodeList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTrd_Common
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.IdList = append(m.IdList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTrd_Common
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTrd_Common
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTrd_Common
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.IdList) == 0 {
					m.IdList = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTrd_Common
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.IdList = append(m.IdList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field IdList", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrd_Common
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrd_Common
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrd_Common
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BeginTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrd_Common
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrd_Common
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrd_Common
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrd_Common(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrd_Common
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTrd_Common
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTrd_Common(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTrd_Common
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTrd_Common
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTrd_Common
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTrd_Common
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthTrd_Common
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTrd_Common
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTrd_Common(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthTrd_Common
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTrd_Common = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTrd_Common   = fmt.Errorf("proto: integer overflow")
)
